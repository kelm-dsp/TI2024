
trumpet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b360  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b610  0800b610  0001b610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b614  0800b614  0001b614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  0800b618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000033c  24000014  0800b62c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000350  0800b62c  00020350  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017f7b  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a26  00000000  00000000  00038000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001480  00000000  00000000  0003aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ffd  00000000  00000000  0003bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003871b  00000000  00000000  0003cea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aa01  00000000  00000000  000755c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170e27  00000000  00000000  0008ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000591c  00000000  00000000  00200de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005f  00000000  00000000  00206704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b5e0 	.word	0x0800b5e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800b5e0 	.word	0x0800b5e0

080002d8 <writeVCNLByte>:
uint8_t readVCNLByte(I2C_HandleTypeDef hi2c, uint8_t address);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void writeVCNLByte(I2C_HandleTypeDef hi2c, uint8_t address, uint8_t data) {
 80002d8:	b084      	sub	sp, #16
 80002da:	b580      	push	{r7, lr}
 80002dc:	b086      	sub	sp, #24
 80002de:	af02      	add	r7, sp, #8
 80002e0:	f107 0c18 	add.w	ip, r7, #24
 80002e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd[12];
	// writeVCNLByte(address, data) writes a single byte of data to address
	cmd[0] = (uint8_t) address;
 80002e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80002ec:	713b      	strb	r3, [r7, #4]
	cmd[1] = (uint8_t) data;
 80002ee:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80002f2:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c, VCNL4000_ADDRESS, cmd, 2,
 80002f4:	1d3a      	adds	r2, r7, #4
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	2302      	movs	r3, #2
 80002fe:	2126      	movs	r1, #38	; 0x26
 8000300:	f107 0018 	add.w	r0, r7, #24
 8000304:	f005 fbb8 	bl	8005a78 <HAL_I2C_Master_Transmit>
 8000308:	4603      	mov	r3, r0
 800030a:	461a      	mov	r2, r3
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <writeVCNLByte+0x48>)
 800030e:	701a      	strb	r2, [r3, #0]
	HAL_MAX_DELAY);
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800031a:	b004      	add	sp, #16
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	240001ac 	.word	0x240001ac

08000324 <readVCNLByte>:

uint8_t readVCNLByte(I2C_HandleTypeDef hi2c, uint8_t address) {
 8000324:	b084      	sub	sp, #16
 8000326:	b580      	push	{r7, lr}
 8000328:	b08a      	sub	sp, #40	; 0x28
 800032a:	af02      	add	r7, sp, #8
 800032c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000330:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd[12];
	uint8_t val[12];
	uint8_t data;
	data = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	77fb      	strb	r3, [r7, #31]
	// readByte(address) reads a single byte of data from address
	cmd[0] = address;
 8000338:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800033c:	743b      	strb	r3, [r7, #16]
	ret = HAL_I2C_Master_Transmit(&hi2c, VCNL4000_ADDRESS, cmd, 1,
 800033e:	f107 0210 	add.w	r2, r7, #16
 8000342:	f04f 33ff 	mov.w	r3, #4294967295
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2301      	movs	r3, #1
 800034a:	2126      	movs	r1, #38	; 0x26
 800034c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000350:	f005 fb92 	bl	8005a78 <HAL_I2C_Master_Transmit>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <readVCNLByte+0x68>)
 800035a:	701a      	strb	r2, [r3, #0]
	HAL_MAX_DELAY);
	ret = HAL_I2C_Master_Receive(&hi2c, VCNL4000_ADDRESS, val, 1,
 800035c:	1d3a      	adds	r2, r7, #4
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2301      	movs	r3, #1
 8000366:	2126      	movs	r1, #38	; 0x26
 8000368:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800036c:	f005 fc78 	bl	8005c60 <HAL_I2C_Master_Receive>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <readVCNLByte+0x68>)
 8000376:	701a      	strb	r2, [r3, #0]
	HAL_MAX_DELAY);
	data = val[0];
 8000378:	793b      	ldrb	r3, [r7, #4]
 800037a:	77fb      	strb	r3, [r7, #31]
	return data;
 800037c:	7ffb      	ldrb	r3, [r7, #31]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3720      	adds	r7, #32
 8000382:	46bd      	mov	sp, r7
 8000384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000388:	b004      	add	sp, #16
 800038a:	4770      	bx	lr
 800038c:	240001ac 	.word	0x240001ac

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	b097      	sub	sp, #92	; 0x5c
 8000394:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fe91 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f8c9 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f000 fab1 	bl	8000904 <MX_GPIO_Init>
  MX_DMA_Init();
 80003a2:	f000 fa8f 	bl	80008c4 <MX_DMA_Init>
  MX_ADC1_Init();
 80003a6:	f000 f971 	bl	800068c <MX_ADC1_Init>
  MX_TIM4_Init();
 80003aa:	f000 fa3d 	bl	8000828 <MX_TIM4_Init>
  MX_I2C1_Init();
 80003ae:	f000 f9fb 	bl	80007a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	// Initialize DMA conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_result, adc_channel_count);
 80003b2:	4b57      	ldr	r3, [pc, #348]	; (8000510 <main+0x180>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	461a      	mov	r2, r3
 80003b8:	4956      	ldr	r1, [pc, #344]	; (8000514 <main+0x184>)
 80003ba:	4857      	ldr	r0, [pc, #348]	; (8000518 <main+0x188>)
 80003bc:	f001 faea 	bl	8001994 <HAL_ADC_Start_DMA>
	//Initialize timer4 for DMA cadence setting
	HAL_TIM_Base_Init(&htim4);
 80003c0:	4856      	ldr	r0, [pc, #344]	; (800051c <main+0x18c>)
 80003c2:	f00a fbdf 	bl	800ab84 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 80003c6:	4855      	ldr	r0, [pc, #340]	; (800051c <main+0x18c>)
 80003c8:	f00a fc34 	bl	800ac34 <HAL_TIM_Base_Start_IT>
	//Initialize VCNL
	writeVCNLByte(hi2c1, 0x84, 0x0F); // Configures ambient light measures - Single conversion mode, 128 averages
 80003cc:	4c54      	ldr	r4, [pc, #336]	; (8000520 <main+0x190>)
 80003ce:	230f      	movs	r3, #15
 80003d0:	9312      	str	r3, [sp, #72]	; 0x48
 80003d2:	2384      	movs	r3, #132	; 0x84
 80003d4:	9311      	str	r3, [sp, #68]	; 0x44
 80003d6:	4668      	mov	r0, sp
 80003d8:	f104 0310 	add.w	r3, r4, #16
 80003dc:	2244      	movs	r2, #68	; 0x44
 80003de:	4619      	mov	r1, r3
 80003e0:	f00b f8f0 	bl	800b5c4 <memcpy>
 80003e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003e8:	f7ff ff76 	bl	80002d8 <writeVCNLByte>
	writeVCNLByte(hi2c1, 0x83, 15); // sets IR current in steps of 10mA 0-200mA --> 200mA
 80003ec:	4c4c      	ldr	r4, [pc, #304]	; (8000520 <main+0x190>)
 80003ee:	230f      	movs	r3, #15
 80003f0:	9312      	str	r3, [sp, #72]	; 0x48
 80003f2:	2383      	movs	r3, #131	; 0x83
 80003f4:	9311      	str	r3, [sp, #68]	; 0x44
 80003f6:	4668      	mov	r0, sp
 80003f8:	f104 0310 	add.w	r3, r4, #16
 80003fc:	2244      	movs	r2, #68	; 0x44
 80003fe:	4619      	mov	r1, r3
 8000400:	f00b f8e0 	bl	800b5c4 <memcpy>
 8000404:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000408:	f7ff ff66 	bl	80002d8 <writeVCNLByte>
	writeVCNLByte(hi2c1, 0x89, 2); // Proximity IR test signal freq, 0-3 - 781.25 kHz
 800040c:	4c44      	ldr	r4, [pc, #272]	; (8000520 <main+0x190>)
 800040e:	2302      	movs	r3, #2
 8000410:	9312      	str	r3, [sp, #72]	; 0x48
 8000412:	2389      	movs	r3, #137	; 0x89
 8000414:	9311      	str	r3, [sp, #68]	; 0x44
 8000416:	4668      	mov	r0, sp
 8000418:	f104 0310 	add.w	r3, r4, #16
 800041c:	2244      	movs	r2, #68	; 0x44
 800041e:	4619      	mov	r1, r3
 8000420:	f00b f8d0 	bl	800b5c4 <memcpy>
 8000424:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000428:	f7ff ff56 	bl	80002d8 <writeVCNLByte>
	writeVCNLByte(hi2c1, 0x8A, 0x81); // proximity modulator timing - 129, recommended by Vishay
 800042c:	4c3c      	ldr	r4, [pc, #240]	; (8000520 <main+0x190>)
 800042e:	2381      	movs	r3, #129	; 0x81
 8000430:	9312      	str	r3, [sp, #72]	; 0x48
 8000432:	238a      	movs	r3, #138	; 0x8a
 8000434:	9311      	str	r3, [sp, #68]	; 0x44
 8000436:	4668      	mov	r0, sp
 8000438:	f104 0310 	add.w	r3, r4, #16
 800043c:	2244      	movs	r2, #68	; 0x44
 800043e:	4619      	mov	r1, r3
 8000440:	f00b f8c0 	bl	800b5c4 <memcpy>
 8000444:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000448:	f7ff ff46 	bl	80002d8 <writeVCNLByte>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // HALF DMA PB_12
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000452:	4834      	ldr	r0, [pc, #208]	; (8000524 <main+0x194>)
 8000454:	f005 fa4c 	bl	80058f0 <HAL_GPIO_WritePin>
		temp = readVCNLByte(hi2c1, 0x80);
 8000458:	4c31      	ldr	r4, [pc, #196]	; (8000520 <main+0x190>)
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	9311      	str	r3, [sp, #68]	; 0x44
 800045e:	4668      	mov	r0, sp
 8000460:	f104 0310 	add.w	r3, r4, #16
 8000464:	2244      	movs	r2, #68	; 0x44
 8000466:	4619      	mov	r1, r3
 8000468:	f00b f8ac 	bl	800b5c4 <memcpy>
 800046c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000470:	f7ff ff58 	bl	8000324 <readVCNLByte>
 8000474:	4603      	mov	r3, r0
 8000476:	71fb      	strb	r3, [r7, #7]
		writeVCNLByte(hi2c1, 0x80, temp | 0x08); // command the sensor to perform a proximity measure
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	b2db      	uxtb	r3, r3
 8000480:	4c27      	ldr	r4, [pc, #156]	; (8000520 <main+0x190>)
 8000482:	9312      	str	r3, [sp, #72]	; 0x48
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	9311      	str	r3, [sp, #68]	; 0x44
 8000488:	4668      	mov	r0, sp
 800048a:	f104 0310 	add.w	r3, r4, #16
 800048e:	2244      	movs	r2, #68	; 0x44
 8000490:	4619      	mov	r1, r3
 8000492:	f00b f897 	bl	800b5c4 <memcpy>
 8000496:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800049a:	f7ff ff1d 	bl	80002d8 <writeVCNLByte>
		value = readVCNLByte(hi2c1, 0x87) << 8;
 800049e:	4c20      	ldr	r4, [pc, #128]	; (8000520 <main+0x190>)
 80004a0:	2387      	movs	r3, #135	; 0x87
 80004a2:	9311      	str	r3, [sp, #68]	; 0x44
 80004a4:	4668      	mov	r0, sp
 80004a6:	f104 0310 	add.w	r3, r4, #16
 80004aa:	2244      	movs	r2, #68	; 0x44
 80004ac:	4619      	mov	r1, r3
 80004ae:	f00b f889 	bl	800b5c4 <memcpy>
 80004b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004b6:	f7ff ff35 	bl	8000324 <readVCNLByte>
 80004ba:	4603      	mov	r3, r0
 80004bc:	b29b      	uxth	r3, r3
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <main+0x198>)
 80004c4:	801a      	strh	r2, [r3, #0]
		value |= readVCNLByte(hi2c1, 0x88);
 80004c6:	4c16      	ldr	r4, [pc, #88]	; (8000520 <main+0x190>)
 80004c8:	2388      	movs	r3, #136	; 0x88
 80004ca:	9311      	str	r3, [sp, #68]	; 0x44
 80004cc:	4668      	mov	r0, sp
 80004ce:	f104 0310 	add.w	r3, r4, #16
 80004d2:	2244      	movs	r2, #68	; 0x44
 80004d4:	4619      	mov	r1, r3
 80004d6:	f00b f875 	bl	800b5c4 <memcpy>
 80004da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004de:	f7ff ff21 	bl	8000324 <readVCNLByte>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <main+0x198>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <main+0x198>)
 80004f0:	801a      	strh	r2, [r3, #0]
		piston1 = value;
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <main+0x198>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <main+0x19c>)
 80004fa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // HALF DMA PB_12
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <main+0x194>)
 8000504:	f005 f9f4 	bl	80058f0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000508:	2001      	movs	r0, #1
 800050a:	f000 fe69 	bl	80011e0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // HALF DMA PB_12
 800050e:	e79d      	b.n	800044c <main+0xbc>
 8000510:	24000000 	.word	0x24000000
 8000514:	240001b0 	.word	0x240001b0
 8000518:	24000030 	.word	0x24000030
 800051c:	24000160 	.word	0x24000160
 8000520:	2400010c 	.word	0x2400010c
 8000524:	58020400 	.word	0x58020400
 8000528:	24000348 	.word	0x24000348
 800052c:	24000344 	.word	0x24000344

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b09e      	sub	sp, #120	; 0x78
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800053a:	224c      	movs	r2, #76	; 0x4c
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f00b f814 	bl	800b56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2220      	movs	r2, #32
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f00b f80d 	bl	800b56c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000552:	2002      	movs	r0, #2
 8000554:	f006 fe0e 	bl	8007174 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b48      	ldr	r3, [pc, #288]	; (8000680 <SystemClock_Config+0x150>)
 800055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000560:	4a47      	ldr	r2, [pc, #284]	; (8000680 <SystemClock_Config+0x150>)
 8000562:	f023 0301 	bic.w	r3, r3, #1
 8000566:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000568:	4b45      	ldr	r3, [pc, #276]	; (8000680 <SystemClock_Config+0x150>)
 800056a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	4b44      	ldr	r3, [pc, #272]	; (8000684 <SystemClock_Config+0x154>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a43      	ldr	r2, [pc, #268]	; (8000684 <SystemClock_Config+0x154>)
 8000578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b41      	ldr	r3, [pc, #260]	; (8000684 <SystemClock_Config+0x154>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800058a:	bf00      	nop
 800058c:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <SystemClock_Config+0x154>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000598:	d1f8      	bne.n	800058c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <SystemClock_Config+0x158>)
 800059c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005a0:	4a39      	ldr	r2, [pc, #228]	; (8000688 <SystemClock_Config+0x158>)
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005aa:	4b37      	ldr	r3, [pc, #220]	; (8000688 <SystemClock_Config+0x158>)
 80005ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <SystemClock_Config+0x154>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a30      	ldr	r2, [pc, #192]	; (8000684 <SystemClock_Config+0x154>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <SystemClock_Config+0x154>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <SystemClock_Config+0x150>)
 80005d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d6:	4a2a      	ldr	r2, [pc, #168]	; (8000680 <SystemClock_Config+0x150>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0x150>)
 80005e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005ea:	bf00      	nop
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0x154>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005f8:	d1f8      	bne.n	80005ec <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fa:	2301      	movs	r3, #1
 80005fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000608:	2302      	movs	r3, #2
 800060a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000610:	2378      	movs	r3, #120	; 0x78
 8000612:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000620:	230c      	movs	r3, #12
 8000622:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000624:	2300      	movs	r3, #0
 8000626:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000630:	4618      	mov	r0, r3
 8000632:	f006 fdd9 	bl	80071e8 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800063c:	f000 fa9e 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	233f      	movs	r3, #63	; 0x3f
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2303      	movs	r3, #3
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800064c:	2308      	movs	r3, #8
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000650:	2340      	movs	r3, #64	; 0x40
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000654:	2340      	movs	r3, #64	; 0x40
 8000656:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800065e:	2340      	movs	r3, #64	; 0x40
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2104      	movs	r1, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f007 fa17 	bl	8007a9c <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000674:	f000 fa82 	bl	8000b7c <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3778      	adds	r7, #120	; 0x78
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	58000400 	.word	0x58000400
 8000684:	58024800 	.word	0x58024800
 8000688:	58024400 	.word	0x58024400

0800068c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]
 80006ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006b2:	4a3a      	ldr	r2, [pc, #232]	; (800079c <MX_ADC1_Init+0x110>)
 80006b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b6:	4b38      	ldr	r3, [pc, #224]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ce:	4b32      	ldr	r3, [pc, #200]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006dc:	2202      	movs	r2, #2
 80006de:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 2;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006ee:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006fe:	2203      	movs	r2, #3
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_ADC1_Init+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_ADC1_Init+0x10c>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_ADC1_Init+0x10c>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	4820      	ldr	r0, [pc, #128]	; (8000798 <MX_ADC1_Init+0x10c>)
 8000718:	f000 ff9a 	bl	8001650 <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000722:	f000 fa2b 	bl	8000b7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4819      	ldr	r0, [pc, #100]	; (8000798 <MX_ADC1_Init+0x10c>)
 8000732:	f002 fa13 	bl	8002b5c <HAL_ADCEx_MultiModeConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800073c:	f000 fa1e 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ADC1_Init+0x114>)
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2306      	movs	r3, #6
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000748:	2303      	movs	r3, #3
 800074a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000750:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_ADC1_Init+0x10c>)
 8000764:	f001 fc28 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800076e:	f000 fa05 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_ADC1_Init+0x118>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000776:	230c      	movs	r3, #12
 8000778:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_ADC1_Init+0x10c>)
 8000780:	f001 fc1a 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800078a:	f000 f9f7 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	24000030 	.word	0x24000030
 800079c:	40022000 	.word	0x40022000
 80007a0:	08600004 	.word	0x08600004
 80007a4:	0c900008 	.word	0x0c900008

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_I2C1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_I2C1_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <MX_I2C1_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_I2C1_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <MX_I2C1_Init+0x74>)
 80007e4:	f005 f8b8 	bl	8005958 <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 f9c5 	bl	8000b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C1_Init+0x74>)
 80007f6:	f006 fc25 	bl	8007044 <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 f9bc 	bl	8000b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2C1_Init+0x74>)
 8000808:	f006 fc67 	bl	80070da <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f9b3 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2400010c 	.word	0x2400010c
 8000820:	40005400 	.word	0x40005400
 8000824:	307075b1 	.word	0x307075b1

08000828 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_TIM4_Init+0x94>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <MX_TIM4_Init+0x98>)
 800084a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_TIM4_Init+0x94>)
 800084e:	22ef      	movs	r2, #239	; 0xef
 8000850:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_TIM4_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_TIM4_Init+0x94>)
 800085a:	2263      	movs	r2, #99	; 0x63
 800085c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_TIM4_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_TIM4_Init+0x94>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800086a:	4814      	ldr	r0, [pc, #80]	; (80008bc <MX_TIM4_Init+0x94>)
 800086c:	f00a f98a 	bl	800ab84 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f981 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM4_Init+0x94>)
 8000888:	f00a fb6c 	bl	800af64 <HAL_TIM_ConfigClockSource>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 f973 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000896:	2320      	movs	r3, #32
 8000898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <MX_TIM4_Init+0x94>)
 80008a4:	f00a fdb6 	bl	800b414 <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80008ae:	f000 f965 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3720      	adds	r7, #32
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	24000160 	.word	0x24000160
 80008c0:	40000800 	.word	0x40000800

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MX_DMA_Init+0x3c>)
 80008cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <MX_DMA_Init+0x3c>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_DMA_Init+0x3c>)
 80008dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	200b      	movs	r0, #11
 80008ee:	f002 faee 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008f2:	200b      	movs	r0, #11
 80008f4:	f002 fb05 	bl	8002f02 <HAL_NVIC_EnableIRQ>

}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024400 	.word	0x58024400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a70      	ldr	r2, [pc, #448]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b6e      	ldr	r3, [pc, #440]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	623b      	str	r3, [r7, #32]
 8000936:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000938:	4b6a      	ldr	r3, [pc, #424]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4a69      	ldr	r2, [pc, #420]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4b66      	ldr	r3, [pc, #408]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b63      	ldr	r3, [pc, #396]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4a61      	ldr	r2, [pc, #388]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4b5f      	ldr	r3, [pc, #380]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b5b      	ldr	r3, [pc, #364]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	4a5a      	ldr	r2, [pc, #360]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000984:	4b57      	ldr	r3, [pc, #348]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000992:	4b54      	ldr	r3, [pc, #336]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a52      	ldr	r2, [pc, #328]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800099a:	f043 0320 	orr.w	r3, r3, #32
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0320 	and.w	r3, r3, #32
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b0:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ce:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a43      	ldr	r2, [pc, #268]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ec:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a3c      	ldr	r2, [pc, #240]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_12|LD3_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f24d 0101 	movw	r1, #53249	; 0xd001
 8000a10:	4835      	ldr	r0, [pc, #212]	; (8000ae8 <MX_GPIO_Init+0x1e4>)
 8000a12:	f004 ff6d 	bl	80058f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	4833      	ldr	r0, [pc, #204]	; (8000aec <MX_GPIO_Init+0x1e8>)
 8000a1e:	f004 ff67 	bl	80058f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2102      	movs	r1, #2
 8000a26:	4832      	ldr	r0, [pc, #200]	; (8000af0 <MX_GPIO_Init+0x1ec>)
 8000a28:	f004 ff62 	bl	80058f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	482c      	ldr	r0, [pc, #176]	; (8000af4 <MX_GPIO_Init+0x1f0>)
 8000a42:	f004 fda5 	bl	8005590 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB12 LD3_Pin PB15 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_12|LD3_Pin|GPIO_PIN_15;
 8000a46:	f24d 0301 	movw	r3, #53249	; 0xd001
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_GPIO_Init+0x1e4>)
 8000a60:	f004 fd96 	bl	8005590 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a76:	2307      	movs	r3, #7
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481a      	ldr	r0, [pc, #104]	; (8000aec <MX_GPIO_Init+0x1e8>)
 8000a82:	f004 fd85 	bl	8005590 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4813      	ldr	r0, [pc, #76]	; (8000aec <MX_GPIO_Init+0x1e8>)
 8000aa0:	f004 fd76 	bl	8005590 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480f      	ldr	r0, [pc, #60]	; (8000af8 <MX_GPIO_Init+0x1f4>)
 8000aba:	f004 fd69 	bl	8005590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x1ec>)
 8000ad6:	f004 fd5b 	bl	8005590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ada:	bf00      	nop
 8000adc:	3738      	adds	r7, #56	; 0x38
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	58020400 	.word	0x58020400
 8000aec:	58020c00 	.word	0x58020c00
 8000af0:	58021000 	.word	0x58021000
 8000af4:	58020800 	.word	0x58020800
 8000af8:	58021800 	.word	0x58021800

08000afc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	// Vérifie si l'interruption provient de TIMER 4
	if (htim == &htim4) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d104      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // Bascule l'état du GPIO PB_14 sur LD_3
 8000b0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b12:	f004 ff06 	bl	8005922 <HAL_GPIO_TogglePin>
	}
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	24000160 	.word	0x24000160
 8000b24:	58020400 	.word	0x58020400

08000b28 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12); // HALF DMA PB_12
	}
	adc_conv_complete_flag = 0;
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	24000340 	.word	0x24000340

08000b48 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_ADC_ConvCpltCallback+0x28>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d104      	bne.n	8000b62 <HAL_ADC_ConvCpltCallback+0x1a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); // FULL DMA PB_15
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b5e:	f004 fee0 	bl	8005922 <HAL_GPIO_TogglePin>
	}
	adc_conv_complete_flag = 1;
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_ADC_ConvCpltCallback+0x30>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24000030 	.word	0x24000030
 8000b74:	58020400 	.word	0x58020400
 8000b78:	24000340 	.word	0x24000340

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x30>)
 8000b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x30>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x30>)
 8000ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	58024400 	.word	0x58024400

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0bc      	sub	sp, #240	; 0xf0
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	22c0      	movs	r2, #192	; 0xc0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00a fcc5 	bl	800b56c <memset>
  if(hadc->Instance==ADC1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <HAL_ADC_MspInit+0x18c>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	f040 80a8 	bne.w	8000d3e <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000bfe:	2312      	movs	r3, #18
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c12:	2320      	movs	r3, #32
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000c16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 0318 	add.w	r3, r7, #24
 8000c26:	4618      	mov	r0, r3
 8000c28:	f007 faae 	bl	8008188 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000c32:	f7ff ffa3 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c3e:	f043 0320 	orr.w	r3, r3, #32
 8000c42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c46:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a34      	ldr	r2, [pc, #208]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <HAL_ADC_MspInit+0x190>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0320 	and.w	r3, r3, #32
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c90:	2340      	movs	r3, #64	; 0x40
 8000c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c96:	2303      	movs	r3, #3
 8000c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4829      	ldr	r0, [pc, #164]	; (8000d50 <HAL_ADC_MspInit+0x194>)
 8000caa:	f004 fc71 	bl	8005590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4822      	ldr	r0, [pc, #136]	; (8000d54 <HAL_ADC_MspInit+0x198>)
 8000cca:	f004 fc61 	bl	8005590 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000cd0:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <HAL_ADC_MspInit+0x1a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000cd6:	2209      	movs	r2, #9
 8000cd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000d14:	f002 f910 	bl	8002f38 <HAL_DMA_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 8000d1e:	f7ff ff2d 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000d26:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d28:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_ADC_MspInit+0x19c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2012      	movs	r0, #18
 8000d34:	f002 f8cb 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d38:	2012      	movs	r0, #18
 8000d3a:	f002 f8e2 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	37f0      	adds	r7, #240	; 0xf0
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40022000 	.word	0x40022000
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020000 	.word	0x58020000
 8000d54:	58021400 	.word	0x58021400
 8000d58:	24000094 	.word	0x24000094
 8000d5c:	40020010 	.word	0x40020010

08000d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0ba      	sub	sp, #232	; 0xe8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	22c0      	movs	r2, #192	; 0xc0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00a fbf3 	bl	800b56c <memset>
  if(hi2c->Instance==I2C1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a2e      	ldr	r2, [pc, #184]	; (8000e44 <HAL_I2C_MspInit+0xe4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d155      	bne.n	8000e3c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d90:	f04f 0208 	mov.w	r2, #8
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f007 f9ee 	bl	8008188 <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000db2:	f7ff fee3 	bl	8000b7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_I2C_MspInit+0xe8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <HAL_I2C_MspInit+0xe8>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <HAL_I2C_MspInit+0xe8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd4:	23c0      	movs	r3, #192	; 0xc0
 8000dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dec:	2304      	movs	r3, #4
 8000dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4814      	ldr	r0, [pc, #80]	; (8000e4c <HAL_I2C_MspInit+0xec>)
 8000dfa:	f004 fbc9 	bl	8005590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_I2C_MspInit+0xe8>)
 8000e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e04:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_I2C_MspInit+0xe8>)
 8000e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_I2C_MspInit+0xe8>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	201f      	movs	r0, #31
 8000e22:	f002 f854 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e26:	201f      	movs	r0, #31
 8000e28:	f002 f86b 	bl	8002f02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2020      	movs	r0, #32
 8000e32:	f002 f84c 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e36:	2020      	movs	r0, #32
 8000e38:	f002 f863 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	37e8      	adds	r7, #232	; 0xe8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40005400 	.word	0x40005400
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58020400 	.word	0x58020400

08000e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_TIM_Base_MspInit+0x48>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d116      	bne.n	8000e90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_TIM_Base_MspInit+0x4c>)
 8000e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_TIM_Base_MspInit+0x4c>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_TIM_Base_MspInit+0x4c>)
 8000e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	201e      	movs	r0, #30
 8000e86:	f002 f822 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e8a:	201e      	movs	r0, #30
 8000e8c:	f002 f839 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40000800 	.word	0x40000800
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f958 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <DMA1_Stream0_IRQHandler+0x10>)
 8000efa:	f003 f829 	bl	8003f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24000094 	.word	0x24000094

08000f08 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <ADC_IRQHandler+0x10>)
 8000f0e:	f000 fe05 	bl	8001b1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	24000030 	.word	0x24000030

08000f1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM4_IRQHandler+0x10>)
 8000f22:	f009 feff 	bl	800ad24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	24000160 	.word	0x24000160

08000f30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <I2C1_EV_IRQHandler+0x10>)
 8000f36:	f004 ff89 	bl	8005e4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2400010c 	.word	0x2400010c

08000f44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <I2C1_ER_IRQHandler+0x10>)
 8000f4a:	f004 ff99 	bl	8005e80 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2400010c 	.word	0x2400010c

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <SystemInit+0xe4>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a36      	ldr	r2, [pc, #216]	; (800103c <SystemInit+0xe4>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6c:	4b34      	ldr	r3, [pc, #208]	; (8001040 <SystemInit+0xe8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d807      	bhi.n	8000f88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f78:	4b31      	ldr	r3, [pc, #196]	; (8001040 <SystemInit+0xe8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 030f 	bic.w	r3, r3, #15
 8000f80:	4a2f      	ldr	r2, [pc, #188]	; (8001040 <SystemInit+0xe8>)
 8000f82:	f043 0307 	orr.w	r3, r3, #7
 8000f86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f88:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <SystemInit+0xec>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2d      	ldr	r2, [pc, #180]	; (8001044 <SystemInit+0xec>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <SystemInit+0xec>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <SystemInit+0xec>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4929      	ldr	r1, [pc, #164]	; (8001044 <SystemInit+0xec>)
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <SystemInit+0xf0>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <SystemInit+0xe8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <SystemInit+0xe8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 030f 	bic.w	r3, r3, #15
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <SystemInit+0xe8>)
 8000fbc:	f043 0307 	orr.w	r3, r3, #7
 8000fc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <SystemInit+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <SystemInit+0xec>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <SystemInit+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <SystemInit+0xec>)
 8000fd6:	4a1d      	ldr	r2, [pc, #116]	; (800104c <SystemInit+0xf4>)
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <SystemInit+0xec>)
 8000fdc:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <SystemInit+0xf8>)
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <SystemInit+0xec>)
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <SystemInit+0xfc>)
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <SystemInit+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <SystemInit+0xec>)
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <SystemInit+0xfc>)
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <SystemInit+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <SystemInit+0xec>)
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <SystemInit+0xfc>)
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <SystemInit+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <SystemInit+0xec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <SystemInit+0xec>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <SystemInit+0xec>)
 8001012:	2200      	movs	r2, #0
 8001014:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <SystemInit+0x100>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <SystemInit+0x104>)
 800101c:	4013      	ands	r3, r2
 800101e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001022:	d202      	bcs.n	800102a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <SystemInit+0x108>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <SystemInit+0x10c>)
 800102c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001030:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00
 8001040:	52002000 	.word	0x52002000
 8001044:	58024400 	.word	0x58024400
 8001048:	eaf6ed7f 	.word	0xeaf6ed7f
 800104c:	02020200 	.word	0x02020200
 8001050:	01ff0000 	.word	0x01ff0000
 8001054:	01010280 	.word	0x01010280
 8001058:	5c001000 	.word	0x5c001000
 800105c:	ffff0000 	.word	0xffff0000
 8001060:	51008108 	.word	0x51008108
 8001064:	52004000 	.word	0x52004000

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack      /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800106c:	f7ff ff74 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	; (80010b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f00a fa71 	bl	800b57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff f979 	bl	8000390 <main>
  bx  lr
 800109e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80010a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010a8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80010ac:	0800b618 	.word	0x0800b618
  ldr r2, =_sbss
 80010b0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80010b4:	24000350 	.word	0x24000350

080010b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC3_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c2:	2003      	movs	r0, #3
 80010c4:	f001 fef8 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010c8:	f006 fe9e 	bl	8007e08 <HAL_RCC_GetSysClockFreq>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_Init+0x68>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	4913      	ldr	r1, [pc, #76]	; (8001128 <HAL_Init+0x6c>)
 80010da:	5ccb      	ldrb	r3, [r1, r3]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_Init+0x68>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_Init+0x6c>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_Init+0x70>)
 80010fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_Init+0x74>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f814 	bl	8001134 <HAL_InitTick>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e002      	b.n	800111c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001116:	f7ff fd37 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	58024400 	.word	0x58024400
 8001128:	0800b5f8 	.word	0x0800b5f8
 800112c:	24000008 	.word	0x24000008
 8001130:	24000004 	.word	0x24000004

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_InitTick+0x60>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e021      	b.n	800118c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_InitTick+0x64>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_InitTick+0x60>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fedd 	bl	8002f1e <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f001 fea7 	bl	8002ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x68>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000010 	.word	0x24000010
 8001198:	24000004 	.word	0x24000004
 800119c:	2400000c 	.word	0x2400000c

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	24000010 	.word	0x24000010
 80011c4:	2400034c 	.word	0x2400034c

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2400034c 	.word	0x2400034c

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24000010 	.word	0x24000010

08001228 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetREVID+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0c1b      	lsrs	r3, r3, #16
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	5c001000 	.word	0x5c001000

08001240 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	609a      	str	r2, [r3, #8]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3360      	adds	r3, #96	; 0x60
 80012ba:	461a      	mov	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012dc:	bf00      	nop
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	431a      	orrs	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	611a      	str	r2, [r3, #16]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800131a:	b480      	push	{r7}
 800131c:	b087      	sub	sp, #28
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3360      	adds	r3, #96	; 0x60
 800132a:	461a      	mov	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	431a      	orrs	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	601a      	str	r2, [r3, #0]
  }
}
 8001344:	bf00      	nop
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001376:	b480      	push	{r7}
 8001378:	b087      	sub	sp, #28
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3330      	adds	r3, #48	; 0x30
 8001386:	461a      	mov	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	211f      	movs	r1, #31
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0e9b      	lsrs	r3, r3, #26
 80013ae:	f003 011f 	and.w	r1, r3, #31
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013c2:	bf00      	nop
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f023 0203 	bic.w	r2, r3, #3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	60da      	str	r2, [r3, #12]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800141a:	b480      	push	{r7}
 800141c:	b087      	sub	sp, #28
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3314      	adds	r3, #20
 800142a:	461a      	mov	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	0e5b      	lsrs	r3, r3, #25
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	0d1b      	lsrs	r3, r3, #20
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	2107      	movs	r1, #7
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	401a      	ands	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	0d1b      	lsrs	r3, r3, #20
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	431a      	orrs	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001464:	bf00      	nop
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0318 	and.w	r3, r3, #24
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001494:	40d9      	lsrs	r1, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	400b      	ands	r3, r1
 800149a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800149e:	431a      	orrs	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	000fffff 	.word	0x000fffff

080014b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 031f 	and.w	r3, r3, #31
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014fe:	4013      	ands	r3, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6093      	str	r3, [r2, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	5fffffc0 	.word	0x5fffffc0

08001514 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001528:	d101      	bne.n	800152e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_ADC_EnableInternalRegulator+0x24>)
 800154a:	4013      	ands	r3, r2
 800154c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	6fffffc0 	.word	0x6fffffc0

08001564 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001578:	d101      	bne.n	800157e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <LL_ADC_Enable+0x24>)
 800159a:	4013      	ands	r3, r2
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	7fffffc0 	.word	0x7fffffc0

080015b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <LL_ADC_IsEnabled+0x18>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <LL_ADC_IsEnabled+0x1a>
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <LL_ADC_REG_StartConversion+0x24>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	f043 0204 	orr.w	r2, r3, #4
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	7fffffc0 	.word	0x7fffffc0

08001604 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b04      	cmp	r3, #4
 8001616:	d101      	bne.n	800161c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b08      	cmp	r3, #8
 800163c:	d101      	bne.n	8001642 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e18f      	b.n	800198a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	2b00      	cmp	r3, #0
 8001676:	d109      	bne.n	800168c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fa9f 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff3f 	bl	8001514 <LL_ADC_IsDeepPowerDownEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff25 	bl	80014f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff5a 	bl	8001564 <LL_ADC_IsInternalRegulatorEnabled>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d114      	bne.n	80016e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff3e 	bl	800153c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016c0:	4b87      	ldr	r3, [pc, #540]	; (80018e0 <HAL_ADC_Init+0x290>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <HAL_ADC_Init+0x294>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	099b      	lsrs	r3, r3, #6
 80016ce:	3301      	adds	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016d2:	e002      	b.n	80016da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f9      	bne.n	80016d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff3d 	bl	8001564 <LL_ADC_IsInternalRegulatorEnabled>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10d      	bne.n	800170c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f4:	f043 0210 	orr.w	r2, r3, #16
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f043 0201 	orr.w	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff77 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8001716:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	f040 8129 	bne.w	8001978 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b00      	cmp	r3, #0
 800172a:	f040 8125 	bne.w	8001978 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001736:	f043 0202 	orr.w	r2, r3, #2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff36 	bl	80015b4 <LL_ADC_IsEnabled>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d136      	bne.n	80017bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_ADC_Init+0x298>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d004      	beq.n	8001762 <HAL_ADC_Init+0x112>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a63      	ldr	r2, [pc, #396]	; (80018ec <HAL_ADC_Init+0x29c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10e      	bne.n	8001780 <HAL_ADC_Init+0x130>
 8001762:	4861      	ldr	r0, [pc, #388]	; (80018e8 <HAL_ADC_Init+0x298>)
 8001764:	f7ff ff26 	bl	80015b4 <LL_ADC_IsEnabled>
 8001768:	4604      	mov	r4, r0
 800176a:	4860      	ldr	r0, [pc, #384]	; (80018ec <HAL_ADC_Init+0x29c>)
 800176c:	f7ff ff22 	bl	80015b4 <LL_ADC_IsEnabled>
 8001770:	4603      	mov	r3, r0
 8001772:	4323      	orrs	r3, r4
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e008      	b.n	8001792 <HAL_ADC_Init+0x142>
 8001780:	485b      	ldr	r0, [pc, #364]	; (80018f0 <HAL_ADC_Init+0x2a0>)
 8001782:	f7ff ff17 	bl	80015b4 <LL_ADC_IsEnabled>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d012      	beq.n	80017bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a53      	ldr	r2, [pc, #332]	; (80018e8 <HAL_ADC_Init+0x298>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d004      	beq.n	80017aa <HAL_ADC_Init+0x15a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a51      	ldr	r2, [pc, #324]	; (80018ec <HAL_ADC_Init+0x29c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Init+0x15e>
 80017aa:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_ADC_Init+0x2a4>)
 80017ac:	e000      	b.n	80017b0 <HAL_ADC_Init+0x160>
 80017ae:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_ADC_Init+0x2a8>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff fd42 	bl	8001240 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80017bc:	f7ff fd34 	bl	8001228 <HAL_GetREVID>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d914      	bls.n	80017f4 <HAL_ADC_Init+0x1a4>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d110      	bne.n	80017f4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7d5b      	ldrb	r3, [r3, #21]
 80017d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7f1b      	ldrb	r3, [r3, #28]
 80017e8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017ea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017ec:	f043 030c 	orr.w	r3, r3, #12
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	e00d      	b.n	8001810 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7d5b      	ldrb	r3, [r3, #21]
 80017f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001804:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7f1b      	ldrb	r3, [r3, #28]
 800180a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7f1b      	ldrb	r3, [r3, #28]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d106      	bne.n	8001826 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	3b01      	subs	r3, #1
 800181e:	045b      	lsls	r3, r3, #17
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <HAL_ADC_Init+0x2ac>)
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	69b9      	ldr	r1, [r7, #24]
 8001852:	430b      	orrs	r3, r1
 8001854:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fed2 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8001860:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fedf 	bl	800162a <LL_ADC_INJ_IsConversionOngoing>
 800186c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d15f      	bne.n	8001934 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d15c      	bne.n	8001934 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7d1b      	ldrb	r3, [r3, #20]
 800187e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_ADC_Init+0x2b0>)
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	430b      	orrs	r3, r1
 800189a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d130      	bne.n	8001908 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_ADC_Init+0x2b4>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018ba:	3a01      	subs	r2, #1
 80018bc:	0411      	lsls	r1, r2, #16
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ce:	430a      	orrs	r2, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	e01c      	b.n	8001918 <HAL_ADC_Init+0x2c8>
 80018de:	bf00      	nop
 80018e0:	24000004 	.word	0x24000004
 80018e4:	053e2d63 	.word	0x053e2d63
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40022100 	.word	0x40022100
 80018f0:	58026000 	.word	0x58026000
 80018f4:	40022300 	.word	0x40022300
 80018f8:	58026300 	.word	0x58026300
 80018fc:	fff0c003 	.word	0xfff0c003
 8001900:	ffffbffc 	.word	0xffffbffc
 8001904:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 ffb0 	bl	8002894 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10c      	bne.n	8001956 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f023 010f 	bic.w	r1, r3, #15
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
 8001954:	e007      	b.n	8001966 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 020f 	bic.w	r2, r2, #15
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
 8001976:	e007      	b.n	8001988 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f043 0210 	orr.w	r2, r3, #16
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001988:	7ffb      	ldrb	r3, [r7, #31]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	bf00      	nop

08001994 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a55      	ldr	r2, [pc, #340]	; (8001afc <HAL_ADC_Start_DMA+0x168>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d004      	beq.n	80019b4 <HAL_ADC_Start_DMA+0x20>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <HAL_ADC_Start_DMA+0x16c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x24>
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_ADC_Start_DMA+0x170>)
 80019b6:	e000      	b.n	80019ba <HAL_ADC_Start_DMA+0x26>
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_ADC_Start_DMA+0x174>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fd7c 	bl	80014b8 <LL_ADC_GetMultimode>
 80019c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fe1c 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 808c 	bne.w	8001aec <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Start_DMA+0x4e>
 80019de:	2302      	movs	r3, #2
 80019e0:	e087      	b.n	8001af2 <HAL_ADC_Start_DMA+0x15e>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d002      	beq.n	80019fc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b09      	cmp	r3, #9
 80019fa:	d170      	bne.n	8001ade <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fe2b 	bl	8002658 <ADC_Enable>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d163      	bne.n	8001ad4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a10:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <HAL_ADC_Start_DMA+0x178>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <HAL_ADC_Start_DMA+0x16c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d002      	beq.n	8001a2c <HAL_ADC_Start_DMA+0x98>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_Start_DMA+0x9a>
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_ADC_Start_DMA+0x168>)
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d002      	beq.n	8001a3c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f023 0206 	bic.w	r2, r3, #6
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <HAL_ADC_Start_DMA+0x17c>)
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_ADC_Start_DMA+0x180>)
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	4a26      	ldr	r2, [pc, #152]	; (8001b18 <HAL_ADC_Start_DMA+0x184>)
 8001a7e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	221c      	movs	r2, #28
 8001a86:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0210 	orr.w	r2, r2, #16
 8001a9e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f7ff fc8f 	bl	80013ce <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3340      	adds	r3, #64	; 0x40
 8001aba:	4619      	mov	r1, r3
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f001 fd96 	bl	80035f0 <HAL_DMA_Start_IT>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd85 	bl	80015dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ad2:	e00d      	b.n	8001af0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001adc:	e008      	b.n	8001af0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001aea:	e001      	b.n	8001af0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
 8001aee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40022100 	.word	0x40022100
 8001b04:	40022300 	.word	0x40022300
 8001b08:	58026300 	.word	0x58026300
 8001b0c:	fffff0fe 	.word	0xfffff0fe
 8001b10:	0800276d 	.word	0x0800276d
 8001b14:	08002845 	.word	0x08002845
 8001b18:	08002861 	.word	0x08002861

08001b1c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a87      	ldr	r2, [pc, #540]	; (8001d5c <HAL_ADC_IRQHandler+0x240>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x30>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a86      	ldr	r2, [pc, #536]	; (8001d60 <HAL_ADC_IRQHandler+0x244>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_IRQHandler+0x34>
 8001b4c:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <HAL_ADC_IRQHandler+0x248>)
 8001b4e:	e000      	b.n	8001b52 <HAL_ADC_IRQHandler+0x36>
 8001b50:	4b85      	ldr	r3, [pc, #532]	; (8001d68 <HAL_ADC_IRQHandler+0x24c>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fcb0 	bl	80014b8 <LL_ADC_GetMultimode>
 8001b58:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d017      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x78>
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d012      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 ffde 	bl	8002b48 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2202      	movs	r2, #2
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x8c>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8083 	beq.w	8001cba <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d07d      	beq.n	8001cba <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d105      	bne.n	8001bd6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fbb8 	bl	8001350 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d062      	beq.n	8001cac <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5d      	ldr	r2, [pc, #372]	; (8001d60 <HAL_ADC_IRQHandler+0x244>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d002      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0xda>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	e000      	b.n	8001bf8 <HAL_ADC_IRQHandler+0xdc>
 8001bf6:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <HAL_ADC_IRQHandler+0x240>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d008      	beq.n	8001c12 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d002      	beq.n	8001c12 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b09      	cmp	r3, #9
 8001c10:	d104      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	623b      	str	r3, [r7, #32]
 8001c1a:	e00c      	b.n	8001c36 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a4f      	ldr	r2, [pc, #316]	; (8001d60 <HAL_ADC_IRQHandler+0x244>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d002      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x110>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e000      	b.n	8001c2e <HAL_ADC_IRQHandler+0x112>
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <HAL_ADC_IRQHandler+0x240>)
 8001c2e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d135      	bne.n	8001cac <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d12e      	bne.n	8001cac <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fcd6 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11a      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 020c 	bic.w	r2, r2, #12
 8001c6c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d112      	bne.n	8001cac <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
 8001c92:	e00b      	b.n	8001cac <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0210 	orr.w	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7fe ff4b 	bl	8000b48 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_ADC_IRQHandler+0x1b2>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a0 	beq.w	8001e1a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 809a 	beq.w	8001e1a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fb76 	bl	80013f4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d08:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fb1e 	bl	8001350 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d14:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_ADC_IRQHandler+0x244>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d002      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x20a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e000      	b.n	8001d28 <HAL_ADC_IRQHandler+0x20c>
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_ADC_IRQHandler+0x240>)
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d008      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b06      	cmp	r3, #6
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b07      	cmp	r3, #7
 8001d40:	d104      	bne.n	8001d4c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	623b      	str	r3, [r7, #32]
 8001d4a:	e014      	b.n	8001d76 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_ADC_IRQHandler+0x244>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00a      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x250>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e008      	b.n	8001d6e <HAL_ADC_IRQHandler+0x252>
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40022100 	.word	0x40022100
 8001d64:	40022300 	.word	0x40022300
 8001d68:	58026300 	.word	0x58026300
 8001d6c:	4b84      	ldr	r3, [pc, #528]	; (8001f80 <HAL_ADC_IRQHandler+0x464>)
 8001d6e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d047      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x27a>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d03f      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d13a      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d133      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d12e      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fc39 	bl	800162a <LL_ADC_INJ_IsConversionOngoing>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11a      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dcc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d112      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
 8001df2:	e00b      	b.n	8001e0c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fe73 	bl	8002af8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2260      	movs	r2, #96	; 0x60
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d011      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x32c>
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8a8 	bl	8001f90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x35c>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fe59 	bl	8002b20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d012      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x38c>
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fe4b 	bl	8002b34 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d043      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x41e>
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03e      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	e021      	b.n	8001f0e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <HAL_ADC_IRQHandler+0x464>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x3c8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <HAL_ADC_IRQHandler+0x468>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x3cc>
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_ADC_IRQHandler+0x46c>)
 8001ee6:	e000      	b.n	8001eea <HAL_ADC_IRQHandler+0x3ce>
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_ADC_IRQHandler+0x470>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff faf2 	bl	80014d4 <LL_ADC_GetMultiDMATransfer>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	e008      	b.n	8001f0e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10e      	bne.n	8001f32 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f839 	bl	8001fa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2210      	movs	r2, #16
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d018      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x45a>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d013      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	f043 0208 	orr.w	r2, r3, #8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fdcb 	bl	8002b0c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40022000 	.word	0x40022000
 8001f84:	40022100 	.word	0x40022100
 8001f88:	40022300 	.word	0x40022300
 8001f8c:	58026300 	.word	0x58026300

08001f90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b0a1      	sub	sp, #132	; 0x84
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a9d      	ldr	r2, [pc, #628]	; (8002248 <HAL_ADC_ConfigChannel+0x290>)
 8001fd2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x2a>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e321      	b.n	8002626 <HAL_ADC_ConfigChannel+0x66e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fb08 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 8306 	bne.w	8002608 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002004:	2b00      	cmp	r3, #0
 8002006:	d108      	bne.n	800201a <HAL_ADC_ConfigChannel+0x62>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2201      	movs	r2, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	e016      	b.n	8002048 <HAL_ADC_ConfigChannel+0x90>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800202a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800202c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e003      	b.n	800203e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	2201      	movs	r2, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	69d1      	ldr	r1, [r2, #28]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	430b      	orrs	r3, r1
 8002054:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	f7ff f987 	bl	8001376 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fac9 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8002072:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fad6 	bl	800162a <LL_ADC_INJ_IsConversionOngoing>
 800207e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80b3 	bne.w	80021ee <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80af 	bne.w	80021ee <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	461a      	mov	r2, r3
 800209e:	f7ff f9bc 	bl	800141a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020a2:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_ADC_ConfigChannel+0x294>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80020aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020ae:	d10b      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x110>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	e01d      	b.n	8002104 <HAL_ADC_ConfigChannel+0x14c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10b      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x136>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	e00a      	b.n	8002104 <HAL_ADC_ConfigChannel+0x14c>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d027      	beq.n	800215e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800211c:	f7ff f8c4 	bl	80012a8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	7e5b      	ldrb	r3, [r3, #25]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d102      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x17e>
 8002130:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002134:	e000      	b.n	8002138 <HAL_ADC_ConfigChannel+0x180>
 8002136:	2300      	movs	r3, #0
 8002138:	461a      	mov	r2, r3
 800213a:	f7ff f8ee 	bl	800131a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6919      	ldr	r1, [r3, #16]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	7e1b      	ldrb	r3, [r3, #24]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x19c>
 800214e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002152:	e000      	b.n	8002156 <HAL_ADC_ConfigChannel+0x19e>
 8002154:	2300      	movs	r3, #0
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff f8c6 	bl	80012e8 <LL_ADC_SetDataRightShift>
 800215c:	e047      	b.n	80021ee <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	069b      	lsls	r3, r3, #26
 800216e:	429a      	cmp	r2, r3
 8002170:	d107      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002180:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	069b      	lsls	r3, r3, #26
 8002192:	429a      	cmp	r2, r3
 8002194:	d107      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021a4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	069b      	lsls	r3, r3, #26
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d107      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021c8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	069b      	lsls	r3, r3, #26
 80021da:	429a      	cmp	r2, r3
 80021dc:	d107      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f9de 	bl	80015b4 <LL_ADC_IsEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 820d 	bne.w	800261a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	461a      	mov	r2, r3
 800220e:	f7ff f92f 	bl	8001470 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <HAL_ADC_ConfigChannel+0x290>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f040 8133 	bne.w	8002484 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800222a:	2b00      	cmp	r3, #0
 800222c:	d110      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x298>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	3301      	adds	r3, #1
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b09      	cmp	r3, #9
 800223c:	bf94      	ite	ls
 800223e:	2301      	movls	r3, #1
 8002240:	2300      	movhi	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	e01e      	b.n	8002284 <HAL_ADC_ConfigChannel+0x2cc>
 8002246:	bf00      	nop
 8002248:	47ff0000 	.word	0x47ff0000
 800224c:	5c001000 	.word	0x5c001000
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800225e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002260:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e003      	b.n	8002274 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800226c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2b09      	cmp	r3, #9
 800227c:	bf94      	ite	ls
 800227e:	2301      	movls	r3, #1
 8002280:	2300      	movhi	r3, #0
 8002282:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002284:	2b00      	cmp	r3, #0
 8002286:	d079      	beq.n	800237c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x2ec>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	3301      	adds	r3, #1
 800229c:	069b      	lsls	r3, r3, #26
 800229e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a2:	e015      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x318>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80022c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	069b      	lsls	r3, r3, #26
 80022cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x338>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	3301      	adds	r3, #1
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	e017      	b.n	8002320 <HAL_ADC_ConfigChannel+0x368>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002300:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e003      	b.n	8002314 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800230c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	ea42 0103 	orr.w	r1, r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x38e>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	051b      	lsls	r3, r3, #20
 8002344:	e018      	b.n	8002378 <HAL_ADC_ConfigChannel+0x3c0>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e003      	b.n	800236a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002378:	430b      	orrs	r3, r1
 800237a:	e07e      	b.n	800247a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x3e0>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0e9b      	lsrs	r3, r3, #26
 800238e:	3301      	adds	r3, #1
 8002390:	069b      	lsls	r3, r3, #26
 8002392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002396:	e015      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x40c>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	069b      	lsls	r3, r3, #26
 80023c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x42c>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	3301      	adds	r3, #1
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	e017      	b.n	8002414 <HAL_ADC_ConfigChannel+0x45c>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	61bb      	str	r3, [r7, #24]
  return result;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e003      	b.n	8002408 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	ea42 0103 	orr.w	r1, r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x488>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	3301      	adds	r3, #1
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	3b1e      	subs	r3, #30
 8002438:	051b      	lsls	r3, r3, #20
 800243a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243e:	e01b      	b.n	8002478 <HAL_ADC_ConfigChannel+0x4c0>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	60fb      	str	r3, [r7, #12]
  return result;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e003      	b.n	8002464 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f003 021f 	and.w	r2, r3, #31
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	3b1e      	subs	r3, #30
 8002472:	051b      	lsls	r3, r3, #20
 8002474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002478:	430b      	orrs	r3, r1
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	6892      	ldr	r2, [r2, #8]
 800247e:	4619      	mov	r1, r3
 8002480:	f7fe ffcb 	bl	800141a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f280 80c6 	bge.w	800261a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a67      	ldr	r2, [pc, #412]	; (8002630 <HAL_ADC_ConfigChannel+0x678>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x4ea>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <HAL_ADC_ConfigChannel+0x67c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x4ee>
 80024a2:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_ADC_ConfigChannel+0x680>)
 80024a4:	e000      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x4f0>
 80024a6:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_ADC_ConfigChannel+0x684>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe feef 	bl	800128c <LL_ADC_GetCommonPathInternalCh>
 80024ae:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a5e      	ldr	r2, [pc, #376]	; (8002630 <HAL_ADC_ConfigChannel+0x678>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_ADC_ConfigChannel+0x50c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5d      	ldr	r2, [pc, #372]	; (8002634 <HAL_ADC_ConfigChannel+0x67c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10e      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x52a>
 80024c4:	485a      	ldr	r0, [pc, #360]	; (8002630 <HAL_ADC_ConfigChannel+0x678>)
 80024c6:	f7ff f875 	bl	80015b4 <LL_ADC_IsEnabled>
 80024ca:	4604      	mov	r4, r0
 80024cc:	4859      	ldr	r0, [pc, #356]	; (8002634 <HAL_ADC_ConfigChannel+0x67c>)
 80024ce:	f7ff f871 	bl	80015b4 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4323      	orrs	r3, r4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf0c      	ite	eq
 80024da:	2301      	moveq	r3, #1
 80024dc:	2300      	movne	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e008      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x53c>
 80024e2:	4857      	ldr	r0, [pc, #348]	; (8002640 <HAL_ADC_ConfigChannel+0x688>)
 80024e4:	f7ff f866 	bl	80015b4 <LL_ADC_IsEnabled>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07d      	beq.n	80025f4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a51      	ldr	r2, [pc, #324]	; (8002644 <HAL_ADC_ConfigChannel+0x68c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d130      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x5ac>
 8002502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d12b      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a4b      	ldr	r2, [pc, #300]	; (8002640 <HAL_ADC_ConfigChannel+0x688>)
 8002512:	4293      	cmp	r3, r2
 8002514:	f040 8081 	bne.w	800261a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a44      	ldr	r2, [pc, #272]	; (8002630 <HAL_ADC_ConfigChannel+0x678>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_ADC_ConfigChannel+0x574>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a43      	ldr	r2, [pc, #268]	; (8002634 <HAL_ADC_ConfigChannel+0x67c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x578>
 800252c:	4a42      	ldr	r2, [pc, #264]	; (8002638 <HAL_ADC_ConfigChannel+0x680>)
 800252e:	e000      	b.n	8002532 <HAL_ADC_ConfigChannel+0x57a>
 8002530:	4a42      	ldr	r2, [pc, #264]	; (800263c <HAL_ADC_ConfigChannel+0x684>)
 8002532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002534:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f7fe fe93 	bl	8001266 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002540:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_ADC_ConfigChannel+0x690>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	4a41      	ldr	r2, [pc, #260]	; (800264c <HAL_ADC_ConfigChannel+0x694>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	3301      	adds	r3, #1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002554:	e002      	b.n	800255c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3b01      	subs	r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f9      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002562:	e05a      	b.n	800261a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a39      	ldr	r2, [pc, #228]	; (8002650 <HAL_ADC_ConfigChannel+0x698>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11e      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x5f4>
 800256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d119      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a30      	ldr	r2, [pc, #192]	; (8002640 <HAL_ADC_ConfigChannel+0x688>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d14b      	bne.n	800261a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_ADC_ConfigChannel+0x678>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d004      	beq.n	8002596 <HAL_ADC_ConfigChannel+0x5de>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a28      	ldr	r2, [pc, #160]	; (8002634 <HAL_ADC_ConfigChannel+0x67c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x5e2>
 8002596:	4a28      	ldr	r2, [pc, #160]	; (8002638 <HAL_ADC_ConfigChannel+0x680>)
 8002598:	e000      	b.n	800259c <HAL_ADC_ConfigChannel+0x5e4>
 800259a:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_ADC_ConfigChannel+0x684>)
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f7fe fe5e 	bl	8001266 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025aa:	e036      	b.n	800261a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a28      	ldr	r2, [pc, #160]	; (8002654 <HAL_ADC_ConfigChannel+0x69c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d131      	bne.n	800261a <HAL_ADC_ConfigChannel+0x662>
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12c      	bne.n	800261a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <HAL_ADC_ConfigChannel+0x688>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d127      	bne.n	800261a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a18      	ldr	r2, [pc, #96]	; (8002630 <HAL_ADC_ConfigChannel+0x678>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d004      	beq.n	80025de <HAL_ADC_ConfigChannel+0x626>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a16      	ldr	r2, [pc, #88]	; (8002634 <HAL_ADC_ConfigChannel+0x67c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x62a>
 80025de:	4a16      	ldr	r2, [pc, #88]	; (8002638 <HAL_ADC_ConfigChannel+0x680>)
 80025e0:	e000      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x62c>
 80025e2:	4a16      	ldr	r2, [pc, #88]	; (800263c <HAL_ADC_ConfigChannel+0x684>)
 80025e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ea:	4619      	mov	r1, r3
 80025ec:	4610      	mov	r0, r2
 80025ee:	f7fe fe3a 	bl	8001266 <LL_ADC_SetCommonPathInternalCh>
 80025f2:	e012      	b.n	800261a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002606:	e008      	b.n	800261a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002622:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002626:	4618      	mov	r0, r3
 8002628:	3784      	adds	r7, #132	; 0x84
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	40022000 	.word	0x40022000
 8002634:	40022100 	.word	0x40022100
 8002638:	40022300 	.word	0x40022300
 800263c:	58026300 	.word	0x58026300
 8002640:	58026000 	.word	0x58026000
 8002644:	cb840000 	.word	0xcb840000
 8002648:	24000004 	.word	0x24000004
 800264c:	053e2d63 	.word	0x053e2d63
 8002650:	c7520000 	.word	0xc7520000
 8002654:	cfb80000 	.word	0xcfb80000

08002658 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe ffa5 	bl	80015b4 <LL_ADC_IsEnabled>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d16e      	bne.n	800274e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <ADC_Enable+0x100>)
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f043 0210 	orr.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e05a      	b.n	8002750 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe ff74 	bl	800158c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fd90 	bl	80011c8 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2b      	ldr	r2, [pc, #172]	; (800275c <ADC_Enable+0x104>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <ADC_Enable+0x66>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <ADC_Enable+0x108>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <ADC_Enable+0x6a>
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <ADC_Enable+0x10c>)
 80026c0:	e000      	b.n	80026c4 <ADC_Enable+0x6c>
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <ADC_Enable+0x110>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fef7 	bl	80014b8 <LL_ADC_GetMultimode>
 80026ca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a23      	ldr	r2, [pc, #140]	; (8002760 <ADC_Enable+0x108>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d002      	beq.n	80026dc <ADC_Enable+0x84>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e000      	b.n	80026de <ADC_Enable+0x86>
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <ADC_Enable+0x104>)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02c      	beq.n	8002740 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d130      	bne.n	800274e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ec:	e028      	b.n	8002740 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe ff5e 	bl	80015b4 <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d104      	bne.n	8002708 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe ff42 	bl	800158c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002708:	f7fe fd5e 	bl	80011c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d914      	bls.n	8002740 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d00d      	beq.n	8002740 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f043 0210 	orr.w	r2, r3, #16
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e007      	b.n	8002750 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d1cf      	bne.n	80026ee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	8000003f 	.word	0x8000003f
 800275c:	40022000 	.word	0x40022000
 8002760:	40022100 	.word	0x40022100
 8002764:	40022300 	.word	0x40022300
 8002768:	58026300 	.word	0x58026300

0800276c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002782:	2b00      	cmp	r3, #0
 8002784:	d14b      	bne.n	800281e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d021      	beq.n	80027e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fdd3 	bl	8001350 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d032      	beq.n	8002816 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d12b      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11f      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
 80027e2:	e018      	b.n	8002816 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d111      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7fe f996 	bl	8000b48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800281c:	e00e      	b.n	800283c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff fbba 	bl	8001fa4 <HAL_ADC_ErrorCallback>
}
 8002830:	e004      	b.n	800283c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7fe f968 	bl	8000b28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fb8c 	bl	8001fa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a7a      	ldr	r2, [pc, #488]	; (8002a8c <ADC_ConfigureBoostMode+0x1f8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <ADC_ConfigureBoostMode+0x1c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a79      	ldr	r2, [pc, #484]	; (8002a90 <ADC_ConfigureBoostMode+0x1fc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d109      	bne.n	80028c4 <ADC_ConfigureBoostMode+0x30>
 80028b0:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <ADC_ConfigureBoostMode+0x200>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e008      	b.n	80028d6 <ADC_ConfigureBoostMode+0x42>
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <ADC_ConfigureBoostMode+0x204>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01c      	beq.n	8002914 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028da:	f005 fc0f 	bl	80080fc <HAL_RCC_GetHCLKFreq>
 80028de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028e8:	d010      	beq.n	800290c <ADC_ConfigureBoostMode+0x78>
 80028ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028ee:	d873      	bhi.n	80029d8 <ADC_ConfigureBoostMode+0x144>
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d002      	beq.n	80028fc <ADC_ConfigureBoostMode+0x68>
 80028f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028fa:	d16d      	bne.n	80029d8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	60fb      	str	r3, [r7, #12]
        break;
 800290a:	e068      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	60fb      	str	r3, [r7, #12]
        break;
 8002912:	e064      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002914:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	f006 fe3e 	bl	800959c <HAL_RCCEx_GetPeriphCLKFreq>
 8002920:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800292a:	d051      	beq.n	80029d0 <ADC_ConfigureBoostMode+0x13c>
 800292c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002930:	d854      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 8002932:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002936:	d047      	beq.n	80029c8 <ADC_ConfigureBoostMode+0x134>
 8002938:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800293c:	d84e      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 800293e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002942:	d03d      	beq.n	80029c0 <ADC_ConfigureBoostMode+0x12c>
 8002944:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002948:	d848      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 800294a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800294e:	d033      	beq.n	80029b8 <ADC_ConfigureBoostMode+0x124>
 8002950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002954:	d842      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 8002956:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800295a:	d029      	beq.n	80029b0 <ADC_ConfigureBoostMode+0x11c>
 800295c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002960:	d83c      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 8002962:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002966:	d01a      	beq.n	800299e <ADC_ConfigureBoostMode+0x10a>
 8002968:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800296c:	d836      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 800296e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002972:	d014      	beq.n	800299e <ADC_ConfigureBoostMode+0x10a>
 8002974:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002978:	d830      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 800297a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297e:	d00e      	beq.n	800299e <ADC_ConfigureBoostMode+0x10a>
 8002980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002984:	d82a      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 8002986:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800298a:	d008      	beq.n	800299e <ADC_ConfigureBoostMode+0x10a>
 800298c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002990:	d824      	bhi.n	80029dc <ADC_ConfigureBoostMode+0x148>
 8002992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002996:	d002      	beq.n	800299e <ADC_ConfigureBoostMode+0x10a>
 8002998:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800299c:	d11e      	bne.n	80029dc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	60fb      	str	r3, [r7, #12]
        break;
 80029ae:	e016      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
        break;
 80029b6:	e012      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	60fb      	str	r3, [r7, #12]
        break;
 80029be:	e00e      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	60fb      	str	r3, [r7, #12]
        break;
 80029c6:	e00a      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	09db      	lsrs	r3, r3, #7
 80029cc:	60fb      	str	r3, [r7, #12]
        break;
 80029ce:	e006      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	60fb      	str	r3, [r7, #12]
        break;
 80029d6:	e002      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
        break;
 80029d8:	bf00      	nop
 80029da:	e000      	b.n	80029de <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80029dc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80029de:	f7fe fc23 	bl	8001228 <HAL_GetREVID>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d815      	bhi.n	8002a18 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <ADC_ConfigureBoostMode+0x208>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d908      	bls.n	8002a06 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a02:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a04:	e03e      	b.n	8002a84 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	e035      	b.n	8002a84 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <ADC_ConfigureBoostMode+0x20c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d808      	bhi.n	8002a38 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a34:	609a      	str	r2, [r3, #8]
}
 8002a36:	e025      	b.n	8002a84 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <ADC_ConfigureBoostMode+0x210>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d80a      	bhi.n	8002a56 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a52:	609a      	str	r2, [r3, #8]
}
 8002a54:	e016      	b.n	8002a84 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <ADC_ConfigureBoostMode+0x214>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d80a      	bhi.n	8002a74 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	609a      	str	r2, [r3, #8]
}
 8002a72:	e007      	b.n	8002a84 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40022100 	.word	0x40022100
 8002a94:	40022300 	.word	0x40022300
 8002a98:	58026300 	.word	0x58026300
 8002a9c:	01312d00 	.word	0x01312d00
 8002aa0:	005f5e10 	.word	0x005f5e10
 8002aa4:	00bebc20 	.word	0x00bebc20
 8002aa8:	017d7840 	.word	0x017d7840

08002aac <LL_ADC_IsEnabled>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <LL_ADC_IsEnabled+0x18>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <LL_ADC_IsEnabled+0x1a>
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b09f      	sub	sp, #124	; 0x7c
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e0be      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a5c      	ldr	r2, [pc, #368]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d102      	bne.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b94:	4b5b      	ldr	r3, [pc, #364]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	e001      	b.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e09d      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff87 	bl	8002ad2 <LL_ADC_REG_IsConversionOngoing>
 8002bc4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff81 	bl	8002ad2 <LL_ADC_REG_IsConversionOngoing>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d17f      	bne.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d17c      	bne.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a47      	ldr	r2, [pc, #284]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a46      	ldr	r2, [pc, #280]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002bf0:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002bf2:	e000      	b.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002bf4:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002bf6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d039      	beq.n	8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c10:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10e      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c26:	4836      	ldr	r0, [pc, #216]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c28:	f7ff ff40 	bl	8002aac <LL_ADC_IsEnabled>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	4835      	ldr	r0, [pc, #212]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c30:	f7ff ff3c 	bl	8002aac <LL_ADC_IsEnabled>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4323      	orrs	r3, r4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e008      	b.n	8002c56 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c44:	4832      	ldr	r0, [pc, #200]	; (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c46:	f7ff ff31 	bl	8002aac <LL_ADC_IsEnabled>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d047      	beq.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6811      	ldr	r1, [r2, #0]
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	6892      	ldr	r2, [r2, #8]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c70:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c72:	e03a      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10e      	bne.n	8002cb2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002c94:	481a      	ldr	r0, [pc, #104]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c96:	f7ff ff09 	bl	8002aac <LL_ADC_IsEnabled>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	4819      	ldr	r0, [pc, #100]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c9e:	f7ff ff05 	bl	8002aac <LL_ADC_IsEnabled>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4323      	orrs	r3, r4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e008      	b.n	8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cb2:	4817      	ldr	r0, [pc, #92]	; (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cb4:	f7ff fefa 	bl	8002aac <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cd2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd4:	e009      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ce8:	e000      	b.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cf4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	377c      	adds	r7, #124	; 0x7c
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}
 8002d00:	40022000 	.word	0x40022000
 8002d04:	40022100 	.word	0x40022100
 8002d08:	40022300 	.word	0x40022300
 8002d0c:	58026300 	.word	0x58026300
 8002d10:	58026000 	.word	0x58026000
 8002d14:	fffff0e0 	.word	0xfffff0e0

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <__NVIC_SetPriorityGrouping+0x40>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <__NVIC_SetPriorityGrouping+0x40>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00
 8002d5c:	05fa0000 	.word	0x05fa0000

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db0b      	blt.n	8002da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4907      	ldr	r1, [pc, #28]	; (8002db4 <__NVIC_EnableIRQ+0x38>)
 8002d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	; (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	; (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f1c3 0307 	rsb	r3, r3, #7
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf28      	it	cs
 8002e2a:	2304      	movcs	r3, #4
 8002e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d902      	bls.n	8002e3c <NVIC_EncodePriority+0x30>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3b03      	subs	r3, #3
 8002e3a:	e000      	b.n	8002e3e <NVIC_EncodePriority+0x32>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	4313      	orrs	r3, r2
         );
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00f      	b.n	8002eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <SysTick_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	210f      	movs	r1, #15
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f7ff ff8e 	bl	8002db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SysTick_Config+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Config+0x40>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff29 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002edc:	f7ff ff40 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ff90 	bl	8002e0c <NVIC_EncodePriority>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff5f 	bl	8002db8 <__NVIC_SetPriority>
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff33 	bl	8002d7c <__NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ffa4 	bl	8002e74 <SysTick_Config>
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f40:	f7fe f942 	bl	80011c8 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e316      	b.n	800357e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a66      	ldr	r2, [pc, #408]	; (80030f0 <HAL_DMA_Init+0x1b8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d04a      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <HAL_DMA_Init+0x1bc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d045      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a63      	ldr	r2, [pc, #396]	; (80030f8 <HAL_DMA_Init+0x1c0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d040      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a62      	ldr	r2, [pc, #392]	; (80030fc <HAL_DMA_Init+0x1c4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d03b      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a60      	ldr	r2, [pc, #384]	; (8003100 <HAL_DMA_Init+0x1c8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d036      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5f      	ldr	r2, [pc, #380]	; (8003104 <HAL_DMA_Init+0x1cc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d031      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a5d      	ldr	r2, [pc, #372]	; (8003108 <HAL_DMA_Init+0x1d0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d02c      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a5c      	ldr	r2, [pc, #368]	; (800310c <HAL_DMA_Init+0x1d4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d027      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a5a      	ldr	r2, [pc, #360]	; (8003110 <HAL_DMA_Init+0x1d8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d022      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a59      	ldr	r2, [pc, #356]	; (8003114 <HAL_DMA_Init+0x1dc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d01d      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a57      	ldr	r2, [pc, #348]	; (8003118 <HAL_DMA_Init+0x1e0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d018      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a56      	ldr	r2, [pc, #344]	; (800311c <HAL_DMA_Init+0x1e4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a54      	ldr	r2, [pc, #336]	; (8003120 <HAL_DMA_Init+0x1e8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00e      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a53      	ldr	r2, [pc, #332]	; (8003124 <HAL_DMA_Init+0x1ec>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d009      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a51      	ldr	r2, [pc, #324]	; (8003128 <HAL_DMA_Init+0x1f0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <HAL_DMA_Init+0xb8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a50      	ldr	r2, [pc, #320]	; (800312c <HAL_DMA_Init+0x1f4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d101      	bne.n	8002ff4 <HAL_DMA_Init+0xbc>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_DMA_Init+0xbe>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 813b 	beq.w	8003272 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a37      	ldr	r2, [pc, #220]	; (80030f0 <HAL_DMA_Init+0x1b8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d04a      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a36      	ldr	r2, [pc, #216]	; (80030f4 <HAL_DMA_Init+0x1bc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d045      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a34      	ldr	r2, [pc, #208]	; (80030f8 <HAL_DMA_Init+0x1c0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d040      	beq.n	80030ac <HAL_DMA_Init+0x174>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a33      	ldr	r2, [pc, #204]	; (80030fc <HAL_DMA_Init+0x1c4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d03b      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a31      	ldr	r2, [pc, #196]	; (8003100 <HAL_DMA_Init+0x1c8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d036      	beq.n	80030ac <HAL_DMA_Init+0x174>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a30      	ldr	r2, [pc, #192]	; (8003104 <HAL_DMA_Init+0x1cc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d031      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2e      	ldr	r2, [pc, #184]	; (8003108 <HAL_DMA_Init+0x1d0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d02c      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2d      	ldr	r2, [pc, #180]	; (800310c <HAL_DMA_Init+0x1d4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d027      	beq.n	80030ac <HAL_DMA_Init+0x174>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <HAL_DMA_Init+0x1d8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d022      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <HAL_DMA_Init+0x1dc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d01d      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a28      	ldr	r2, [pc, #160]	; (8003118 <HAL_DMA_Init+0x1e0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d018      	beq.n	80030ac <HAL_DMA_Init+0x174>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_DMA_Init+0x1e4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a25      	ldr	r2, [pc, #148]	; (8003120 <HAL_DMA_Init+0x1e8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00e      	beq.n	80030ac <HAL_DMA_Init+0x174>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_DMA_Init+0x1ec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d009      	beq.n	80030ac <HAL_DMA_Init+0x174>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_DMA_Init+0x1f0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_DMA_Init+0x174>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a21      	ldr	r2, [pc, #132]	; (800312c <HAL_DMA_Init+0x1f4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d108      	bne.n	80030be <HAL_DMA_Init+0x186>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e007      	b.n	80030ce <HAL_DMA_Init+0x196>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030ce:	e02f      	b.n	8003130 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030d0:	f7fe f87a 	bl	80011c8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d928      	bls.n	8003130 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2203      	movs	r2, #3
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e246      	b.n	800357e <HAL_DMA_Init+0x646>
 80030f0:	40020010 	.word	0x40020010
 80030f4:	40020028 	.word	0x40020028
 80030f8:	40020040 	.word	0x40020040
 80030fc:	40020058 	.word	0x40020058
 8003100:	40020070 	.word	0x40020070
 8003104:	40020088 	.word	0x40020088
 8003108:	400200a0 	.word	0x400200a0
 800310c:	400200b8 	.word	0x400200b8
 8003110:	40020410 	.word	0x40020410
 8003114:	40020428 	.word	0x40020428
 8003118:	40020440 	.word	0x40020440
 800311c:	40020458 	.word	0x40020458
 8003120:	40020470 	.word	0x40020470
 8003124:	40020488 	.word	0x40020488
 8003128:	400204a0 	.word	0x400204a0
 800312c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1c8      	bne.n	80030d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4b83      	ldr	r3, [pc, #524]	; (8003358 <HAL_DMA_Init+0x420>)
 800314a:	4013      	ands	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003156:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003162:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b04      	cmp	r3, #4
 8003182:	d107      	bne.n	8003194 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	4313      	orrs	r3, r2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003194:	4b71      	ldr	r3, [pc, #452]	; (800335c <HAL_DMA_Init+0x424>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b71      	ldr	r3, [pc, #452]	; (8003360 <HAL_DMA_Init+0x428>)
 800319a:	4013      	ands	r3, r2
 800319c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a0:	d328      	bcc.n	80031f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b28      	cmp	r3, #40	; 0x28
 80031a8:	d903      	bls.n	80031b2 <HAL_DMA_Init+0x27a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b2e      	cmp	r3, #46	; 0x2e
 80031b0:	d917      	bls.n	80031e2 <HAL_DMA_Init+0x2aa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b3e      	cmp	r3, #62	; 0x3e
 80031b8:	d903      	bls.n	80031c2 <HAL_DMA_Init+0x28a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b42      	cmp	r3, #66	; 0x42
 80031c0:	d90f      	bls.n	80031e2 <HAL_DMA_Init+0x2aa>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b46      	cmp	r3, #70	; 0x46
 80031c8:	d903      	bls.n	80031d2 <HAL_DMA_Init+0x29a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b48      	cmp	r3, #72	; 0x48
 80031d0:	d907      	bls.n	80031e2 <HAL_DMA_Init+0x2aa>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b4e      	cmp	r3, #78	; 0x4e
 80031d8:	d905      	bls.n	80031e6 <HAL_DMA_Init+0x2ae>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b52      	cmp	r3, #82	; 0x52
 80031e0:	d801      	bhi.n	80031e6 <HAL_DMA_Init+0x2ae>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_DMA_Init+0x2b0>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0307 	bic.w	r3, r3, #7
 800320a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b04      	cmp	r3, #4
 800321c:	d117      	bne.n	800324e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f002 f823 	bl	800527c <DMA_CheckFifoParam>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2240      	movs	r2, #64	; 0x40
 8003240:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e197      	b.n	800357e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 ff5e 	bl	8005118 <DMA_CalcBaseAndBitshift>
 800325c:	4603      	mov	r3, r0
 800325e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	223f      	movs	r2, #63	; 0x3f
 800326a:	409a      	lsls	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	e0cd      	b.n	800340e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a3b      	ldr	r2, [pc, #236]	; (8003364 <HAL_DMA_Init+0x42c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_DMA_Init+0x38a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a39      	ldr	r2, [pc, #228]	; (8003368 <HAL_DMA_Init+0x430>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_Init+0x38a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a38      	ldr	r2, [pc, #224]	; (800336c <HAL_DMA_Init+0x434>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_Init+0x38a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a36      	ldr	r2, [pc, #216]	; (8003370 <HAL_DMA_Init+0x438>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_DMA_Init+0x38a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a35      	ldr	r2, [pc, #212]	; (8003374 <HAL_DMA_Init+0x43c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_DMA_Init+0x38a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a33      	ldr	r2, [pc, #204]	; (8003378 <HAL_DMA_Init+0x440>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d009      	beq.n	80032c2 <HAL_DMA_Init+0x38a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a32      	ldr	r2, [pc, #200]	; (800337c <HAL_DMA_Init+0x444>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_DMA_Init+0x38a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a30      	ldr	r2, [pc, #192]	; (8003380 <HAL_DMA_Init+0x448>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_Init+0x38e>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_DMA_Init+0x390>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8097 	beq.w	80033fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a24      	ldr	r2, [pc, #144]	; (8003364 <HAL_DMA_Init+0x42c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d021      	beq.n	800331c <HAL_DMA_Init+0x3e4>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_DMA_Init+0x430>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01c      	beq.n	800331c <HAL_DMA_Init+0x3e4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <HAL_DMA_Init+0x434>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d017      	beq.n	800331c <HAL_DMA_Init+0x3e4>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_DMA_Init+0x438>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d012      	beq.n	800331c <HAL_DMA_Init+0x3e4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_DMA_Init+0x43c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00d      	beq.n	800331c <HAL_DMA_Init+0x3e4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <HAL_DMA_Init+0x440>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d008      	beq.n	800331c <HAL_DMA_Init+0x3e4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_DMA_Init+0x444>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <HAL_DMA_Init+0x3e4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <HAL_DMA_Init+0x448>)
 800331a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_DMA_Init+0x44c>)
 8003338:	4013      	ands	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d021      	beq.n	8003388 <HAL_DMA_Init+0x450>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b80      	cmp	r3, #128	; 0x80
 800334a:	d102      	bne.n	8003352 <HAL_DMA_Init+0x41a>
 800334c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003350:	e01b      	b.n	800338a <HAL_DMA_Init+0x452>
 8003352:	2300      	movs	r3, #0
 8003354:	e019      	b.n	800338a <HAL_DMA_Init+0x452>
 8003356:	bf00      	nop
 8003358:	fe10803f 	.word	0xfe10803f
 800335c:	5c001000 	.word	0x5c001000
 8003360:	ffff0000 	.word	0xffff0000
 8003364:	58025408 	.word	0x58025408
 8003368:	5802541c 	.word	0x5802541c
 800336c:	58025430 	.word	0x58025430
 8003370:	58025444 	.word	0x58025444
 8003374:	58025458 	.word	0x58025458
 8003378:	5802546c 	.word	0x5802546c
 800337c:	58025480 	.word	0x58025480
 8003380:	58025494 	.word	0x58025494
 8003384:	fffe000f 	.word	0xfffe000f
 8003388:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68d2      	ldr	r2, [r2, #12]
 800338e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003390:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003398:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b6e      	ldr	r3, [pc, #440]	; (8003588 <HAL_DMA_Init+0x650>)
 80033d0:	4413      	add	r3, r2
 80033d2:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_DMA_Init+0x654>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	009a      	lsls	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f001 fe99 	bl	8005118 <DMA_CalcBaseAndBitshift>
 80033e6:	4603      	mov	r3, r0
 80033e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2201      	movs	r2, #1
 80033f4:	409a      	lsls	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	e008      	b.n	800340e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0b7      	b.n	800357e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5f      	ldr	r2, [pc, #380]	; (8003590 <HAL_DMA_Init+0x658>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d072      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_DMA_Init+0x65c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d06d      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a5c      	ldr	r2, [pc, #368]	; (8003598 <HAL_DMA_Init+0x660>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d068      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_DMA_Init+0x664>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d063      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a59      	ldr	r2, [pc, #356]	; (80035a0 <HAL_DMA_Init+0x668>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d05e      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_DMA_Init+0x66c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d059      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a56      	ldr	r2, [pc, #344]	; (80035a8 <HAL_DMA_Init+0x670>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d054      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a54      	ldr	r2, [pc, #336]	; (80035ac <HAL_DMA_Init+0x674>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04f      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a53      	ldr	r2, [pc, #332]	; (80035b0 <HAL_DMA_Init+0x678>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04a      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a51      	ldr	r2, [pc, #324]	; (80035b4 <HAL_DMA_Init+0x67c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a50      	ldr	r2, [pc, #320]	; (80035b8 <HAL_DMA_Init+0x680>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d040      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a4e      	ldr	r2, [pc, #312]	; (80035bc <HAL_DMA_Init+0x684>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d03b      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a4d      	ldr	r2, [pc, #308]	; (80035c0 <HAL_DMA_Init+0x688>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d036      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a4b      	ldr	r2, [pc, #300]	; (80035c4 <HAL_DMA_Init+0x68c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4a      	ldr	r2, [pc, #296]	; (80035c8 <HAL_DMA_Init+0x690>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a48      	ldr	r2, [pc, #288]	; (80035cc <HAL_DMA_Init+0x694>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a47      	ldr	r2, [pc, #284]	; (80035d0 <HAL_DMA_Init+0x698>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a45      	ldr	r2, [pc, #276]	; (80035d4 <HAL_DMA_Init+0x69c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a44      	ldr	r2, [pc, #272]	; (80035d8 <HAL_DMA_Init+0x6a0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a42      	ldr	r2, [pc, #264]	; (80035dc <HAL_DMA_Init+0x6a4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a41      	ldr	r2, [pc, #260]	; (80035e0 <HAL_DMA_Init+0x6a8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3f      	ldr	r2, [pc, #252]	; (80035e4 <HAL_DMA_Init+0x6ac>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a3e      	ldr	r2, [pc, #248]	; (80035e8 <HAL_DMA_Init+0x6b0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Init+0x5c6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <HAL_DMA_Init+0x6b4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_DMA_Init+0x5ca>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_DMA_Init+0x5cc>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d032      	beq.n	800356e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f001 ff33 	bl	8005374 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b80      	cmp	r3, #128	; 0x80
 8003514:	d102      	bne.n	800351c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003530:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d010      	beq.n	800355c <HAL_DMA_Init+0x624>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b08      	cmp	r3, #8
 8003540:	d80c      	bhi.n	800355c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 ffb0 	bl	80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	e008      	b.n	800356e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	a7fdabf8 	.word	0xa7fdabf8
 800358c:	cccccccd 	.word	0xcccccccd
 8003590:	40020010 	.word	0x40020010
 8003594:	40020028 	.word	0x40020028
 8003598:	40020040 	.word	0x40020040
 800359c:	40020058 	.word	0x40020058
 80035a0:	40020070 	.word	0x40020070
 80035a4:	40020088 	.word	0x40020088
 80035a8:	400200a0 	.word	0x400200a0
 80035ac:	400200b8 	.word	0x400200b8
 80035b0:	40020410 	.word	0x40020410
 80035b4:	40020428 	.word	0x40020428
 80035b8:	40020440 	.word	0x40020440
 80035bc:	40020458 	.word	0x40020458
 80035c0:	40020470 	.word	0x40020470
 80035c4:	40020488 	.word	0x40020488
 80035c8:	400204a0 	.word	0x400204a0
 80035cc:	400204b8 	.word	0x400204b8
 80035d0:	58025408 	.word	0x58025408
 80035d4:	5802541c 	.word	0x5802541c
 80035d8:	58025430 	.word	0x58025430
 80035dc:	58025444 	.word	0x58025444
 80035e0:	58025458 	.word	0x58025458
 80035e4:	5802546c 	.word	0x5802546c
 80035e8:	58025480 	.word	0x58025480
 80035ec:	58025494 	.word	0x58025494

080035f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e226      	b.n	8003a5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_DMA_Start_IT+0x2a>
 8003616:	2302      	movs	r3, #2
 8003618:	e21f      	b.n	8003a5a <HAL_DMA_Start_IT+0x46a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	f040 820a 	bne.w	8003a44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a68      	ldr	r2, [pc, #416]	; (80037e4 <HAL_DMA_Start_IT+0x1f4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04a      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a66      	ldr	r2, [pc, #408]	; (80037e8 <HAL_DMA_Start_IT+0x1f8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d045      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a65      	ldr	r2, [pc, #404]	; (80037ec <HAL_DMA_Start_IT+0x1fc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d040      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a63      	ldr	r2, [pc, #396]	; (80037f0 <HAL_DMA_Start_IT+0x200>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d03b      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a62      	ldr	r2, [pc, #392]	; (80037f4 <HAL_DMA_Start_IT+0x204>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d036      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a60      	ldr	r2, [pc, #384]	; (80037f8 <HAL_DMA_Start_IT+0x208>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d031      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a5f      	ldr	r2, [pc, #380]	; (80037fc <HAL_DMA_Start_IT+0x20c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d02c      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5d      	ldr	r2, [pc, #372]	; (8003800 <HAL_DMA_Start_IT+0x210>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d027      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5c      	ldr	r2, [pc, #368]	; (8003804 <HAL_DMA_Start_IT+0x214>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5a      	ldr	r2, [pc, #360]	; (8003808 <HAL_DMA_Start_IT+0x218>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a59      	ldr	r2, [pc, #356]	; (800380c <HAL_DMA_Start_IT+0x21c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a57      	ldr	r2, [pc, #348]	; (8003810 <HAL_DMA_Start_IT+0x220>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a56      	ldr	r2, [pc, #344]	; (8003814 <HAL_DMA_Start_IT+0x224>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <HAL_DMA_Start_IT+0x228>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a53      	ldr	r2, [pc, #332]	; (800381c <HAL_DMA_Start_IT+0x22c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_Start_IT+0xee>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a51      	ldr	r2, [pc, #324]	; (8003820 <HAL_DMA_Start_IT+0x230>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d108      	bne.n	80036f0 <HAL_DMA_Start_IT+0x100>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e007      	b.n	8003700 <HAL_DMA_Start_IT+0x110>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f001 fb5a 	bl	8004dc0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a34      	ldr	r2, [pc, #208]	; (80037e4 <HAL_DMA_Start_IT+0x1f4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d04a      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a33      	ldr	r2, [pc, #204]	; (80037e8 <HAL_DMA_Start_IT+0x1f8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d045      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a31      	ldr	r2, [pc, #196]	; (80037ec <HAL_DMA_Start_IT+0x1fc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d040      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a30      	ldr	r2, [pc, #192]	; (80037f0 <HAL_DMA_Start_IT+0x200>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d03b      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <HAL_DMA_Start_IT+0x204>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d036      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2d      	ldr	r2, [pc, #180]	; (80037f8 <HAL_DMA_Start_IT+0x208>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d031      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2b      	ldr	r2, [pc, #172]	; (80037fc <HAL_DMA_Start_IT+0x20c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02c      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <HAL_DMA_Start_IT+0x210>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d027      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a28      	ldr	r2, [pc, #160]	; (8003804 <HAL_DMA_Start_IT+0x214>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d022      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_DMA_Start_IT+0x218>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d01d      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a25      	ldr	r2, [pc, #148]	; (800380c <HAL_DMA_Start_IT+0x21c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a24      	ldr	r2, [pc, #144]	; (8003810 <HAL_DMA_Start_IT+0x220>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a22      	ldr	r2, [pc, #136]	; (8003814 <HAL_DMA_Start_IT+0x224>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00e      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a21      	ldr	r2, [pc, #132]	; (8003818 <HAL_DMA_Start_IT+0x228>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_DMA_Start_IT+0x22c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_DMA_Start_IT+0x1bc>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_DMA_Start_IT+0x230>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Start_IT+0x1c0>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_DMA_Start_IT+0x1c2>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d036      	beq.n	8003824 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 021e 	bic.w	r2, r3, #30
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0216 	orr.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d03e      	beq.n	8003850 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0208 	orr.w	r2, r2, #8
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e035      	b.n	8003850 <HAL_DMA_Start_IT+0x260>
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 020e 	bic.w	r2, r3, #14
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 020a 	orr.w	r2, r2, #10
 8003836:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0204 	orr.w	r2, r2, #4
 800384e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a83      	ldr	r2, [pc, #524]	; (8003a64 <HAL_DMA_Start_IT+0x474>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d072      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a82      	ldr	r2, [pc, #520]	; (8003a68 <HAL_DMA_Start_IT+0x478>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d06d      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a80      	ldr	r2, [pc, #512]	; (8003a6c <HAL_DMA_Start_IT+0x47c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d068      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7f      	ldr	r2, [pc, #508]	; (8003a70 <HAL_DMA_Start_IT+0x480>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d063      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7d      	ldr	r2, [pc, #500]	; (8003a74 <HAL_DMA_Start_IT+0x484>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d05e      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7c      	ldr	r2, [pc, #496]	; (8003a78 <HAL_DMA_Start_IT+0x488>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d059      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a7a      	ldr	r2, [pc, #488]	; (8003a7c <HAL_DMA_Start_IT+0x48c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d054      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a79      	ldr	r2, [pc, #484]	; (8003a80 <HAL_DMA_Start_IT+0x490>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d04f      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a77      	ldr	r2, [pc, #476]	; (8003a84 <HAL_DMA_Start_IT+0x494>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d04a      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a76      	ldr	r2, [pc, #472]	; (8003a88 <HAL_DMA_Start_IT+0x498>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d045      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a74      	ldr	r2, [pc, #464]	; (8003a8c <HAL_DMA_Start_IT+0x49c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d040      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a73      	ldr	r2, [pc, #460]	; (8003a90 <HAL_DMA_Start_IT+0x4a0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d03b      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a71      	ldr	r2, [pc, #452]	; (8003a94 <HAL_DMA_Start_IT+0x4a4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d036      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a70      	ldr	r2, [pc, #448]	; (8003a98 <HAL_DMA_Start_IT+0x4a8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d031      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_DMA_Start_IT+0x4ac>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d02c      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6d      	ldr	r2, [pc, #436]	; (8003aa0 <HAL_DMA_Start_IT+0x4b0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d027      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6b      	ldr	r2, [pc, #428]	; (8003aa4 <HAL_DMA_Start_IT+0x4b4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d022      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a6a      	ldr	r2, [pc, #424]	; (8003aa8 <HAL_DMA_Start_IT+0x4b8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d01d      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a68      	ldr	r2, [pc, #416]	; (8003aac <HAL_DMA_Start_IT+0x4bc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d018      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a67      	ldr	r2, [pc, #412]	; (8003ab0 <HAL_DMA_Start_IT+0x4c0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a65      	ldr	r2, [pc, #404]	; (8003ab4 <HAL_DMA_Start_IT+0x4c4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00e      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a64      	ldr	r2, [pc, #400]	; (8003ab8 <HAL_DMA_Start_IT+0x4c8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d009      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a62      	ldr	r2, [pc, #392]	; (8003abc <HAL_DMA_Start_IT+0x4cc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_DMA_Start_IT+0x350>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a61      	ldr	r2, [pc, #388]	; (8003ac0 <HAL_DMA_Start_IT+0x4d0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_DMA_Start_IT+0x354>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_DMA_Start_IT+0x356>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01a      	beq.n	8003980 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003966:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a37      	ldr	r2, [pc, #220]	; (8003a64 <HAL_DMA_Start_IT+0x474>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04a      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a36      	ldr	r2, [pc, #216]	; (8003a68 <HAL_DMA_Start_IT+0x478>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d045      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <HAL_DMA_Start_IT+0x47c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d040      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a33      	ldr	r2, [pc, #204]	; (8003a70 <HAL_DMA_Start_IT+0x480>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d03b      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a31      	ldr	r2, [pc, #196]	; (8003a74 <HAL_DMA_Start_IT+0x484>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d036      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a30      	ldr	r2, [pc, #192]	; (8003a78 <HAL_DMA_Start_IT+0x488>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d031      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2e      	ldr	r2, [pc, #184]	; (8003a7c <HAL_DMA_Start_IT+0x48c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02c      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2d      	ldr	r2, [pc, #180]	; (8003a80 <HAL_DMA_Start_IT+0x490>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d027      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2b      	ldr	r2, [pc, #172]	; (8003a84 <HAL_DMA_Start_IT+0x494>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d022      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <HAL_DMA_Start_IT+0x498>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d01d      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a28      	ldr	r2, [pc, #160]	; (8003a8c <HAL_DMA_Start_IT+0x49c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <HAL_DMA_Start_IT+0x4a0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a25      	ldr	r2, [pc, #148]	; (8003a94 <HAL_DMA_Start_IT+0x4a4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <HAL_DMA_Start_IT+0x4a8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <HAL_DMA_Start_IT+0x4ac>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_DMA_Start_IT+0x430>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <HAL_DMA_Start_IT+0x4b0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d108      	bne.n	8003a32 <HAL_DMA_Start_IT+0x442>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e012      	b.n	8003a58 <HAL_DMA_Start_IT+0x468>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e009      	b.n	8003a58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40020010 	.word	0x40020010
 8003a68:	40020028 	.word	0x40020028
 8003a6c:	40020040 	.word	0x40020040
 8003a70:	40020058 	.word	0x40020058
 8003a74:	40020070 	.word	0x40020070
 8003a78:	40020088 	.word	0x40020088
 8003a7c:	400200a0 	.word	0x400200a0
 8003a80:	400200b8 	.word	0x400200b8
 8003a84:	40020410 	.word	0x40020410
 8003a88:	40020428 	.word	0x40020428
 8003a8c:	40020440 	.word	0x40020440
 8003a90:	40020458 	.word	0x40020458
 8003a94:	40020470 	.word	0x40020470
 8003a98:	40020488 	.word	0x40020488
 8003a9c:	400204a0 	.word	0x400204a0
 8003aa0:	400204b8 	.word	0x400204b8
 8003aa4:	58025408 	.word	0x58025408
 8003aa8:	5802541c 	.word	0x5802541c
 8003aac:	58025430 	.word	0x58025430
 8003ab0:	58025444 	.word	0x58025444
 8003ab4:	58025458 	.word	0x58025458
 8003ab8:	5802546c 	.word	0x5802546c
 8003abc:	58025480 	.word	0x58025480
 8003ac0:	58025494 	.word	0x58025494

08003ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e237      	b.n	8003f46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e22c      	b.n	8003f46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a5c      	ldr	r2, [pc, #368]	; (8003c64 <HAL_DMA_Abort_IT+0x1a0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04a      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5b      	ldr	r2, [pc, #364]	; (8003c68 <HAL_DMA_Abort_IT+0x1a4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d045      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a59      	ldr	r2, [pc, #356]	; (8003c6c <HAL_DMA_Abort_IT+0x1a8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d040      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a58      	ldr	r2, [pc, #352]	; (8003c70 <HAL_DMA_Abort_IT+0x1ac>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03b      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a56      	ldr	r2, [pc, #344]	; (8003c74 <HAL_DMA_Abort_IT+0x1b0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d036      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a55      	ldr	r2, [pc, #340]	; (8003c78 <HAL_DMA_Abort_IT+0x1b4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d031      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a53      	ldr	r2, [pc, #332]	; (8003c7c <HAL_DMA_Abort_IT+0x1b8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02c      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_DMA_Abort_IT+0x1bc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d027      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a50      	ldr	r2, [pc, #320]	; (8003c84 <HAL_DMA_Abort_IT+0x1c0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4f      	ldr	r2, [pc, #316]	; (8003c88 <HAL_DMA_Abort_IT+0x1c4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a4d      	ldr	r2, [pc, #308]	; (8003c8c <HAL_DMA_Abort_IT+0x1c8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4c      	ldr	r2, [pc, #304]	; (8003c90 <HAL_DMA_Abort_IT+0x1cc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4a      	ldr	r2, [pc, #296]	; (8003c94 <HAL_DMA_Abort_IT+0x1d0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a49      	ldr	r2, [pc, #292]	; (8003c98 <HAL_DMA_Abort_IT+0x1d4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a47      	ldr	r2, [pc, #284]	; (8003c9c <HAL_DMA_Abort_IT+0x1d8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xc8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a46      	ldr	r2, [pc, #280]	; (8003ca0 <HAL_DMA_Abort_IT+0x1dc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_DMA_Abort_IT+0xcc>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_DMA_Abort_IT+0xce>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8086 	beq.w	8003ca4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2f      	ldr	r2, [pc, #188]	; (8003c64 <HAL_DMA_Abort_IT+0x1a0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d04a      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2e      	ldr	r2, [pc, #184]	; (8003c68 <HAL_DMA_Abort_IT+0x1a4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d045      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <HAL_DMA_Abort_IT+0x1a8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d040      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2b      	ldr	r2, [pc, #172]	; (8003c70 <HAL_DMA_Abort_IT+0x1ac>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d03b      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <HAL_DMA_Abort_IT+0x1b0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d036      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a28      	ldr	r2, [pc, #160]	; (8003c78 <HAL_DMA_Abort_IT+0x1b4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d031      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <HAL_DMA_Abort_IT+0x1b8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02c      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <HAL_DMA_Abort_IT+0x1bc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d027      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a23      	ldr	r2, [pc, #140]	; (8003c84 <HAL_DMA_Abort_IT+0x1c0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_DMA_Abort_IT+0x1c4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d01d      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_DMA_Abort_IT+0x1c8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <HAL_DMA_Abort_IT+0x1cc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_DMA_Abort_IT+0x1d0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <HAL_DMA_Abort_IT+0x1d4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_DMA_Abort_IT+0x1d8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x17c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_DMA_Abort_IT+0x1dc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d108      	bne.n	8003c52 <HAL_DMA_Abort_IT+0x18e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e178      	b.n	8003f44 <HAL_DMA_Abort_IT+0x480>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e16f      	b.n	8003f44 <HAL_DMA_Abort_IT+0x480>
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020028 	.word	0x40020028
 8003c6c:	40020040 	.word	0x40020040
 8003c70:	40020058 	.word	0x40020058
 8003c74:	40020070 	.word	0x40020070
 8003c78:	40020088 	.word	0x40020088
 8003c7c:	400200a0 	.word	0x400200a0
 8003c80:	400200b8 	.word	0x400200b8
 8003c84:	40020410 	.word	0x40020410
 8003c88:	40020428 	.word	0x40020428
 8003c8c:	40020440 	.word	0x40020440
 8003c90:	40020458 	.word	0x40020458
 8003c94:	40020470 	.word	0x40020470
 8003c98:	40020488 	.word	0x40020488
 8003c9c:	400204a0 	.word	0x400204a0
 8003ca0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 020e 	bic.w	r2, r2, #14
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6c      	ldr	r2, [pc, #432]	; (8003e6c <HAL_DMA_Abort_IT+0x3a8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d04a      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6b      	ldr	r2, [pc, #428]	; (8003e70 <HAL_DMA_Abort_IT+0x3ac>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d045      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a69      	ldr	r2, [pc, #420]	; (8003e74 <HAL_DMA_Abort_IT+0x3b0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d040      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a68      	ldr	r2, [pc, #416]	; (8003e78 <HAL_DMA_Abort_IT+0x3b4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d03b      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a66      	ldr	r2, [pc, #408]	; (8003e7c <HAL_DMA_Abort_IT+0x3b8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d036      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_DMA_Abort_IT+0x3bc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d031      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a63      	ldr	r2, [pc, #396]	; (8003e84 <HAL_DMA_Abort_IT+0x3c0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d02c      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a62      	ldr	r2, [pc, #392]	; (8003e88 <HAL_DMA_Abort_IT+0x3c4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d027      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a60      	ldr	r2, [pc, #384]	; (8003e8c <HAL_DMA_Abort_IT+0x3c8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d022      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a5f      	ldr	r2, [pc, #380]	; (8003e90 <HAL_DMA_Abort_IT+0x3cc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d01d      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a5d      	ldr	r2, [pc, #372]	; (8003e94 <HAL_DMA_Abort_IT+0x3d0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d018      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a5c      	ldr	r2, [pc, #368]	; (8003e98 <HAL_DMA_Abort_IT+0x3d4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a5a      	ldr	r2, [pc, #360]	; (8003e9c <HAL_DMA_Abort_IT+0x3d8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00e      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <HAL_DMA_Abort_IT+0x3dc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a57      	ldr	r2, [pc, #348]	; (8003ea4 <HAL_DMA_Abort_IT+0x3e0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x290>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a56      	ldr	r2, [pc, #344]	; (8003ea8 <HAL_DMA_Abort_IT+0x3e4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d108      	bne.n	8003d66 <HAL_DMA_Abort_IT+0x2a2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e007      	b.n	8003d76 <HAL_DMA_Abort_IT+0x2b2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <HAL_DMA_Abort_IT+0x3a8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d072      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <HAL_DMA_Abort_IT+0x3ac>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d06d      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a39      	ldr	r2, [pc, #228]	; (8003e74 <HAL_DMA_Abort_IT+0x3b0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d068      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a37      	ldr	r2, [pc, #220]	; (8003e78 <HAL_DMA_Abort_IT+0x3b4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d063      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a36      	ldr	r2, [pc, #216]	; (8003e7c <HAL_DMA_Abort_IT+0x3b8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d05e      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <HAL_DMA_Abort_IT+0x3bc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d059      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <HAL_DMA_Abort_IT+0x3c0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d054      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a31      	ldr	r2, [pc, #196]	; (8003e88 <HAL_DMA_Abort_IT+0x3c4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d04f      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a30      	ldr	r2, [pc, #192]	; (8003e8c <HAL_DMA_Abort_IT+0x3c8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d04a      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2e      	ldr	r2, [pc, #184]	; (8003e90 <HAL_DMA_Abort_IT+0x3cc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d045      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <HAL_DMA_Abort_IT+0x3d0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d040      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <HAL_DMA_Abort_IT+0x3d4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d03b      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2a      	ldr	r2, [pc, #168]	; (8003e9c <HAL_DMA_Abort_IT+0x3d8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d036      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a28      	ldr	r2, [pc, #160]	; (8003ea0 <HAL_DMA_Abort_IT+0x3dc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d031      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <HAL_DMA_Abort_IT+0x3e0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d02c      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <HAL_DMA_Abort_IT+0x3e4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d027      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a24      	ldr	r2, [pc, #144]	; (8003eac <HAL_DMA_Abort_IT+0x3e8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d022      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a22      	ldr	r2, [pc, #136]	; (8003eb0 <HAL_DMA_Abort_IT+0x3ec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01d      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <HAL_DMA_Abort_IT+0x3f0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d018      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_DMA_Abort_IT+0x3f4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_DMA_Abort_IT+0x3f8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00e      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <HAL_DMA_Abort_IT+0x3fc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d009      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <HAL_DMA_Abort_IT+0x400>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x3a2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_DMA_Abort_IT+0x404>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d132      	bne.n	8003ecc <HAL_DMA_Abort_IT+0x408>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e031      	b.n	8003ece <HAL_DMA_Abort_IT+0x40a>
 8003e6a:	bf00      	nop
 8003e6c:	40020010 	.word	0x40020010
 8003e70:	40020028 	.word	0x40020028
 8003e74:	40020040 	.word	0x40020040
 8003e78:	40020058 	.word	0x40020058
 8003e7c:	40020070 	.word	0x40020070
 8003e80:	40020088 	.word	0x40020088
 8003e84:	400200a0 	.word	0x400200a0
 8003e88:	400200b8 	.word	0x400200b8
 8003e8c:	40020410 	.word	0x40020410
 8003e90:	40020428 	.word	0x40020428
 8003e94:	40020440 	.word	0x40020440
 8003e98:	40020458 	.word	0x40020458
 8003e9c:	40020470 	.word	0x40020470
 8003ea0:	40020488 	.word	0x40020488
 8003ea4:	400204a0 	.word	0x400204a0
 8003ea8:	400204b8 	.word	0x400204b8
 8003eac:	58025408 	.word	0x58025408
 8003eb0:	5802541c 	.word	0x5802541c
 8003eb4:	58025430 	.word	0x58025430
 8003eb8:	58025444 	.word	0x58025444
 8003ebc:	58025458 	.word	0x58025458
 8003ec0:	5802546c 	.word	0x5802546c
 8003ec4:	58025480 	.word	0x58025480
 8003ec8:	58025494 	.word	0x58025494
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d028      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00c      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f5c:	4b67      	ldr	r3, [pc, #412]	; (80040fc <HAL_DMA_IRQHandler+0x1ac>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a67      	ldr	r2, [pc, #412]	; (8004100 <HAL_DMA_IRQHandler+0x1b0>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	0a9b      	lsrs	r3, r3, #10
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a5f      	ldr	r2, [pc, #380]	; (8004104 <HAL_DMA_IRQHandler+0x1b4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d04a      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5d      	ldr	r2, [pc, #372]	; (8004108 <HAL_DMA_IRQHandler+0x1b8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d045      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5c      	ldr	r2, [pc, #368]	; (800410c <HAL_DMA_IRQHandler+0x1bc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d040      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5a      	ldr	r2, [pc, #360]	; (8004110 <HAL_DMA_IRQHandler+0x1c0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d03b      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a59      	ldr	r2, [pc, #356]	; (8004114 <HAL_DMA_IRQHandler+0x1c4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d036      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a57      	ldr	r2, [pc, #348]	; (8004118 <HAL_DMA_IRQHandler+0x1c8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d031      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a56      	ldr	r2, [pc, #344]	; (800411c <HAL_DMA_IRQHandler+0x1cc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d02c      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a54      	ldr	r2, [pc, #336]	; (8004120 <HAL_DMA_IRQHandler+0x1d0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d027      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a53      	ldr	r2, [pc, #332]	; (8004124 <HAL_DMA_IRQHandler+0x1d4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a51      	ldr	r2, [pc, #324]	; (8004128 <HAL_DMA_IRQHandler+0x1d8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01d      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a50      	ldr	r2, [pc, #320]	; (800412c <HAL_DMA_IRQHandler+0x1dc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a4e      	ldr	r2, [pc, #312]	; (8004130 <HAL_DMA_IRQHandler+0x1e0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a4d      	ldr	r2, [pc, #308]	; (8004134 <HAL_DMA_IRQHandler+0x1e4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4b      	ldr	r2, [pc, #300]	; (8004138 <HAL_DMA_IRQHandler+0x1e8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a4a      	ldr	r2, [pc, #296]	; (800413c <HAL_DMA_IRQHandler+0x1ec>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_DMA_IRQHandler+0xd2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a48      	ldr	r2, [pc, #288]	; (8004140 <HAL_DMA_IRQHandler+0x1f0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_DMA_IRQHandler+0xd6>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_DMA_IRQHandler+0xd8>
 8004026:	2300      	movs	r3, #0
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 842b 	beq.w	8004884 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2208      	movs	r2, #8
 8004038:	409a      	lsls	r2, r3
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80a2 	beq.w	8004188 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2e      	ldr	r2, [pc, #184]	; (8004104 <HAL_DMA_IRQHandler+0x1b4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d04a      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2d      	ldr	r2, [pc, #180]	; (8004108 <HAL_DMA_IRQHandler+0x1b8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d045      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2b      	ldr	r2, [pc, #172]	; (800410c <HAL_DMA_IRQHandler+0x1bc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d040      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <HAL_DMA_IRQHandler+0x1c0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d03b      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a28      	ldr	r2, [pc, #160]	; (8004114 <HAL_DMA_IRQHandler+0x1c4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d036      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a27      	ldr	r2, [pc, #156]	; (8004118 <HAL_DMA_IRQHandler+0x1c8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d031      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a25      	ldr	r2, [pc, #148]	; (800411c <HAL_DMA_IRQHandler+0x1cc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d02c      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a24      	ldr	r2, [pc, #144]	; (8004120 <HAL_DMA_IRQHandler+0x1d0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d027      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <HAL_DMA_IRQHandler+0x1d4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d022      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a21      	ldr	r2, [pc, #132]	; (8004128 <HAL_DMA_IRQHandler+0x1d8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d01d      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1f      	ldr	r2, [pc, #124]	; (800412c <HAL_DMA_IRQHandler+0x1dc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d018      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <HAL_DMA_IRQHandler+0x1e0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d013      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1c      	ldr	r2, [pc, #112]	; (8004134 <HAL_DMA_IRQHandler+0x1e4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_DMA_IRQHandler+0x1e8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d009      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a19      	ldr	r2, [pc, #100]	; (800413c <HAL_DMA_IRQHandler+0x1ec>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x194>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_DMA_IRQHandler+0x1f0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d12f      	bne.n	8004144 <HAL_DMA_IRQHandler+0x1f4>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	e02e      	b.n	8004158 <HAL_DMA_IRQHandler+0x208>
 80040fa:	bf00      	nop
 80040fc:	24000004 	.word	0x24000004
 8004100:	1b4e81b5 	.word	0x1b4e81b5
 8004104:	40020010 	.word	0x40020010
 8004108:	40020028 	.word	0x40020028
 800410c:	40020040 	.word	0x40020040
 8004110:	40020058 	.word	0x40020058
 8004114:	40020070 	.word	0x40020070
 8004118:	40020088 	.word	0x40020088
 800411c:	400200a0 	.word	0x400200a0
 8004120:	400200b8 	.word	0x400200b8
 8004124:	40020410 	.word	0x40020410
 8004128:	40020428 	.word	0x40020428
 800412c:	40020440 	.word	0x40020440
 8004130:	40020458 	.word	0x40020458
 8004134:	40020470 	.word	0x40020470
 8004138:	40020488 	.word	0x40020488
 800413c:	400204a0 	.word	0x400204a0
 8004140:	400204b8 	.word	0x400204b8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0204 	bic.w	r2, r2, #4
 800416a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2208      	movs	r2, #8
 8004176:	409a      	lsls	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f043 0201 	orr.w	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d06e      	beq.n	800427c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a69      	ldr	r2, [pc, #420]	; (8004348 <HAL_DMA_IRQHandler+0x3f8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d04a      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a67      	ldr	r2, [pc, #412]	; (800434c <HAL_DMA_IRQHandler+0x3fc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d045      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a66      	ldr	r2, [pc, #408]	; (8004350 <HAL_DMA_IRQHandler+0x400>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d040      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a64      	ldr	r2, [pc, #400]	; (8004354 <HAL_DMA_IRQHandler+0x404>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d03b      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a63      	ldr	r2, [pc, #396]	; (8004358 <HAL_DMA_IRQHandler+0x408>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d036      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a61      	ldr	r2, [pc, #388]	; (800435c <HAL_DMA_IRQHandler+0x40c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d031      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a60      	ldr	r2, [pc, #384]	; (8004360 <HAL_DMA_IRQHandler+0x410>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d02c      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a5e      	ldr	r2, [pc, #376]	; (8004364 <HAL_DMA_IRQHandler+0x414>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d027      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a5d      	ldr	r2, [pc, #372]	; (8004368 <HAL_DMA_IRQHandler+0x418>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a5b      	ldr	r2, [pc, #364]	; (800436c <HAL_DMA_IRQHandler+0x41c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a5a      	ldr	r2, [pc, #360]	; (8004370 <HAL_DMA_IRQHandler+0x420>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a58      	ldr	r2, [pc, #352]	; (8004374 <HAL_DMA_IRQHandler+0x424>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a57      	ldr	r2, [pc, #348]	; (8004378 <HAL_DMA_IRQHandler+0x428>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a55      	ldr	r2, [pc, #340]	; (800437c <HAL_DMA_IRQHandler+0x42c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a54      	ldr	r2, [pc, #336]	; (8004380 <HAL_DMA_IRQHandler+0x430>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_DMA_IRQHandler+0x2ee>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a52      	ldr	r2, [pc, #328]	; (8004384 <HAL_DMA_IRQHandler+0x434>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d10a      	bne.n	8004254 <HAL_DMA_IRQHandler+0x304>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e003      	b.n	800425c <HAL_DMA_IRQHandler+0x30c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2201      	movs	r2, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f043 0202 	orr.w	r2, r3, #2
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2204      	movs	r2, #4
 8004286:	409a      	lsls	r2, r3
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 808f 	beq.w	80043b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <HAL_DMA_IRQHandler+0x3f8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d04a      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2a      	ldr	r2, [pc, #168]	; (800434c <HAL_DMA_IRQHandler+0x3fc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d045      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a29      	ldr	r2, [pc, #164]	; (8004350 <HAL_DMA_IRQHandler+0x400>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d040      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a27      	ldr	r2, [pc, #156]	; (8004354 <HAL_DMA_IRQHandler+0x404>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d03b      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a26      	ldr	r2, [pc, #152]	; (8004358 <HAL_DMA_IRQHandler+0x408>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d036      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a24      	ldr	r2, [pc, #144]	; (800435c <HAL_DMA_IRQHandler+0x40c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d031      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a23      	ldr	r2, [pc, #140]	; (8004360 <HAL_DMA_IRQHandler+0x410>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d02c      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a21      	ldr	r2, [pc, #132]	; (8004364 <HAL_DMA_IRQHandler+0x414>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d027      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a20      	ldr	r2, [pc, #128]	; (8004368 <HAL_DMA_IRQHandler+0x418>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d022      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1e      	ldr	r2, [pc, #120]	; (800436c <HAL_DMA_IRQHandler+0x41c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01d      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <HAL_DMA_IRQHandler+0x420>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d018      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <HAL_DMA_IRQHandler+0x424>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <HAL_DMA_IRQHandler+0x428>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_DMA_IRQHandler+0x42c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a17      	ldr	r2, [pc, #92]	; (8004380 <HAL_DMA_IRQHandler+0x430>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3e2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a15      	ldr	r2, [pc, #84]	; (8004384 <HAL_DMA_IRQHandler+0x434>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d12a      	bne.n	8004388 <HAL_DMA_IRQHandler+0x438>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e023      	b.n	8004390 <HAL_DMA_IRQHandler+0x440>
 8004348:	40020010 	.word	0x40020010
 800434c:	40020028 	.word	0x40020028
 8004350:	40020040 	.word	0x40020040
 8004354:	40020058 	.word	0x40020058
 8004358:	40020070 	.word	0x40020070
 800435c:	40020088 	.word	0x40020088
 8004360:	400200a0 	.word	0x400200a0
 8004364:	400200b8 	.word	0x400200b8
 8004368:	40020410 	.word	0x40020410
 800436c:	40020428 	.word	0x40020428
 8004370:	40020440 	.word	0x40020440
 8004374:	40020458 	.word	0x40020458
 8004378:	40020470 	.word	0x40020470
 800437c:	40020488 	.word	0x40020488
 8004380:	400204a0 	.word	0x400204a0
 8004384:	400204b8 	.word	0x400204b8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2300      	movs	r3, #0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	2204      	movs	r2, #4
 800439e:	409a      	lsls	r2, r3
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	f043 0204 	orr.w	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2210      	movs	r2, #16
 80043ba:	409a      	lsls	r2, r3
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80a6 	beq.w	8004512 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a85      	ldr	r2, [pc, #532]	; (80045e0 <HAL_DMA_IRQHandler+0x690>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d04a      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a83      	ldr	r2, [pc, #524]	; (80045e4 <HAL_DMA_IRQHandler+0x694>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d045      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a82      	ldr	r2, [pc, #520]	; (80045e8 <HAL_DMA_IRQHandler+0x698>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d040      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a80      	ldr	r2, [pc, #512]	; (80045ec <HAL_DMA_IRQHandler+0x69c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d03b      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7f      	ldr	r2, [pc, #508]	; (80045f0 <HAL_DMA_IRQHandler+0x6a0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d036      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7d      	ldr	r2, [pc, #500]	; (80045f4 <HAL_DMA_IRQHandler+0x6a4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d031      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7c      	ldr	r2, [pc, #496]	; (80045f8 <HAL_DMA_IRQHandler+0x6a8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d02c      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a7a      	ldr	r2, [pc, #488]	; (80045fc <HAL_DMA_IRQHandler+0x6ac>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d027      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a79      	ldr	r2, [pc, #484]	; (8004600 <HAL_DMA_IRQHandler+0x6b0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a77      	ldr	r2, [pc, #476]	; (8004604 <HAL_DMA_IRQHandler+0x6b4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01d      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a76      	ldr	r2, [pc, #472]	; (8004608 <HAL_DMA_IRQHandler+0x6b8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a74      	ldr	r2, [pc, #464]	; (800460c <HAL_DMA_IRQHandler+0x6bc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a73      	ldr	r2, [pc, #460]	; (8004610 <HAL_DMA_IRQHandler+0x6c0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a71      	ldr	r2, [pc, #452]	; (8004614 <HAL_DMA_IRQHandler+0x6c4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a70      	ldr	r2, [pc, #448]	; (8004618 <HAL_DMA_IRQHandler+0x6c8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_DMA_IRQHandler+0x516>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6e      	ldr	r2, [pc, #440]	; (800461c <HAL_DMA_IRQHandler+0x6cc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d10a      	bne.n	800447c <HAL_DMA_IRQHandler+0x52c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e009      	b.n	8004490 <HAL_DMA_IRQHandler+0x540>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d03e      	beq.n	8004512 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2210      	movs	r2, #16
 800449e:	409a      	lsls	r2, r3
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d018      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d108      	bne.n	80044d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d024      	beq.n	8004512 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
 80044d0:	e01f      	b.n	8004512 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01b      	beq.n	8004512 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
 80044e2:	e016      	b.n	8004512 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0208 	bic.w	r2, r2, #8
 8004500:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	2220      	movs	r2, #32
 800451c:	409a      	lsls	r2, r3
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8110 	beq.w	8004748 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <HAL_DMA_IRQHandler+0x690>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d04a      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <HAL_DMA_IRQHandler+0x694>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d045      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <HAL_DMA_IRQHandler+0x698>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d040      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a28      	ldr	r2, [pc, #160]	; (80045ec <HAL_DMA_IRQHandler+0x69c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d03b      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a26      	ldr	r2, [pc, #152]	; (80045f0 <HAL_DMA_IRQHandler+0x6a0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d036      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a25      	ldr	r2, [pc, #148]	; (80045f4 <HAL_DMA_IRQHandler+0x6a4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d031      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <HAL_DMA_IRQHandler+0x6a8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d02c      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a22      	ldr	r2, [pc, #136]	; (80045fc <HAL_DMA_IRQHandler+0x6ac>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d027      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a20      	ldr	r2, [pc, #128]	; (8004600 <HAL_DMA_IRQHandler+0x6b0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d022      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1f      	ldr	r2, [pc, #124]	; (8004604 <HAL_DMA_IRQHandler+0x6b4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d01d      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <HAL_DMA_IRQHandler+0x6b8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d018      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1c      	ldr	r2, [pc, #112]	; (800460c <HAL_DMA_IRQHandler+0x6bc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1a      	ldr	r2, [pc, #104]	; (8004610 <HAL_DMA_IRQHandler+0x6c0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00e      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a19      	ldr	r2, [pc, #100]	; (8004614 <HAL_DMA_IRQHandler+0x6c4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a17      	ldr	r2, [pc, #92]	; (8004618 <HAL_DMA_IRQHandler+0x6c8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x678>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a16      	ldr	r2, [pc, #88]	; (800461c <HAL_DMA_IRQHandler+0x6cc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d12b      	bne.n	8004620 <HAL_DMA_IRQHandler+0x6d0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e02a      	b.n	8004634 <HAL_DMA_IRQHandler+0x6e4>
 80045de:	bf00      	nop
 80045e0:	40020010 	.word	0x40020010
 80045e4:	40020028 	.word	0x40020028
 80045e8:	40020040 	.word	0x40020040
 80045ec:	40020058 	.word	0x40020058
 80045f0:	40020070 	.word	0x40020070
 80045f4:	40020088 	.word	0x40020088
 80045f8:	400200a0 	.word	0x400200a0
 80045fc:	400200b8 	.word	0x400200b8
 8004600:	40020410 	.word	0x40020410
 8004604:	40020428 	.word	0x40020428
 8004608:	40020440 	.word	0x40020440
 800460c:	40020458 	.word	0x40020458
 8004610:	40020470 	.word	0x40020470
 8004614:	40020488 	.word	0x40020488
 8004618:	400204a0 	.word	0x400204a0
 800461c:	400204b8 	.word	0x400204b8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8087 	beq.w	8004748 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2220      	movs	r2, #32
 8004644:	409a      	lsls	r2, r3
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b04      	cmp	r3, #4
 8004654:	d139      	bne.n	80046ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0216 	bic.w	r2, r2, #22
 8004664:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004674:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_DMA_IRQHandler+0x736>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0208 	bic.w	r2, r2, #8
 8004694:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	223f      	movs	r2, #63	; 0x3f
 80046a0:	409a      	lsls	r2, r3
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 834a 	beq.w	8004d54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
          }
          return;
 80046c8:	e344      	b.n	8004d54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d018      	beq.n	800470a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d108      	bne.n	80046f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d02c      	beq.n	8004748 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
 80046f6:	e027      	b.n	8004748 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d023      	beq.n	8004748 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
 8004708:	e01e      	b.n	8004748 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10f      	bne.n	8004738 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0210 	bic.w	r2, r2, #16
 8004726:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8306 	beq.w	8004d5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8088 	beq.w	8004870 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2204      	movs	r2, #4
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a7a      	ldr	r2, [pc, #488]	; (8004958 <HAL_DMA_IRQHandler+0xa08>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d04a      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a79      	ldr	r2, [pc, #484]	; (800495c <HAL_DMA_IRQHandler+0xa0c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d045      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a77      	ldr	r2, [pc, #476]	; (8004960 <HAL_DMA_IRQHandler+0xa10>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d040      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a76      	ldr	r2, [pc, #472]	; (8004964 <HAL_DMA_IRQHandler+0xa14>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d03b      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a74      	ldr	r2, [pc, #464]	; (8004968 <HAL_DMA_IRQHandler+0xa18>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d036      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a73      	ldr	r2, [pc, #460]	; (800496c <HAL_DMA_IRQHandler+0xa1c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d031      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a71      	ldr	r2, [pc, #452]	; (8004970 <HAL_DMA_IRQHandler+0xa20>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02c      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a70      	ldr	r2, [pc, #448]	; (8004974 <HAL_DMA_IRQHandler+0xa24>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d027      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6e      	ldr	r2, [pc, #440]	; (8004978 <HAL_DMA_IRQHandler+0xa28>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a6d      	ldr	r2, [pc, #436]	; (800497c <HAL_DMA_IRQHandler+0xa2c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d01d      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a6b      	ldr	r2, [pc, #428]	; (8004980 <HAL_DMA_IRQHandler+0xa30>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6a      	ldr	r2, [pc, #424]	; (8004984 <HAL_DMA_IRQHandler+0xa34>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a68      	ldr	r2, [pc, #416]	; (8004988 <HAL_DMA_IRQHandler+0xa38>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a67      	ldr	r2, [pc, #412]	; (800498c <HAL_DMA_IRQHandler+0xa3c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a65      	ldr	r2, [pc, #404]	; (8004990 <HAL_DMA_IRQHandler+0xa40>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_DMA_IRQHandler+0x8b8>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a64      	ldr	r2, [pc, #400]	; (8004994 <HAL_DMA_IRQHandler+0xa44>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <HAL_DMA_IRQHandler+0x8ca>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e007      	b.n	800482a <HAL_DMA_IRQHandler+0x8da>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3301      	adds	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004832:	429a      	cmp	r2, r3
 8004834:	d307      	bcc.n	8004846 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f2      	bne.n	800482a <HAL_DMA_IRQHandler+0x8da>
 8004844:	e000      	b.n	8004848 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004846:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2203      	movs	r2, #3
 800485a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800485e:	e003      	b.n	8004868 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8272 	beq.w	8004d5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
 8004882:	e26c      	b.n	8004d5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a43      	ldr	r2, [pc, #268]	; (8004998 <HAL_DMA_IRQHandler+0xa48>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d022      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x984>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a42      	ldr	r2, [pc, #264]	; (800499c <HAL_DMA_IRQHandler+0xa4c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d01d      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x984>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a40      	ldr	r2, [pc, #256]	; (80049a0 <HAL_DMA_IRQHandler+0xa50>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d018      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x984>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <HAL_DMA_IRQHandler+0xa54>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x984>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a3d      	ldr	r2, [pc, #244]	; (80049a8 <HAL_DMA_IRQHandler+0xa58>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x984>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3c      	ldr	r2, [pc, #240]	; (80049ac <HAL_DMA_IRQHandler+0xa5c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x984>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <HAL_DMA_IRQHandler+0xa60>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x984>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a39      	ldr	r2, [pc, #228]	; (80049b4 <HAL_DMA_IRQHandler+0xa64>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_DMA_IRQHandler+0x988>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_DMA_IRQHandler+0x98a>
 80048d8:	2300      	movs	r3, #0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 823f 	beq.w	8004d5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2204      	movs	r2, #4
 80048f2:	409a      	lsls	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80cd 	beq.w	8004a98 <HAL_DMA_IRQHandler+0xb48>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80c7 	beq.w	8004a98 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490e:	f003 031f 	and.w	r3, r3, #31
 8004912:	2204      	movs	r2, #4
 8004914:	409a      	lsls	r2, r3
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d049      	beq.n	80049b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8210 	beq.w	8004d58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004940:	e20a      	b.n	8004d58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8206 	beq.w	8004d58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004954:	e200      	b.n	8004d58 <HAL_DMA_IRQHandler+0xe08>
 8004956:	bf00      	nop
 8004958:	40020010 	.word	0x40020010
 800495c:	40020028 	.word	0x40020028
 8004960:	40020040 	.word	0x40020040
 8004964:	40020058 	.word	0x40020058
 8004968:	40020070 	.word	0x40020070
 800496c:	40020088 	.word	0x40020088
 8004970:	400200a0 	.word	0x400200a0
 8004974:	400200b8 	.word	0x400200b8
 8004978:	40020410 	.word	0x40020410
 800497c:	40020428 	.word	0x40020428
 8004980:	40020440 	.word	0x40020440
 8004984:	40020458 	.word	0x40020458
 8004988:	40020470 	.word	0x40020470
 800498c:	40020488 	.word	0x40020488
 8004990:	400204a0 	.word	0x400204a0
 8004994:	400204b8 	.word	0x400204b8
 8004998:	58025408 	.word	0x58025408
 800499c:	5802541c 	.word	0x5802541c
 80049a0:	58025430 	.word	0x58025430
 80049a4:	58025444 	.word	0x58025444
 80049a8:	58025458 	.word	0x58025458
 80049ac:	5802546c 	.word	0x5802546c
 80049b0:	58025480 	.word	0x58025480
 80049b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d160      	bne.n	8004a84 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7f      	ldr	r2, [pc, #508]	; (8004bc4 <HAL_DMA_IRQHandler+0xc74>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d04a      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a7d      	ldr	r2, [pc, #500]	; (8004bc8 <HAL_DMA_IRQHandler+0xc78>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d045      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a7c      	ldr	r2, [pc, #496]	; (8004bcc <HAL_DMA_IRQHandler+0xc7c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d040      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a7a      	ldr	r2, [pc, #488]	; (8004bd0 <HAL_DMA_IRQHandler+0xc80>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d03b      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a79      	ldr	r2, [pc, #484]	; (8004bd4 <HAL_DMA_IRQHandler+0xc84>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d036      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a77      	ldr	r2, [pc, #476]	; (8004bd8 <HAL_DMA_IRQHandler+0xc88>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d031      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a76      	ldr	r2, [pc, #472]	; (8004bdc <HAL_DMA_IRQHandler+0xc8c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d02c      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a74      	ldr	r2, [pc, #464]	; (8004be0 <HAL_DMA_IRQHandler+0xc90>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d027      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a73      	ldr	r2, [pc, #460]	; (8004be4 <HAL_DMA_IRQHandler+0xc94>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d022      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a71      	ldr	r2, [pc, #452]	; (8004be8 <HAL_DMA_IRQHandler+0xc98>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01d      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a70      	ldr	r2, [pc, #448]	; (8004bec <HAL_DMA_IRQHandler+0xc9c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a6e      	ldr	r2, [pc, #440]	; (8004bf0 <HAL_DMA_IRQHandler+0xca0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6d      	ldr	r2, [pc, #436]	; (8004bf4 <HAL_DMA_IRQHandler+0xca4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6b      	ldr	r2, [pc, #428]	; (8004bf8 <HAL_DMA_IRQHandler+0xca8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6a      	ldr	r2, [pc, #424]	; (8004bfc <HAL_DMA_IRQHandler+0xcac>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xb12>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a68      	ldr	r2, [pc, #416]	; (8004c00 <HAL_DMA_IRQHandler+0xcb0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d108      	bne.n	8004a74 <HAL_DMA_IRQHandler+0xb24>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0208 	bic.w	r2, r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e007      	b.n	8004a84 <HAL_DMA_IRQHandler+0xb34>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0204 	bic.w	r2, r2, #4
 8004a82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8165 	beq.w	8004d58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a96:	e15f      	b.n	8004d58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80c5 	beq.w	8004c38 <HAL_DMA_IRQHandler+0xce8>
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80bf 	beq.w	8004c38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d018      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 813a 	beq.w	8004d5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af0:	e134      	b.n	8004d5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8130 	beq.w	8004d5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b04:	e12a      	b.n	8004d5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 8089 	bne.w	8004c24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2b      	ldr	r2, [pc, #172]	; (8004bc4 <HAL_DMA_IRQHandler+0xc74>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d04a      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <HAL_DMA_IRQHandler+0xc78>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d045      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <HAL_DMA_IRQHandler+0xc7c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d040      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <HAL_DMA_IRQHandler+0xc80>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d03b      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a25      	ldr	r2, [pc, #148]	; (8004bd4 <HAL_DMA_IRQHandler+0xc84>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d036      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <HAL_DMA_IRQHandler+0xc88>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d031      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <HAL_DMA_IRQHandler+0xc8c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d02c      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <HAL_DMA_IRQHandler+0xc90>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d027      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <HAL_DMA_IRQHandler+0xc94>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d022      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <HAL_DMA_IRQHandler+0xc98>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01d      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <HAL_DMA_IRQHandler+0xc9c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d018      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <HAL_DMA_IRQHandler+0xca0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <HAL_DMA_IRQHandler+0xca4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00e      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <HAL_DMA_IRQHandler+0xca8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <HAL_DMA_IRQHandler+0xcac>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc62>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <HAL_DMA_IRQHandler+0xcb0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d128      	bne.n	8004c04 <HAL_DMA_IRQHandler+0xcb4>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0214 	bic.w	r2, r2, #20
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e027      	b.n	8004c14 <HAL_DMA_IRQHandler+0xcc4>
 8004bc4:	40020010 	.word	0x40020010
 8004bc8:	40020028 	.word	0x40020028
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020058 	.word	0x40020058
 8004bd4:	40020070 	.word	0x40020070
 8004bd8:	40020088 	.word	0x40020088
 8004bdc:	400200a0 	.word	0x400200a0
 8004be0:	400200b8 	.word	0x400200b8
 8004be4:	40020410 	.word	0x40020410
 8004be8:	40020428 	.word	0x40020428
 8004bec:	40020440 	.word	0x40020440
 8004bf0:	40020458 	.word	0x40020458
 8004bf4:	40020470 	.word	0x40020470
 8004bf8:	40020488 	.word	0x40020488
 8004bfc:	400204a0 	.word	0x400204a0
 8004c00:	400204b8 	.word	0x400204b8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 020a 	bic.w	r2, r2, #10
 8004c12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8097 	beq.w	8004d5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c36:	e091      	b.n	8004d5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	2208      	movs	r2, #8
 8004c42:	409a      	lsls	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8088 	beq.w	8004d5e <HAL_DMA_IRQHandler+0xe0e>
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8082 	beq.w	8004d5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a41      	ldr	r2, [pc, #260]	; (8004d64 <HAL_DMA_IRQHandler+0xe14>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d04a      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3f      	ldr	r2, [pc, #252]	; (8004d68 <HAL_DMA_IRQHandler+0xe18>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d045      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a3e      	ldr	r2, [pc, #248]	; (8004d6c <HAL_DMA_IRQHandler+0xe1c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d040      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3c      	ldr	r2, [pc, #240]	; (8004d70 <HAL_DMA_IRQHandler+0xe20>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d03b      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3b      	ldr	r2, [pc, #236]	; (8004d74 <HAL_DMA_IRQHandler+0xe24>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d036      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a39      	ldr	r2, [pc, #228]	; (8004d78 <HAL_DMA_IRQHandler+0xe28>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d031      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a38      	ldr	r2, [pc, #224]	; (8004d7c <HAL_DMA_IRQHandler+0xe2c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d02c      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a36      	ldr	r2, [pc, #216]	; (8004d80 <HAL_DMA_IRQHandler+0xe30>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d027      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <HAL_DMA_IRQHandler+0xe34>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d022      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a33      	ldr	r2, [pc, #204]	; (8004d88 <HAL_DMA_IRQHandler+0xe38>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01d      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a32      	ldr	r2, [pc, #200]	; (8004d8c <HAL_DMA_IRQHandler+0xe3c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d018      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a30      	ldr	r2, [pc, #192]	; (8004d90 <HAL_DMA_IRQHandler+0xe40>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2f      	ldr	r2, [pc, #188]	; (8004d94 <HAL_DMA_IRQHandler+0xe44>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <HAL_DMA_IRQHandler+0xe48>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <HAL_DMA_IRQHandler+0xe4c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xdaa>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <HAL_DMA_IRQHandler+0xe50>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d108      	bne.n	8004d0c <HAL_DMA_IRQHandler+0xdbc>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 021c 	bic.w	r2, r2, #28
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e007      	b.n	8004d1c <HAL_DMA_IRQHandler+0xdcc>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 020e 	bic.w	r2, r2, #14
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	2201      	movs	r2, #1
 8004d26:	409a      	lsls	r2, r3
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4798      	blx	r3
 8004d52:	e004      	b.n	8004d5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004d54:	bf00      	nop
 8004d56:	e002      	b.n	8004d5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d58:	bf00      	nop
 8004d5a:	e000      	b.n	8004d5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d5e:	3728      	adds	r7, #40	; 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40020010 	.word	0x40020010
 8004d68:	40020028 	.word	0x40020028
 8004d6c:	40020040 	.word	0x40020040
 8004d70:	40020058 	.word	0x40020058
 8004d74:	40020070 	.word	0x40020070
 8004d78:	40020088 	.word	0x40020088
 8004d7c:	400200a0 	.word	0x400200a0
 8004d80:	400200b8 	.word	0x400200b8
 8004d84:	40020410 	.word	0x40020410
 8004d88:	40020428 	.word	0x40020428
 8004d8c:	40020440 	.word	0x40020440
 8004d90:	40020458 	.word	0x40020458
 8004d94:	40020470 	.word	0x40020470
 8004d98:	40020488 	.word	0x40020488
 8004d9c:	400204a0 	.word	0x400204a0
 8004da0:	400204b8 	.word	0x400204b8

08004da4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db2:	b2db      	uxtb	r3, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a7f      	ldr	r2, [pc, #508]	; (8004fdc <DMA_SetConfig+0x21c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d072      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a7d      	ldr	r2, [pc, #500]	; (8004fe0 <DMA_SetConfig+0x220>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d06d      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a7c      	ldr	r2, [pc, #496]	; (8004fe4 <DMA_SetConfig+0x224>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d068      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a7a      	ldr	r2, [pc, #488]	; (8004fe8 <DMA_SetConfig+0x228>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d063      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a79      	ldr	r2, [pc, #484]	; (8004fec <DMA_SetConfig+0x22c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d05e      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a77      	ldr	r2, [pc, #476]	; (8004ff0 <DMA_SetConfig+0x230>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d059      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a76      	ldr	r2, [pc, #472]	; (8004ff4 <DMA_SetConfig+0x234>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d054      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a74      	ldr	r2, [pc, #464]	; (8004ff8 <DMA_SetConfig+0x238>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04f      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a73      	ldr	r2, [pc, #460]	; (8004ffc <DMA_SetConfig+0x23c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d04a      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a71      	ldr	r2, [pc, #452]	; (8005000 <DMA_SetConfig+0x240>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d045      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a70      	ldr	r2, [pc, #448]	; (8005004 <DMA_SetConfig+0x244>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d040      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a6e      	ldr	r2, [pc, #440]	; (8005008 <DMA_SetConfig+0x248>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d03b      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6d      	ldr	r2, [pc, #436]	; (800500c <DMA_SetConfig+0x24c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d036      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6b      	ldr	r2, [pc, #428]	; (8005010 <DMA_SetConfig+0x250>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d031      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6a      	ldr	r2, [pc, #424]	; (8005014 <DMA_SetConfig+0x254>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d02c      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a68      	ldr	r2, [pc, #416]	; (8005018 <DMA_SetConfig+0x258>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d027      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a67      	ldr	r2, [pc, #412]	; (800501c <DMA_SetConfig+0x25c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d022      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a65      	ldr	r2, [pc, #404]	; (8005020 <DMA_SetConfig+0x260>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a64      	ldr	r2, [pc, #400]	; (8005024 <DMA_SetConfig+0x264>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d018      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a62      	ldr	r2, [pc, #392]	; (8005028 <DMA_SetConfig+0x268>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a61      	ldr	r2, [pc, #388]	; (800502c <DMA_SetConfig+0x26c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5f      	ldr	r2, [pc, #380]	; (8005030 <DMA_SetConfig+0x270>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a5e      	ldr	r2, [pc, #376]	; (8005034 <DMA_SetConfig+0x274>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <DMA_SetConfig+0x10a>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5c      	ldr	r2, [pc, #368]	; (8005038 <DMA_SetConfig+0x278>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d101      	bne.n	8004ece <DMA_SetConfig+0x10e>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <DMA_SetConfig+0x110>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00d      	beq.n	8004ef0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004edc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004eee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a39      	ldr	r2, [pc, #228]	; (8004fdc <DMA_SetConfig+0x21c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d04a      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a38      	ldr	r2, [pc, #224]	; (8004fe0 <DMA_SetConfig+0x220>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d045      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a36      	ldr	r2, [pc, #216]	; (8004fe4 <DMA_SetConfig+0x224>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d040      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a35      	ldr	r2, [pc, #212]	; (8004fe8 <DMA_SetConfig+0x228>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d03b      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a33      	ldr	r2, [pc, #204]	; (8004fec <DMA_SetConfig+0x22c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d036      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a32      	ldr	r2, [pc, #200]	; (8004ff0 <DMA_SetConfig+0x230>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d031      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a30      	ldr	r2, [pc, #192]	; (8004ff4 <DMA_SetConfig+0x234>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02c      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2f      	ldr	r2, [pc, #188]	; (8004ff8 <DMA_SetConfig+0x238>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d027      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2d      	ldr	r2, [pc, #180]	; (8004ffc <DMA_SetConfig+0x23c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d022      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <DMA_SetConfig+0x240>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01d      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <DMA_SetConfig+0x244>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a29      	ldr	r2, [pc, #164]	; (8005008 <DMA_SetConfig+0x248>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <DMA_SetConfig+0x24c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a26      	ldr	r2, [pc, #152]	; (8005010 <DMA_SetConfig+0x250>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a24      	ldr	r2, [pc, #144]	; (8005014 <DMA_SetConfig+0x254>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <DMA_SetConfig+0x1d0>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a23      	ldr	r2, [pc, #140]	; (8005018 <DMA_SetConfig+0x258>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d101      	bne.n	8004f94 <DMA_SetConfig+0x1d4>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <DMA_SetConfig+0x1d6>
 8004f94:	2300      	movs	r3, #0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d059      	beq.n	800504e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	223f      	movs	r2, #63	; 0x3f
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fb8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d138      	bne.n	800503c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004fda:	e086      	b.n	80050ea <DMA_SetConfig+0x32a>
 8004fdc:	40020010 	.word	0x40020010
 8004fe0:	40020028 	.word	0x40020028
 8004fe4:	40020040 	.word	0x40020040
 8004fe8:	40020058 	.word	0x40020058
 8004fec:	40020070 	.word	0x40020070
 8004ff0:	40020088 	.word	0x40020088
 8004ff4:	400200a0 	.word	0x400200a0
 8004ff8:	400200b8 	.word	0x400200b8
 8004ffc:	40020410 	.word	0x40020410
 8005000:	40020428 	.word	0x40020428
 8005004:	40020440 	.word	0x40020440
 8005008:	40020458 	.word	0x40020458
 800500c:	40020470 	.word	0x40020470
 8005010:	40020488 	.word	0x40020488
 8005014:	400204a0 	.word	0x400204a0
 8005018:	400204b8 	.word	0x400204b8
 800501c:	58025408 	.word	0x58025408
 8005020:	5802541c 	.word	0x5802541c
 8005024:	58025430 	.word	0x58025430
 8005028:	58025444 	.word	0x58025444
 800502c:	58025458 	.word	0x58025458
 8005030:	5802546c 	.word	0x5802546c
 8005034:	58025480 	.word	0x58025480
 8005038:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]
}
 800504c:	e04d      	b.n	80050ea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <DMA_SetConfig+0x338>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <DMA_SetConfig+0x2de>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a27      	ldr	r2, [pc, #156]	; (80050fc <DMA_SetConfig+0x33c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d01d      	beq.n	800509e <DMA_SetConfig+0x2de>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a26      	ldr	r2, [pc, #152]	; (8005100 <DMA_SetConfig+0x340>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <DMA_SetConfig+0x2de>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a24      	ldr	r2, [pc, #144]	; (8005104 <DMA_SetConfig+0x344>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <DMA_SetConfig+0x2de>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a23      	ldr	r2, [pc, #140]	; (8005108 <DMA_SetConfig+0x348>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <DMA_SetConfig+0x2de>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a21      	ldr	r2, [pc, #132]	; (800510c <DMA_SetConfig+0x34c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <DMA_SetConfig+0x2de>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a20      	ldr	r2, [pc, #128]	; (8005110 <DMA_SetConfig+0x350>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <DMA_SetConfig+0x2de>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <DMA_SetConfig+0x354>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d101      	bne.n	80050a2 <DMA_SetConfig+0x2e2>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <DMA_SetConfig+0x2e4>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d020      	beq.n	80050ea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	2201      	movs	r2, #1
 80050b2:	409a      	lsls	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d108      	bne.n	80050da <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	60da      	str	r2, [r3, #12]
}
 80050d8:	e007      	b.n	80050ea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	60da      	str	r2, [r3, #12]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	58025408 	.word	0x58025408
 80050fc:	5802541c 	.word	0x5802541c
 8005100:	58025430 	.word	0x58025430
 8005104:	58025444 	.word	0x58025444
 8005108:	58025458 	.word	0x58025458
 800510c:	5802546c 	.word	0x5802546c
 8005110:	58025480 	.word	0x58025480
 8005114:	58025494 	.word	0x58025494

08005118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a42      	ldr	r2, [pc, #264]	; (8005230 <DMA_CalcBaseAndBitshift+0x118>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d04a      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a41      	ldr	r2, [pc, #260]	; (8005234 <DMA_CalcBaseAndBitshift+0x11c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d045      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a3f      	ldr	r2, [pc, #252]	; (8005238 <DMA_CalcBaseAndBitshift+0x120>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d040      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a3e      	ldr	r2, [pc, #248]	; (800523c <DMA_CalcBaseAndBitshift+0x124>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d03b      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a3c      	ldr	r2, [pc, #240]	; (8005240 <DMA_CalcBaseAndBitshift+0x128>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d036      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <DMA_CalcBaseAndBitshift+0x12c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d031      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a39      	ldr	r2, [pc, #228]	; (8005248 <DMA_CalcBaseAndBitshift+0x130>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02c      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a38      	ldr	r2, [pc, #224]	; (800524c <DMA_CalcBaseAndBitshift+0x134>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d027      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a36      	ldr	r2, [pc, #216]	; (8005250 <DMA_CalcBaseAndBitshift+0x138>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a35      	ldr	r2, [pc, #212]	; (8005254 <DMA_CalcBaseAndBitshift+0x13c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a33      	ldr	r2, [pc, #204]	; (8005258 <DMA_CalcBaseAndBitshift+0x140>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a32      	ldr	r2, [pc, #200]	; (800525c <DMA_CalcBaseAndBitshift+0x144>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a30      	ldr	r2, [pc, #192]	; (8005260 <DMA_CalcBaseAndBitshift+0x148>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2f      	ldr	r2, [pc, #188]	; (8005264 <DMA_CalcBaseAndBitshift+0x14c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2d      	ldr	r2, [pc, #180]	; (8005268 <DMA_CalcBaseAndBitshift+0x150>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <DMA_CalcBaseAndBitshift+0xa8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <DMA_CalcBaseAndBitshift+0x154>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <DMA_CalcBaseAndBitshift+0xac>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <DMA_CalcBaseAndBitshift+0xae>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d024      	beq.n	8005214 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	3b10      	subs	r3, #16
 80051d2:	4a27      	ldr	r2, [pc, #156]	; (8005270 <DMA_CalcBaseAndBitshift+0x158>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	4a24      	ldr	r2, [pc, #144]	; (8005274 <DMA_CalcBaseAndBitshift+0x15c>)
 80051e4:	5cd3      	ldrb	r3, [r2, r3]
 80051e6:	461a      	mov	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d908      	bls.n	8005204 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	4b1f      	ldr	r3, [pc, #124]	; (8005278 <DMA_CalcBaseAndBitshift+0x160>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	659a      	str	r2, [r3, #88]	; 0x58
 8005202:	e00d      	b.n	8005220 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <DMA_CalcBaseAndBitshift+0x160>)
 800520c:	4013      	ands	r3, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6593      	str	r3, [r2, #88]	; 0x58
 8005212:	e005      	b.n	8005220 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	40020010 	.word	0x40020010
 8005234:	40020028 	.word	0x40020028
 8005238:	40020040 	.word	0x40020040
 800523c:	40020058 	.word	0x40020058
 8005240:	40020070 	.word	0x40020070
 8005244:	40020088 	.word	0x40020088
 8005248:	400200a0 	.word	0x400200a0
 800524c:	400200b8 	.word	0x400200b8
 8005250:	40020410 	.word	0x40020410
 8005254:	40020428 	.word	0x40020428
 8005258:	40020440 	.word	0x40020440
 800525c:	40020458 	.word	0x40020458
 8005260:	40020470 	.word	0x40020470
 8005264:	40020488 	.word	0x40020488
 8005268:	400204a0 	.word	0x400204a0
 800526c:	400204b8 	.word	0x400204b8
 8005270:	aaaaaaab 	.word	0xaaaaaaab
 8005274:	0800b608 	.word	0x0800b608
 8005278:	fffffc00 	.word	0xfffffc00

0800527c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d120      	bne.n	80052d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	2b03      	cmp	r3, #3
 8005296:	d858      	bhi.n	800534a <DMA_CheckFifoParam+0xce>
 8005298:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <DMA_CheckFifoParam+0x24>)
 800529a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529e:	bf00      	nop
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052c3 	.word	0x080052c3
 80052a8:	080052b1 	.word	0x080052b1
 80052ac:	0800534b 	.word	0x0800534b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d048      	beq.n	800534e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052c0:	e045      	b.n	800534e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052ca:	d142      	bne.n	8005352 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052d0:	e03f      	b.n	8005352 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052da:	d123      	bne.n	8005324 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d838      	bhi.n	8005356 <DMA_CheckFifoParam+0xda>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <DMA_CheckFifoParam+0x70>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	080052fd 	.word	0x080052fd
 80052f0:	08005303 	.word	0x08005303
 80052f4:	080052fd 	.word	0x080052fd
 80052f8:	08005315 	.word	0x08005315
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
        break;
 8005300:	e030      	b.n	8005364 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d025      	beq.n	800535a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005312:	e022      	b.n	800535a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800531c:	d11f      	bne.n	800535e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005322:	e01c      	b.n	800535e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	2b02      	cmp	r3, #2
 800532a:	d902      	bls.n	8005332 <DMA_CheckFifoParam+0xb6>
 800532c:	2b03      	cmp	r3, #3
 800532e:	d003      	beq.n	8005338 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005330:	e018      	b.n	8005364 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
        break;
 8005336:	e015      	b.n	8005364 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00e      	beq.n	8005362 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
    break;
 8005348:	e00b      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
        break;
 800534a:	bf00      	nop
 800534c:	e00a      	b.n	8005364 <DMA_CheckFifoParam+0xe8>
        break;
 800534e:	bf00      	nop
 8005350:	e008      	b.n	8005364 <DMA_CheckFifoParam+0xe8>
        break;
 8005352:	bf00      	nop
 8005354:	e006      	b.n	8005364 <DMA_CheckFifoParam+0xe8>
        break;
 8005356:	bf00      	nop
 8005358:	e004      	b.n	8005364 <DMA_CheckFifoParam+0xe8>
        break;
 800535a:	bf00      	nop
 800535c:	e002      	b.n	8005364 <DMA_CheckFifoParam+0xe8>
        break;
 800535e:	bf00      	nop
 8005360:	e000      	b.n	8005364 <DMA_CheckFifoParam+0xe8>
    break;
 8005362:	bf00      	nop
    }
  }

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop

08005374 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a38      	ldr	r2, [pc, #224]	; (8005468 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d022      	beq.n	80053d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a36      	ldr	r2, [pc, #216]	; (800546c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01d      	beq.n	80053d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a35      	ldr	r2, [pc, #212]	; (8005470 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a33      	ldr	r2, [pc, #204]	; (8005474 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a32      	ldr	r2, [pc, #200]	; (8005478 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a30      	ldr	r2, [pc, #192]	; (800547c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2d      	ldr	r2, [pc, #180]	; (8005484 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01a      	beq.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	3b08      	subs	r3, #8
 80053e4:	4a28      	ldr	r2, [pc, #160]	; (8005488 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	091b      	lsrs	r3, r3, #4
 80053ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4b26      	ldr	r3, [pc, #152]	; (800548c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	461a      	mov	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a24      	ldr	r2, [pc, #144]	; (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005400:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	2201      	movs	r2, #1
 800540a:	409a      	lsls	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005410:	e024      	b.n	800545c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	3b10      	subs	r3, #16
 800541a:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d806      	bhi.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4a1b      	ldr	r2, [pc, #108]	; (800549c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d902      	bls.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3308      	adds	r3, #8
 8005438:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	461a      	mov	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800544c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	2201      	movs	r2, #1
 8005456:	409a      	lsls	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	58025408 	.word	0x58025408
 800546c:	5802541c 	.word	0x5802541c
 8005470:	58025430 	.word	0x58025430
 8005474:	58025444 	.word	0x58025444
 8005478:	58025458 	.word	0x58025458
 800547c:	5802546c 	.word	0x5802546c
 8005480:	58025480 	.word	0x58025480
 8005484:	58025494 	.word	0x58025494
 8005488:	cccccccd 	.word	0xcccccccd
 800548c:	16009600 	.word	0x16009600
 8005490:	58025880 	.word	0x58025880
 8005494:	aaaaaaab 	.word	0xaaaaaaab
 8005498:	400204b8 	.word	0x400204b8
 800549c:	4002040f 	.word	0x4002040f
 80054a0:	10008200 	.word	0x10008200
 80054a4:	40020880 	.word	0x40020880

080054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d04a      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d847      	bhi.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a25      	ldr	r2, [pc, #148]	; (8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d022      	beq.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a24      	ldr	r2, [pc, #144]	; (8005564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d01d      	beq.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a22      	ldr	r2, [pc, #136]	; (8005568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a21      	ldr	r2, [pc, #132]	; (800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1b      	ldr	r2, [pc, #108]	; (800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d101      	bne.n	8005518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005518:	2300      	movs	r3, #0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	461a      	mov	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a15      	ldr	r2, [pc, #84]	; (8005584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005530:	671a      	str	r2, [r3, #112]	; 0x70
 8005532:	e009      	b.n	8005548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005546:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	2201      	movs	r2, #1
 800554e:	409a      	lsls	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	58025408 	.word	0x58025408
 8005564:	5802541c 	.word	0x5802541c
 8005568:	58025430 	.word	0x58025430
 800556c:	58025444 	.word	0x58025444
 8005570:	58025458 	.word	0x58025458
 8005574:	5802546c 	.word	0x5802546c
 8005578:	58025480 	.word	0x58025480
 800557c:	58025494 	.word	0x58025494
 8005580:	1600963f 	.word	0x1600963f
 8005584:	58025940 	.word	0x58025940
 8005588:	1000823f 	.word	0x1000823f
 800558c:	40020940 	.word	0x40020940

08005590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800559e:	4b89      	ldr	r3, [pc, #548]	; (80057c4 <HAL_GPIO_Init+0x234>)
 80055a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055a2:	e194      	b.n	80058ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8186 	beq.w	80058c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d005      	beq.n	80055d4 <HAL_GPIO_Init+0x44>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d130      	bne.n	8005636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	2203      	movs	r2, #3
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800560a:	2201      	movs	r2, #1
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	f003 0201 	and.w	r2, r3, #1
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b03      	cmp	r3, #3
 8005640:	d017      	beq.n	8005672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	2203      	movs	r2, #3
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d123      	bne.n	80056c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	08da      	lsrs	r2, r3, #3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3208      	adds	r2, #8
 8005686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	220f      	movs	r2, #15
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	08da      	lsrs	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3208      	adds	r2, #8
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	2203      	movs	r2, #3
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4013      	ands	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f003 0203 	and.w	r2, r3, #3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80e0 	beq.w	80058c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005708:	4b2f      	ldr	r3, [pc, #188]	; (80057c8 <HAL_GPIO_Init+0x238>)
 800570a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800570e:	4a2e      	ldr	r2, [pc, #184]	; (80057c8 <HAL_GPIO_Init+0x238>)
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005718:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <HAL_GPIO_Init+0x238>)
 800571a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005726:	4a29      	ldr	r2, [pc, #164]	; (80057cc <HAL_GPIO_Init+0x23c>)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	089b      	lsrs	r3, r3, #2
 800572c:	3302      	adds	r3, #2
 800572e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	220f      	movs	r2, #15
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4013      	ands	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a20      	ldr	r2, [pc, #128]	; (80057d0 <HAL_GPIO_Init+0x240>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d052      	beq.n	80057f8 <HAL_GPIO_Init+0x268>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <HAL_GPIO_Init+0x244>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d031      	beq.n	80057be <HAL_GPIO_Init+0x22e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <HAL_GPIO_Init+0x248>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d02b      	beq.n	80057ba <HAL_GPIO_Init+0x22a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1d      	ldr	r2, [pc, #116]	; (80057dc <HAL_GPIO_Init+0x24c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d025      	beq.n	80057b6 <HAL_GPIO_Init+0x226>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1c      	ldr	r2, [pc, #112]	; (80057e0 <HAL_GPIO_Init+0x250>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01f      	beq.n	80057b2 <HAL_GPIO_Init+0x222>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <HAL_GPIO_Init+0x254>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d019      	beq.n	80057ae <HAL_GPIO_Init+0x21e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1a      	ldr	r2, [pc, #104]	; (80057e8 <HAL_GPIO_Init+0x258>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <HAL_GPIO_Init+0x21a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a19      	ldr	r2, [pc, #100]	; (80057ec <HAL_GPIO_Init+0x25c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00d      	beq.n	80057a6 <HAL_GPIO_Init+0x216>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <HAL_GPIO_Init+0x260>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <HAL_GPIO_Init+0x212>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a17      	ldr	r2, [pc, #92]	; (80057f4 <HAL_GPIO_Init+0x264>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d101      	bne.n	800579e <HAL_GPIO_Init+0x20e>
 800579a:	2309      	movs	r3, #9
 800579c:	e02d      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 800579e:	230a      	movs	r3, #10
 80057a0:	e02b      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057a2:	2308      	movs	r3, #8
 80057a4:	e029      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057a6:	2307      	movs	r3, #7
 80057a8:	e027      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057aa:	2306      	movs	r3, #6
 80057ac:	e025      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057ae:	2305      	movs	r3, #5
 80057b0:	e023      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057b2:	2304      	movs	r3, #4
 80057b4:	e021      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057b6:	2303      	movs	r3, #3
 80057b8:	e01f      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e01d      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057be:	2301      	movs	r3, #1
 80057c0:	e01b      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057c2:	bf00      	nop
 80057c4:	58000080 	.word	0x58000080
 80057c8:	58024400 	.word	0x58024400
 80057cc:	58000400 	.word	0x58000400
 80057d0:	58020000 	.word	0x58020000
 80057d4:	58020400 	.word	0x58020400
 80057d8:	58020800 	.word	0x58020800
 80057dc:	58020c00 	.word	0x58020c00
 80057e0:	58021000 	.word	0x58021000
 80057e4:	58021400 	.word	0x58021400
 80057e8:	58021800 	.word	0x58021800
 80057ec:	58021c00 	.word	0x58021c00
 80057f0:	58022000 	.word	0x58022000
 80057f4:	58022400 	.word	0x58022400
 80057f8:	2300      	movs	r3, #0
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	f002 0203 	and.w	r2, r2, #3
 8005800:	0092      	lsls	r2, r2, #2
 8005802:	4093      	lsls	r3, r2
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4313      	orrs	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800580a:	4938      	ldr	r1, [pc, #224]	; (80058ec <HAL_GPIO_Init+0x35c>)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	089b      	lsrs	r3, r3, #2
 8005810:	3302      	adds	r3, #2
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	43db      	mvns	r3, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4013      	ands	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800583e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	43db      	mvns	r3, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4013      	ands	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800586c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f47f ae63 	bne.w	80055a4 <HAL_GPIO_Init+0x14>
  }
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	3724      	adds	r7, #36	; 0x24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	58000400 	.word	0x58000400

080058f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	807b      	strh	r3, [r7, #2]
 80058fc:	4613      	mov	r3, r2
 80058fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005900:	787b      	ldrb	r3, [r7, #1]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005906:	887a      	ldrh	r2, [r7, #2]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800590c:	e003      	b.n	8005916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800590e:	887b      	ldrh	r3, [r7, #2]
 8005910:	041a      	lsls	r2, r3, #16
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	619a      	str	r2, [r3, #24]
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005934:	887a      	ldrh	r2, [r7, #2]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4013      	ands	r3, r2
 800593a:	041a      	lsls	r2, r3, #16
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	43d9      	mvns	r1, r3
 8005940:	887b      	ldrh	r3, [r7, #2]
 8005942:	400b      	ands	r3, r1
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	619a      	str	r2, [r3, #24]
}
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e07f      	b.n	8005a6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb f9ee 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2224      	movs	r2, #36	; 0x24
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d107      	bne.n	80059d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	e006      	b.n	80059e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d104      	bne.n	80059f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <HAL_I2C_Init+0x11c>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69d9      	ldr	r1, [r3, #28]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	02008000 	.word	0x02008000

08005a78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	461a      	mov	r2, r3
 8005a84:	460b      	mov	r3, r1
 8005a86:	817b      	strh	r3, [r7, #10]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	f040 80da 	bne.w	8005c4e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_I2C_Master_Transmit+0x30>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e0d3      	b.n	8005c50 <HAL_I2C_Master_Transmit+0x1d8>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fb fb8a 	bl	80011c8 <HAL_GetTick>
 8005ab4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	2319      	movs	r3, #25
 8005abc:	2201      	movs	r2, #1
 8005abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fff3 	bl	8006aae <I2C_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e0be      	b.n	8005c50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2221      	movs	r2, #33	; 0x21
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2210      	movs	r2, #16
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	893a      	ldrh	r2, [r7, #8]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2bff      	cmp	r3, #255	; 0xff
 8005b02:	d90e      	bls.n	8005b22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	22ff      	movs	r2, #255	; 0xff
 8005b08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	8979      	ldrh	r1, [r7, #10]
 8005b12:	4b51      	ldr	r3, [pc, #324]	; (8005c58 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f001 fa02 	bl	8006f24 <I2C_TransferConfig>
 8005b20:	e06c      	b.n	8005bfc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	8979      	ldrh	r1, [r7, #10]
 8005b34:	4b48      	ldr	r3, [pc, #288]	; (8005c58 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f001 f9f1 	bl	8006f24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b42:	e05b      	b.n	8005bfc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	6a39      	ldr	r1, [r7, #32]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 ffff 	bl	8006b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e07b      	b.n	8005c50 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d034      	beq.n	8005bfc <HAL_I2C_Master_Transmit+0x184>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d130      	bne.n	8005bfc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2180      	movs	r1, #128	; 0x80
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 ff82 	bl	8006aae <I2C_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e04d      	b.n	8005c50 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2bff      	cmp	r3, #255	; 0xff
 8005bbc:	d90e      	bls.n	8005bdc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	22ff      	movs	r2, #255	; 0xff
 8005bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	8979      	ldrh	r1, [r7, #10]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f001 f9a5 	bl	8006f24 <I2C_TransferConfig>
 8005bda:	e00f      	b.n	8005bfc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	8979      	ldrh	r1, [r7, #10]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f001 f994 	bl	8006f24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d19e      	bne.n	8005b44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	6a39      	ldr	r1, [r7, #32]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 ffe5 	bl	8006bda <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e01a      	b.n	8005c50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_I2C_Master_Transmit+0x1e4>)
 8005c2e:	400b      	ands	r3, r1
 8005c30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	80002000 	.word	0x80002000
 8005c5c:	fe00e800 	.word	0xfe00e800

08005c60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	817b      	strh	r3, [r7, #10]
 8005c70:	4613      	mov	r3, r2
 8005c72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	f040 80db 	bne.w	8005e38 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_I2C_Master_Receive+0x30>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e0d4      	b.n	8005e3a <HAL_I2C_Master_Receive+0x1da>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c98:	f7fb fa96 	bl	80011c8 <HAL_GetTick>
 8005c9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	2319      	movs	r3, #25
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 feff 	bl	8006aae <I2C_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e0bf      	b.n	8005e3a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2222      	movs	r2, #34	; 0x22
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2210      	movs	r2, #16
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	893a      	ldrh	r2, [r7, #8]
 8005cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2bff      	cmp	r3, #255	; 0xff
 8005cea:	d90e      	bls.n	8005d0a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	22ff      	movs	r2, #255	; 0xff
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	8979      	ldrh	r1, [r7, #10]
 8005cfa:	4b52      	ldr	r3, [pc, #328]	; (8005e44 <HAL_I2C_Master_Receive+0x1e4>)
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f001 f90e 	bl	8006f24 <I2C_TransferConfig>
 8005d08:	e06d      	b.n	8005de6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	4b49      	ldr	r3, [pc, #292]	; (8005e44 <HAL_I2C_Master_Receive+0x1e4>)
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f001 f8fd 	bl	8006f24 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d2a:	e05c      	b.n	8005de6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	6a39      	ldr	r1, [r7, #32]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 ff95 	bl	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e07c      	b.n	8005e3a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d034      	beq.n	8005de6 <HAL_I2C_Master_Receive+0x186>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d130      	bne.n	8005de6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2180      	movs	r1, #128	; 0x80
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 fe8d 	bl	8006aae <I2C_WaitOnFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e04d      	b.n	8005e3a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2bff      	cmp	r3, #255	; 0xff
 8005da6:	d90e      	bls.n	8005dc6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	22ff      	movs	r2, #255	; 0xff
 8005dac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	8979      	ldrh	r1, [r7, #10]
 8005db6:	2300      	movs	r3, #0
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f001 f8b0 	bl	8006f24 <I2C_TransferConfig>
 8005dc4:	e00f      	b.n	8005de6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	8979      	ldrh	r1, [r7, #10]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f001 f89f 	bl	8006f24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d19d      	bne.n	8005d2c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	6a39      	ldr	r1, [r7, #32]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fef0 	bl	8006bda <I2C_WaitOnSTOPFlagUntilTimeout>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e01a      	b.n	8005e3a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <HAL_I2C_Master_Receive+0x1e8>)
 8005e18:	400b      	ands	r3, r1
 8005e1a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e000      	b.n	8005e3a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	80002400 	.word	0x80002400
 8005e48:	fe00e800 	.word	0xfe00e800

08005e4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	68f9      	ldr	r1, [r7, #12]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
  }
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00f      	beq.n	8005ec2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb0:	f043 0201 	orr.w	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ec0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00f      	beq.n	8005eec <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f043 0208 	orr.w	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f04:	f043 0202 	orr.w	r2, r3, #2
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f14:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f003 030b 	and.w	r3, r3, #11
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fc67 	bl	80067fc <I2C_ITError>
  }
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70fb      	strb	r3, [r7, #3]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <I2C_Slave_ISR_IT+0x24>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e0e1      	b.n	800619e <I2C_Slave_ISR_IT+0x1e8>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005ff6:	6939      	ldr	r1, [r7, #16]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f9b5 	bl	8006368 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d04b      	beq.n	80060a0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800600e:	2b00      	cmp	r3, #0
 8006010:	d046      	beq.n	80060a0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d128      	bne.n	800606e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b28      	cmp	r3, #40	; 0x28
 8006026:	d108      	bne.n	800603a <I2C_Slave_ISR_IT+0x84>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800602e:	d104      	bne.n	800603a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006030:	6939      	ldr	r1, [r7, #16]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fb8e 	bl	8006754 <I2C_ITListenCplt>
 8006038:	e031      	b.n	800609e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b29      	cmp	r3, #41	; 0x29
 8006044:	d10e      	bne.n	8006064 <I2C_Slave_ISR_IT+0xae>
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800604c:	d00a      	beq.n	8006064 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2210      	movs	r2, #16
 8006054:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 fce7 	bl	8006a2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f926 	bl	80062ae <I2C_ITSlaveSeqCplt>
 8006062:	e01c      	b.n	800609e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2210      	movs	r2, #16
 800606a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800606c:	e08f      	b.n	800618e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2210      	movs	r2, #16
 8006074:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	f043 0204 	orr.w	r2, r3, #4
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <I2C_Slave_ISR_IT+0xda>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800608e:	d17e      	bne.n	800618e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006094:	4619      	mov	r1, r3
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fbb0 	bl	80067fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800609c:	e077      	b.n	800618e <I2C_Slave_ISR_IT+0x1d8>
 800609e:	e076      	b.n	800618e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d02f      	beq.n	800610a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d02a      	beq.n	800610a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d018      	beq.n	80060f0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d14b      	bne.n	8006192 <I2C_Slave_ISR_IT+0x1dc>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006100:	d047      	beq.n	8006192 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f8d3 	bl	80062ae <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006108:	e043      	b.n	8006192 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d009      	beq.n	8006128 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800611e:	6939      	ldr	r1, [r7, #16]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f840 	bl	80061a6 <I2C_ITAddrCplt>
 8006126:	e035      	b.n	8006194 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d030      	beq.n	8006194 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006138:	2b00      	cmp	r3, #0
 800613a:	d02b      	beq.n	8006194 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d018      	beq.n	8006178 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	781a      	ldrb	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	851a      	strh	r2, [r3, #40]	; 0x28
 8006176:	e00d      	b.n	8006194 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800617e:	d002      	beq.n	8006186 <I2C_Slave_ISR_IT+0x1d0>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f891 	bl	80062ae <I2C_ITSlaveSeqCplt>
 800618c:	e002      	b.n	8006194 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800618e:	bf00      	nop
 8006190:	e000      	b.n	8006194 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006192:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061bc:	2b28      	cmp	r3, #40	; 0x28
 80061be:	d16a      	bne.n	8006296 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	0c1b      	lsrs	r3, r3, #16
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061de:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ec:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061fa:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d138      	bne.n	8006276 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006204:	897b      	ldrh	r3, [r7, #10]
 8006206:	09db      	lsrs	r3, r3, #7
 8006208:	b29a      	uxth	r2, r3
 800620a:	89bb      	ldrh	r3, [r7, #12]
 800620c:	4053      	eors	r3, r2
 800620e:	b29b      	uxth	r3, r3
 8006210:	f003 0306 	and.w	r3, r3, #6
 8006214:	2b00      	cmp	r3, #0
 8006216:	d11c      	bne.n	8006252 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006218:	897b      	ldrh	r3, [r7, #10]
 800621a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800622a:	2b02      	cmp	r3, #2
 800622c:	d13b      	bne.n	80062a6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2208      	movs	r2, #8
 800623a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006244:	89ba      	ldrh	r2, [r7, #12]
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fe87 	bl	8005f5e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006250:	e029      	b.n	80062a6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006252:	893b      	ldrh	r3, [r7, #8]
 8006254:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fe94 	bl	8006f88 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006268:	89ba      	ldrh	r2, [r7, #12]
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff fe75 	bl	8005f5e <HAL_I2C_AddrCallback>
}
 8006274:	e017      	b.n	80062a6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fe84 	bl	8006f88 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006288:	89ba      	ldrh	r2, [r7, #12]
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fe65 	bl	8005f5e <HAL_I2C_AddrCallback>
}
 8006294:	e007      	b.n	80062a6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2208      	movs	r2, #8
 800629c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e00c      	b.n	80062fc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062fa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b29      	cmp	r3, #41	; 0x29
 8006306:	d112      	bne.n	800632e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2228      	movs	r2, #40	; 0x28
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2221      	movs	r2, #33	; 0x21
 8006314:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006316:	2101      	movs	r1, #1
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fe35 	bl	8006f88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fe05 	bl	8005f36 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800632c:	e017      	b.n	800635e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b2a      	cmp	r3, #42	; 0x2a
 8006338:	d111      	bne.n	800635e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2228      	movs	r2, #40	; 0x28
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2222      	movs	r2, #34	; 0x22
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006348:	2102      	movs	r1, #2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fe1c 	bl	8006f88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fdf6 	bl	8005f4a <HAL_I2C_SlaveRxCpltCallback>
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006384:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2220      	movs	r2, #32
 800638c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b21      	cmp	r3, #33	; 0x21
 8006392:	d002      	beq.n	800639a <I2C_ITSlaveCplt+0x32>
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b29      	cmp	r3, #41	; 0x29
 8006398:	d108      	bne.n	80063ac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800639a:	f248 0101 	movw	r1, #32769	; 0x8001
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fdf2 	bl	8006f88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2221      	movs	r2, #33	; 0x21
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
 80063aa:	e00d      	b.n	80063c8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	2b22      	cmp	r3, #34	; 0x22
 80063b0:	d002      	beq.n	80063b8 <I2C_ITSlaveCplt+0x50>
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b2a      	cmp	r3, #42	; 0x2a
 80063b6:	d107      	bne.n	80063c8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80063b8:	f248 0102 	movw	r1, #32770	; 0x8002
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fde3 	bl	8006f88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2222      	movs	r2, #34	; 0x22
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6859      	ldr	r1, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b7f      	ldr	r3, [pc, #508]	; (80065e0 <I2C_ITSlaveCplt+0x278>)
 80063e4:	400b      	ands	r3, r1
 80063e6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fb1e 	bl	8006a2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d07a      	beq.n	80064ee <I2C_ITSlaveCplt+0x186>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006406:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8110 	beq.w	8006632 <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a72      	ldr	r2, [pc, #456]	; (80065e4 <I2C_ITSlaveCplt+0x27c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d059      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a70      	ldr	r2, [pc, #448]	; (80065e8 <I2C_ITSlaveCplt+0x280>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d053      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a6e      	ldr	r2, [pc, #440]	; (80065ec <I2C_ITSlaveCplt+0x284>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d04d      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6c      	ldr	r2, [pc, #432]	; (80065f0 <I2C_ITSlaveCplt+0x288>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d047      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a6a      	ldr	r2, [pc, #424]	; (80065f4 <I2C_ITSlaveCplt+0x28c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d041      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a68      	ldr	r2, [pc, #416]	; (80065f8 <I2C_ITSlaveCplt+0x290>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d03b      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a66      	ldr	r2, [pc, #408]	; (80065fc <I2C_ITSlaveCplt+0x294>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d035      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a64      	ldr	r2, [pc, #400]	; (8006600 <I2C_ITSlaveCplt+0x298>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d02f      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a62      	ldr	r2, [pc, #392]	; (8006604 <I2C_ITSlaveCplt+0x29c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d029      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a60      	ldr	r2, [pc, #384]	; (8006608 <I2C_ITSlaveCplt+0x2a0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d023      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a5e      	ldr	r2, [pc, #376]	; (800660c <I2C_ITSlaveCplt+0x2a4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01d      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a5c      	ldr	r2, [pc, #368]	; (8006610 <I2C_ITSlaveCplt+0x2a8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d017      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a5a      	ldr	r2, [pc, #360]	; (8006614 <I2C_ITSlaveCplt+0x2ac>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d011      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a58      	ldr	r2, [pc, #352]	; (8006618 <I2C_ITSlaveCplt+0x2b0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a56      	ldr	r2, [pc, #344]	; (800661c <I2C_ITSlaveCplt+0x2b4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d005      	beq.n	80064d2 <I2C_ITSlaveCplt+0x16a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a54      	ldr	r2, [pc, #336]	; (8006620 <I2C_ITSlaveCplt+0x2b8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d105      	bne.n	80064de <I2C_ITSlaveCplt+0x176>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	e004      	b.n	80064e8 <I2C_ITSlaveCplt+0x180>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	8553      	strh	r3, [r2, #42]	; 0x2a
 80064ec:	e0a1      	b.n	8006632 <I2C_ITSlaveCplt+0x2ca>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 809c 	beq.w	8006632 <I2C_ITSlaveCplt+0x2ca>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006508:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 808f 	beq.w	8006632 <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a32      	ldr	r2, [pc, #200]	; (80065e4 <I2C_ITSlaveCplt+0x27c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d059      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a30      	ldr	r2, [pc, #192]	; (80065e8 <I2C_ITSlaveCplt+0x280>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d053      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2e      	ldr	r2, [pc, #184]	; (80065ec <I2C_ITSlaveCplt+0x284>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d04d      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <I2C_ITSlaveCplt+0x288>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d047      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <I2C_ITSlaveCplt+0x28c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d041      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a28      	ldr	r2, [pc, #160]	; (80065f8 <I2C_ITSlaveCplt+0x290>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d03b      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a26      	ldr	r2, [pc, #152]	; (80065fc <I2C_ITSlaveCplt+0x294>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d035      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a24      	ldr	r2, [pc, #144]	; (8006600 <I2C_ITSlaveCplt+0x298>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d02f      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a22      	ldr	r2, [pc, #136]	; (8006604 <I2C_ITSlaveCplt+0x29c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d029      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a20      	ldr	r2, [pc, #128]	; (8006608 <I2C_ITSlaveCplt+0x2a0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d023      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1e      	ldr	r2, [pc, #120]	; (800660c <I2C_ITSlaveCplt+0x2a4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d01d      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <I2C_ITSlaveCplt+0x2a8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d017      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <I2C_ITSlaveCplt+0x2ac>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d011      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <I2C_ITSlaveCplt+0x2b0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00b      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a16      	ldr	r2, [pc, #88]	; (800661c <I2C_ITSlaveCplt+0x2b4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d005      	beq.n	80065d4 <I2C_ITSlaveCplt+0x26c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a14      	ldr	r2, [pc, #80]	; (8006620 <I2C_ITSlaveCplt+0x2b8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d127      	bne.n	8006624 <I2C_ITSlaveCplt+0x2bc>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	e026      	b.n	800662e <I2C_ITSlaveCplt+0x2c6>
 80065e0:	fe00e800 	.word	0xfe00e800
 80065e4:	40020010 	.word	0x40020010
 80065e8:	40020028 	.word	0x40020028
 80065ec:	40020040 	.word	0x40020040
 80065f0:	40020058 	.word	0x40020058
 80065f4:	40020070 	.word	0x40020070
 80065f8:	40020088 	.word	0x40020088
 80065fc:	400200a0 	.word	0x400200a0
 8006600:	400200b8 	.word	0x400200b8
 8006604:	40020410 	.word	0x40020410
 8006608:	40020428 	.word	0x40020428
 800660c:	40020440 	.word	0x40020440
 8006610:	40020458 	.word	0x40020458
 8006614:	40020470 	.word	0x40020470
 8006618:	40020488 	.word	0x40020488
 800661c:	400204a0 	.word	0x400204a0
 8006620:	400204b8 	.word	0x400204b8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	b29b      	uxth	r3, r3
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d020      	beq.n	800667e <I2C_ITSlaveCplt+0x316>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0304 	bic.w	r3, r3, #4
 8006642:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <I2C_ITSlaveCplt+0x316>
    {
      hi2c->XferSize--;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <I2C_ITSlaveCplt+0x32c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	f043 0204 	orr.w	r2, r3, #4
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d010      	beq.n	80066cc <I2C_ITSlaveCplt+0x364>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8a3 	bl	80067fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b28      	cmp	r3, #40	; 0x28
 80066c0:	d141      	bne.n	8006746 <I2C_ITSlaveCplt+0x3de>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80066c2:	6979      	ldr	r1, [r7, #20]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f845 	bl	8006754 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066ca:	e03c      	b.n	8006746 <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066d4:	d014      	beq.n	8006700 <I2C_ITSlaveCplt+0x398>
    I2C_ITSlaveSeqCplt(hi2c);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff fde9 	bl	80062ae <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <I2C_ITSlaveCplt+0x3e8>)
 80066e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff fc3e 	bl	8005f7a <HAL_I2C_ListenCpltCallback>
}
 80066fe:	e022      	b.n	8006746 <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b22      	cmp	r3, #34	; 0x22
 800670a:	d10e      	bne.n	800672a <I2C_ITSlaveCplt+0x3c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff fc11 	bl	8005f4a <HAL_I2C_SlaveRxCpltCallback>
}
 8006728:	e00d      	b.n	8006746 <I2C_ITSlaveCplt+0x3de>
    hi2c->State = HAL_I2C_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff fbf8 	bl	8005f36 <HAL_I2C_SlaveTxCpltCallback>
}
 8006746:	bf00      	nop
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	ffff0000 	.word	0xffff0000

08006754 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a25      	ldr	r2, [pc, #148]	; (80067f8 <I2C_ITListenCplt+0xa4>)
 8006762:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d022      	beq.n	80067d0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d012      	beq.n	80067d0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c8:	f043 0204 	orr.w	r2, r3, #4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067d0:	f248 0103 	movw	r1, #32771	; 0x8003
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fbd7 	bl	8006f88 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2210      	movs	r2, #16
 80067e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fbc5 	bl	8005f7a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	ffff0000 	.word	0xffff0000

080067fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a6d      	ldr	r2, [pc, #436]	; (80069d0 <I2C_ITError+0x1d4>)
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b28      	cmp	r3, #40	; 0x28
 8006832:	d005      	beq.n	8006840 <I2C_ITError+0x44>
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b29      	cmp	r3, #41	; 0x29
 8006838:	d002      	beq.n	8006840 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	2b2a      	cmp	r3, #42	; 0x2a
 800683e:	d10b      	bne.n	8006858 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006840:	2103      	movs	r1, #3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fba0 	bl	8006f88 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2228      	movs	r2, #40	; 0x28
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a60      	ldr	r2, [pc, #384]	; (80069d4 <I2C_ITError+0x1d8>)
 8006854:	635a      	str	r2, [r3, #52]	; 0x34
 8006856:	e030      	b.n	80068ba <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006858:	f248 0103 	movw	r1, #32771	; 0x8003
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb93 	bl	8006f88 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f8e1 	bl	8006a2a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b60      	cmp	r3, #96	; 0x60
 8006872:	d01f      	beq.n	80068b4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b20      	cmp	r3, #32
 8006888:	d114      	bne.n	80068b4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d109      	bne.n	80068ac <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2210      	movs	r2, #16
 800689e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a4:	f043 0204 	orr.w	r2, r3, #4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2220      	movs	r2, #32
 80068b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d039      	beq.n	800693c <I2C_ITError+0x140>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b11      	cmp	r3, #17
 80068cc:	d002      	beq.n	80068d4 <I2C_ITError+0xd8>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b21      	cmp	r3, #33	; 0x21
 80068d2:	d133      	bne.n	800693c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e2:	d107      	bne.n	80068f4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe fa53 	bl	8004da4 <HAL_DMA_GetState>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b01      	cmp	r3, #1
 8006902:	d017      	beq.n	8006934 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	4a33      	ldr	r2, [pc, #204]	; (80069d8 <I2C_ITError+0x1dc>)
 800690a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	4618      	mov	r0, r3
 800691a:	f7fd f8d3 	bl	8003ac4 <HAL_DMA_Abort_IT>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d04d      	beq.n	80069c0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800692e:	4610      	mov	r0, r2
 8006930:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006932:	e045      	b.n	80069c0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f851 	bl	80069dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800693a:	e041      	b.n	80069c0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d039      	beq.n	80069b8 <I2C_ITError+0x1bc>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b12      	cmp	r3, #18
 8006948:	d002      	beq.n	8006950 <I2C_ITError+0x154>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b22      	cmp	r3, #34	; 0x22
 800694e:	d133      	bne.n	80069b8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800695a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695e:	d107      	bne.n	8006970 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800696e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fa15 	bl	8004da4 <HAL_DMA_GetState>
 800697a:	4603      	mov	r3, r0
 800697c:	2b01      	cmp	r3, #1
 800697e:	d017      	beq.n	80069b0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006984:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <I2C_ITError+0x1dc>)
 8006986:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006994:	4618      	mov	r0, r3
 8006996:	f7fd f895 	bl	8003ac4 <HAL_DMA_Abort_IT>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d011      	beq.n	80069c4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069aa:	4610      	mov	r0, r2
 80069ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069ae:	e009      	b.n	80069c4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f813 	bl	80069dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069b6:	e005      	b.n	80069c4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f80f 	bl	80069dc <I2C_TreatErrorCallback>
  }
}
 80069be:	e002      	b.n	80069c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069c0:	bf00      	nop
 80069c2:	e000      	b.n	80069c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069c4:	bf00      	nop
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	ffff0000 	.word	0xffff0000
 80069d4:	08005fb7 	.word	0x08005fb7
 80069d8:	08006a73 	.word	0x08006a73

080069dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b60      	cmp	r3, #96	; 0x60
 80069ee:	d10e      	bne.n	8006a0e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff facb 	bl	8005fa2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a0c:	e009      	b.n	8006a22 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff fab6 	bl	8005f8e <HAL_I2C_ErrorCallback>
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d103      	bne.n	8006a48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2200      	movs	r2, #0
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d007      	beq.n	8006a66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0201 	orr.w	r2, r2, #1
 8006a64:	619a      	str	r2, [r3, #24]
  }
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff ff9b 	bl	80069dc <I2C_TreatErrorCallback>
}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	4613      	mov	r3, r2
 8006abc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006abe:	e031      	b.n	8006b24 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d02d      	beq.n	8006b24 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac8:	f7fa fb7e 	bl	80011c8 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d122      	bne.n	8006b24 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699a      	ldr	r2, [r3, #24]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d113      	bne.n	8006b24 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b00:	f043 0220 	orr.w	r2, r3, #32
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e00f      	b.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d0be      	beq.n	8006ac0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b58:	e033      	b.n	8006bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f900 	bl	8006d64 <I2C_IsErrorOccurred>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e031      	b.n	8006bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d025      	beq.n	8006bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fa fb27 	bl	80011c8 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d11a      	bne.n	8006bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d013      	beq.n	8006bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	f043 0220 	orr.w	r2, r3, #32
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e007      	b.n	8006bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d1c4      	bne.n	8006b5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006be6:	e02f      	b.n	8006c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f8b9 	bl	8006d64 <I2C_IsErrorOccurred>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e02d      	b.n	8006c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfc:	f7fa fae4 	bl	80011c8 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d302      	bcc.n	8006c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d11a      	bne.n	8006c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d013      	beq.n	8006c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c24:	f043 0220 	orr.w	r2, r3, #32
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e007      	b.n	8006c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d1c8      	bne.n	8006be8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c6c:	e06b      	b.n	8006d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f876 	bl	8006d64 <I2C_IsErrorOccurred>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e069      	b.n	8006d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d138      	bne.n	8006d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d105      	bne.n	8006caa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e055      	b.n	8006d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d107      	bne.n	8006cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8006cc6:	e002      	b.n	8006cce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6859      	ldr	r1, [r3, #4]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006ce2:	400b      	ands	r3, r1
 8006ce4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e029      	b.n	8006d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d02:	f7fa fa61 	bl	80011c8 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d302      	bcc.n	8006d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d116      	bne.n	8006d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d00f      	beq.n	8006d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2a:	f043 0220 	orr.w	r2, r3, #32
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e007      	b.n	8006d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d18c      	bne.n	8006c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	fe00e800 	.word	0xfe00e800

08006d64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08a      	sub	sp, #40	; 0x28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	f003 0310 	and.w	r3, r3, #16
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d068      	beq.n	8006e62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2210      	movs	r2, #16
 8006d96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d98:	e049      	b.n	8006e2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d045      	beq.n	8006e2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006da2:	f7fa fa11 	bl	80011c8 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d302      	bcc.n	8006db8 <I2C_IsErrorOccurred+0x54>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d13a      	bne.n	8006e2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dda:	d121      	bne.n	8006e20 <I2C_IsErrorOccurred+0xbc>
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de2:	d01d      	beq.n	8006e20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006de4:	7cfb      	ldrb	r3, [r7, #19]
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d01a      	beq.n	8006e20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006df8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006dfa:	f7fa f9e5 	bl	80011c8 <HAL_GetTick>
 8006dfe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e00:	e00e      	b.n	8006e20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e02:	f7fa f9e1 	bl	80011c8 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b19      	cmp	r3, #25
 8006e0e:	d907      	bls.n	8006e20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	f043 0320 	orr.w	r3, r3, #32
 8006e16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006e1e:	e006      	b.n	8006e2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d1e9      	bne.n	8006e02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	d003      	beq.n	8006e44 <I2C_IsErrorOccurred+0xe0>
 8006e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0aa      	beq.n	8006d9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d103      	bne.n	8006e54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2220      	movs	r2, #32
 8006e52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	f043 0304 	orr.w	r3, r3, #4
 8006e5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00b      	beq.n	8006eae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	f043 0308 	orr.w	r3, r3, #8
 8006e9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ea6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	f043 0302 	orr.w	r3, r3, #2
 8006ebe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01c      	beq.n	8006f12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff fda6 	bl	8006a2a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6859      	ldr	r1, [r3, #4]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <I2C_IsErrorOccurred+0x1bc>)
 8006eea:	400b      	ands	r3, r1
 8006eec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3728      	adds	r7, #40	; 0x28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	fe00e800 	.word	0xfe00e800

08006f24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	607b      	str	r3, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	817b      	strh	r3, [r7, #10]
 8006f32:	4613      	mov	r3, r2
 8006f34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f36:	897b      	ldrh	r3, [r7, #10]
 8006f38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f3c:	7a7b      	ldrb	r3, [r7, #9]
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	0d5b      	lsrs	r3, r3, #21
 8006f5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <I2C_TransferConfig+0x60>)
 8006f64:	430b      	orrs	r3, r1
 8006f66:	43db      	mvns	r3, r3
 8006f68:	ea02 0103 	and.w	r1, r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	03ff63ff 	.word	0x03ff63ff

08006f88 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006f98:	887b      	ldrh	r3, [r7, #2]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00f      	beq.n	8006fc2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006fa8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006fb6:	2b28      	cmp	r3, #40	; 0x28
 8006fb8:	d003      	beq.n	8006fc2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006fc0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006fc2:	887b      	ldrh	r3, [r7, #2]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00f      	beq.n	8006fec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006fd2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006fe0:	2b28      	cmp	r3, #40	; 0x28
 8006fe2:	d003      	beq.n	8006fec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006fea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da03      	bge.n	8006ffc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006ffa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ffc:	887b      	ldrh	r3, [r7, #2]
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d103      	bne.n	800700a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007008:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800700a:	887b      	ldrh	r3, [r7, #2]
 800700c:	2b20      	cmp	r3, #32
 800700e:	d103      	bne.n	8007018 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f043 0320 	orr.w	r3, r3, #32
 8007016:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007018:	887b      	ldrh	r3, [r7, #2]
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d103      	bne.n	8007026 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007024:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6819      	ldr	r1, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	43da      	mvns	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	400a      	ands	r2, r1
 8007036:	601a      	str	r2, [r3, #0]
}
 8007038:	bf00      	nop
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b20      	cmp	r3, #32
 8007058:	d138      	bne.n	80070cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007064:	2302      	movs	r3, #2
 8007066:	e032      	b.n	80070ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2224      	movs	r2, #36	; 0x24
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007096:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6819      	ldr	r1, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e000      	b.n	80070ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070cc:	2302      	movs	r3, #2
  }
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d139      	bne.n	8007164 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e033      	b.n	8007166 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2224      	movs	r2, #36	; 0x24
 800710a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0201 	bic.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800712c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e000      	b.n	8007166 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007164:	2302      	movs	r3, #2
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800717c:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <HAL_PWREx_ConfigSupply+0x70>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b04      	cmp	r3, #4
 8007186:	d00a      	beq.n	800719e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007188:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <HAL_PWREx_ConfigSupply+0x70>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d001      	beq.n	800719a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e01f      	b.n	80071da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	e01d      	b.n	80071da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <HAL_PWREx_ConfigSupply+0x70>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f023 0207 	bic.w	r2, r3, #7
 80071a6:	490f      	ldr	r1, [pc, #60]	; (80071e4 <HAL_PWREx_ConfigSupply+0x70>)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80071ae:	f7fa f80b 	bl	80011c8 <HAL_GetTick>
 80071b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071b4:	e009      	b.n	80071ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80071b6:	f7fa f807 	bl	80011c8 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071c4:	d901      	bls.n	80071ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e007      	b.n	80071da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071ca:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <HAL_PWREx_ConfigSupply+0x70>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d6:	d1ee      	bne.n	80071b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	58024800 	.word	0x58024800

080071e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08c      	sub	sp, #48	; 0x30
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f000 bc48 	b.w	8007a8c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8088 	beq.w	800731a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800720a:	4b99      	ldr	r3, [pc, #612]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007212:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007214:	4b96      	ldr	r3, [pc, #600]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	2b10      	cmp	r3, #16
 800721e:	d007      	beq.n	8007230 <HAL_RCC_OscConfig+0x48>
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	2b18      	cmp	r3, #24
 8007224:	d111      	bne.n	800724a <HAL_RCC_OscConfig+0x62>
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d10c      	bne.n	800724a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007230:	4b8f      	ldr	r3, [pc, #572]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d06d      	beq.n	8007318 <HAL_RCC_OscConfig+0x130>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d169      	bne.n	8007318 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f000 bc21 	b.w	8007a8c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007252:	d106      	bne.n	8007262 <HAL_RCC_OscConfig+0x7a>
 8007254:	4b86      	ldr	r3, [pc, #536]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a85      	ldr	r2, [pc, #532]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800725a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	e02e      	b.n	80072c0 <HAL_RCC_OscConfig+0xd8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10c      	bne.n	8007284 <HAL_RCC_OscConfig+0x9c>
 800726a:	4b81      	ldr	r3, [pc, #516]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a80      	ldr	r2, [pc, #512]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	4b7e      	ldr	r3, [pc, #504]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a7d      	ldr	r2, [pc, #500]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800727c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e01d      	b.n	80072c0 <HAL_RCC_OscConfig+0xd8>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800728c:	d10c      	bne.n	80072a8 <HAL_RCC_OscConfig+0xc0>
 800728e:	4b78      	ldr	r3, [pc, #480]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a77      	ldr	r2, [pc, #476]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	4b75      	ldr	r3, [pc, #468]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a74      	ldr	r2, [pc, #464]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80072a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	e00b      	b.n	80072c0 <HAL_RCC_OscConfig+0xd8>
 80072a8:	4b71      	ldr	r3, [pc, #452]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a70      	ldr	r2, [pc, #448]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80072ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	4b6e      	ldr	r3, [pc, #440]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6d      	ldr	r2, [pc, #436]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80072ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d013      	beq.n	80072f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7f9 ff7e 	bl	80011c8 <HAL_GetTick>
 80072cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072d0:	f7f9 ff7a 	bl	80011c8 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b64      	cmp	r3, #100	; 0x64
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e3d4      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072e2:	4b63      	ldr	r3, [pc, #396]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0xe8>
 80072ee:	e014      	b.n	800731a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f0:	f7f9 ff6a 	bl	80011c8 <HAL_GetTick>
 80072f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072f6:	e008      	b.n	800730a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072f8:	f7f9 ff66 	bl	80011c8 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b64      	cmp	r3, #100	; 0x64
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e3c0      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800730a:	4b59      	ldr	r3, [pc, #356]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f0      	bne.n	80072f8 <HAL_RCC_OscConfig+0x110>
 8007316:	e000      	b.n	800731a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 80ca 	beq.w	80074bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007328:	4b51      	ldr	r3, [pc, #324]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007330:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007332:	4b4f      	ldr	r3, [pc, #316]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <HAL_RCC_OscConfig+0x166>
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	2b18      	cmp	r3, #24
 8007342:	d156      	bne.n	80073f2 <HAL_RCC_OscConfig+0x20a>
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d151      	bne.n	80073f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800734e:	4b48      	ldr	r3, [pc, #288]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_RCC_OscConfig+0x17e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e392      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007366:	4b42      	ldr	r3, [pc, #264]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f023 0219 	bic.w	r2, r3, #25
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	493f      	ldr	r1, [pc, #252]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007374:	4313      	orrs	r3, r2
 8007376:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7f9 ff26 	bl	80011c8 <HAL_GetTick>
 800737c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007380:	f7f9 ff22 	bl	80011c8 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e37c      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007392:	4b37      	ldr	r3, [pc, #220]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800739e:	f7f9 ff43 	bl	8001228 <HAL_GetREVID>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d817      	bhi.n	80073dc <HAL_RCC_OscConfig+0x1f4>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	d108      	bne.n	80073c6 <HAL_RCC_OscConfig+0x1de>
 80073b4:	4b2e      	ldr	r3, [pc, #184]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80073bc:	4a2c      	ldr	r2, [pc, #176]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80073be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073c4:	e07a      	b.n	80074bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073c6:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	031b      	lsls	r3, r3, #12
 80073d4:	4926      	ldr	r1, [pc, #152]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073da:	e06f      	b.n	80074bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073dc:	4b24      	ldr	r3, [pc, #144]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	4921      	ldr	r1, [pc, #132]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073f0:	e064      	b.n	80074bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d047      	beq.n	800748a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073fa:	4b1d      	ldr	r3, [pc, #116]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f023 0219 	bic.w	r2, r3, #25
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	491a      	ldr	r1, [pc, #104]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007408:	4313      	orrs	r3, r2
 800740a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7f9 fedc 	bl	80011c8 <HAL_GetTick>
 8007410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007414:	f7f9 fed8 	bl	80011c8 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e332      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007426:	4b12      	ldr	r3, [pc, #72]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f0      	beq.n	8007414 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007432:	f7f9 fef9 	bl	8001228 <HAL_GetREVID>
 8007436:	4603      	mov	r3, r0
 8007438:	f241 0203 	movw	r2, #4099	; 0x1003
 800743c:	4293      	cmp	r3, r2
 800743e:	d819      	bhi.n	8007474 <HAL_RCC_OscConfig+0x28c>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d108      	bne.n	800745a <HAL_RCC_OscConfig+0x272>
 8007448:	4b09      	ldr	r3, [pc, #36]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007450:	4a07      	ldr	r2, [pc, #28]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 8007452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007456:	6053      	str	r3, [r2, #4]
 8007458:	e030      	b.n	80074bc <HAL_RCC_OscConfig+0x2d4>
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	031b      	lsls	r3, r3, #12
 8007468:	4901      	ldr	r1, [pc, #4]	; (8007470 <HAL_RCC_OscConfig+0x288>)
 800746a:	4313      	orrs	r3, r2
 800746c:	604b      	str	r3, [r1, #4]
 800746e:	e025      	b.n	80074bc <HAL_RCC_OscConfig+0x2d4>
 8007470:	58024400 	.word	0x58024400
 8007474:	4b9a      	ldr	r3, [pc, #616]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	061b      	lsls	r3, r3, #24
 8007482:	4997      	ldr	r1, [pc, #604]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007484:	4313      	orrs	r3, r2
 8007486:	604b      	str	r3, [r1, #4]
 8007488:	e018      	b.n	80074bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800748a:	4b95      	ldr	r3, [pc, #596]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a94      	ldr	r2, [pc, #592]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007496:	f7f9 fe97 	bl	80011c8 <HAL_GetTick>
 800749a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800749c:	e008      	b.n	80074b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800749e:	f7f9 fe93 	bl	80011c8 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e2ed      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074b0:	4b8b      	ldr	r3, [pc, #556]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1f0      	bne.n	800749e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80a9 	beq.w	800761c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ca:	4b85      	ldr	r3, [pc, #532]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074d4:	4b82      	ldr	r3, [pc, #520]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d007      	beq.n	80074f0 <HAL_RCC_OscConfig+0x308>
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b18      	cmp	r3, #24
 80074e4:	d13a      	bne.n	800755c <HAL_RCC_OscConfig+0x374>
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d135      	bne.n	800755c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074f0:	4b7b      	ldr	r3, [pc, #492]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_RCC_OscConfig+0x320>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	2b80      	cmp	r3, #128	; 0x80
 8007502:	d001      	beq.n	8007508 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e2c1      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007508:	f7f9 fe8e 	bl	8001228 <HAL_GetREVID>
 800750c:	4603      	mov	r3, r0
 800750e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007512:	4293      	cmp	r3, r2
 8007514:	d817      	bhi.n	8007546 <HAL_RCC_OscConfig+0x35e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	2b20      	cmp	r3, #32
 800751c:	d108      	bne.n	8007530 <HAL_RCC_OscConfig+0x348>
 800751e:	4b70      	ldr	r3, [pc, #448]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007526:	4a6e      	ldr	r2, [pc, #440]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800752c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800752e:	e075      	b.n	800761c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007530:	4b6b      	ldr	r3, [pc, #428]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	069b      	lsls	r3, r3, #26
 800753e:	4968      	ldr	r1, [pc, #416]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007540:	4313      	orrs	r3, r2
 8007542:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007544:	e06a      	b.n	800761c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007546:	4b66      	ldr	r3, [pc, #408]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	061b      	lsls	r3, r3, #24
 8007554:	4962      	ldr	r1, [pc, #392]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007556:	4313      	orrs	r3, r2
 8007558:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800755a:	e05f      	b.n	800761c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d042      	beq.n	80075ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007564:	4b5e      	ldr	r3, [pc, #376]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a5d      	ldr	r2, [pc, #372]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 800756a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007570:	f7f9 fe2a 	bl	80011c8 <HAL_GetTick>
 8007574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007578:	f7f9 fe26 	bl	80011c8 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e280      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800758a:	4b55      	ldr	r3, [pc, #340]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f0      	beq.n	8007578 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007596:	f7f9 fe47 	bl	8001228 <HAL_GetREVID>
 800759a:	4603      	mov	r3, r0
 800759c:	f241 0203 	movw	r2, #4099	; 0x1003
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d817      	bhi.n	80075d4 <HAL_RCC_OscConfig+0x3ec>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d108      	bne.n	80075be <HAL_RCC_OscConfig+0x3d6>
 80075ac:	4b4c      	ldr	r3, [pc, #304]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80075b4:	4a4a      	ldr	r2, [pc, #296]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80075b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075ba:	6053      	str	r3, [r2, #4]
 80075bc:	e02e      	b.n	800761c <HAL_RCC_OscConfig+0x434>
 80075be:	4b48      	ldr	r3, [pc, #288]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	069b      	lsls	r3, r3, #26
 80075cc:	4944      	ldr	r1, [pc, #272]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	604b      	str	r3, [r1, #4]
 80075d2:	e023      	b.n	800761c <HAL_RCC_OscConfig+0x434>
 80075d4:	4b42      	ldr	r3, [pc, #264]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	061b      	lsls	r3, r3, #24
 80075e2:	493f      	ldr	r1, [pc, #252]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	60cb      	str	r3, [r1, #12]
 80075e8:	e018      	b.n	800761c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80075ea:	4b3d      	ldr	r3, [pc, #244]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a3c      	ldr	r2, [pc, #240]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80075f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f6:	f7f9 fde7 	bl	80011c8 <HAL_GetTick>
 80075fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075fc:	e008      	b.n	8007610 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80075fe:	f7f9 fde3 	bl	80011c8 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e23d      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007610:	4b33      	ldr	r3, [pc, #204]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f0      	bne.n	80075fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d036      	beq.n	8007696 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d019      	beq.n	8007664 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007630:	4b2b      	ldr	r3, [pc, #172]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007634:	4a2a      	ldr	r2, [pc, #168]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800763c:	f7f9 fdc4 	bl	80011c8 <HAL_GetTick>
 8007640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007644:	f7f9 fdc0 	bl	80011c8 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e21a      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007656:	4b22      	ldr	r3, [pc, #136]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f0      	beq.n	8007644 <HAL_RCC_OscConfig+0x45c>
 8007662:	e018      	b.n	8007696 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007664:	4b1e      	ldr	r3, [pc, #120]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 8007666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007668:	4a1d      	ldr	r2, [pc, #116]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007670:	f7f9 fdaa 	bl	80011c8 <HAL_GetTick>
 8007674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007676:	e008      	b.n	800768a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007678:	f7f9 fda6 	bl	80011c8 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b02      	cmp	r3, #2
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e200      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800768a:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 800768c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f0      	bne.n	8007678 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d039      	beq.n	8007716 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01c      	beq.n	80076e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076aa:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a0c      	ldr	r2, [pc, #48]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80076b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80076b6:	f7f9 fd87 	bl	80011c8 <HAL_GetTick>
 80076ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076be:	f7f9 fd83 	bl	80011c8 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e1dd      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80076d0:	4b03      	ldr	r3, [pc, #12]	; (80076e0 <HAL_RCC_OscConfig+0x4f8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d0f0      	beq.n	80076be <HAL_RCC_OscConfig+0x4d6>
 80076dc:	e01b      	b.n	8007716 <HAL_RCC_OscConfig+0x52e>
 80076de:	bf00      	nop
 80076e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076e4:	4b9b      	ldr	r3, [pc, #620]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a9a      	ldr	r2, [pc, #616]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80076ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80076f0:	f7f9 fd6a 	bl	80011c8 <HAL_GetTick>
 80076f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076f8:	f7f9 fd66 	bl	80011c8 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e1c0      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800770a:	4b92      	ldr	r3, [pc, #584]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f0      	bne.n	80076f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0304 	and.w	r3, r3, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8081 	beq.w	8007826 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007724:	4b8c      	ldr	r3, [pc, #560]	; (8007958 <HAL_RCC_OscConfig+0x770>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a8b      	ldr	r2, [pc, #556]	; (8007958 <HAL_RCC_OscConfig+0x770>)
 800772a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007730:	f7f9 fd4a 	bl	80011c8 <HAL_GetTick>
 8007734:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007738:	f7f9 fd46 	bl	80011c8 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b64      	cmp	r3, #100	; 0x64
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e1a0      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800774a:	4b83      	ldr	r3, [pc, #524]	; (8007958 <HAL_RCC_OscConfig+0x770>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f0      	beq.n	8007738 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d106      	bne.n	800776c <HAL_RCC_OscConfig+0x584>
 800775e:	4b7d      	ldr	r3, [pc, #500]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007762:	4a7c      	ldr	r2, [pc, #496]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	6713      	str	r3, [r2, #112]	; 0x70
 800776a:	e02d      	b.n	80077c8 <HAL_RCC_OscConfig+0x5e0>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10c      	bne.n	800778e <HAL_RCC_OscConfig+0x5a6>
 8007774:	4b77      	ldr	r3, [pc, #476]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	4a76      	ldr	r2, [pc, #472]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	6713      	str	r3, [r2, #112]	; 0x70
 8007780:	4b74      	ldr	r3, [pc, #464]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007784:	4a73      	ldr	r2, [pc, #460]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007786:	f023 0304 	bic.w	r3, r3, #4
 800778a:	6713      	str	r3, [r2, #112]	; 0x70
 800778c:	e01c      	b.n	80077c8 <HAL_RCC_OscConfig+0x5e0>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	2b05      	cmp	r3, #5
 8007794:	d10c      	bne.n	80077b0 <HAL_RCC_OscConfig+0x5c8>
 8007796:	4b6f      	ldr	r3, [pc, #444]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779a:	4a6e      	ldr	r2, [pc, #440]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800779c:	f043 0304 	orr.w	r3, r3, #4
 80077a0:	6713      	str	r3, [r2, #112]	; 0x70
 80077a2:	4b6c      	ldr	r3, [pc, #432]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	4a6b      	ldr	r2, [pc, #428]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	6713      	str	r3, [r2, #112]	; 0x70
 80077ae:	e00b      	b.n	80077c8 <HAL_RCC_OscConfig+0x5e0>
 80077b0:	4b68      	ldr	r3, [pc, #416]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80077b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b4:	4a67      	ldr	r2, [pc, #412]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80077b6:	f023 0301 	bic.w	r3, r3, #1
 80077ba:	6713      	str	r3, [r2, #112]	; 0x70
 80077bc:	4b65      	ldr	r3, [pc, #404]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80077be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c0:	4a64      	ldr	r2, [pc, #400]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80077c2:	f023 0304 	bic.w	r3, r3, #4
 80077c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d015      	beq.n	80077fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d0:	f7f9 fcfa 	bl	80011c8 <HAL_GetTick>
 80077d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077d6:	e00a      	b.n	80077ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077d8:	f7f9 fcf6 	bl	80011c8 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d901      	bls.n	80077ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e14e      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ee:	4b59      	ldr	r3, [pc, #356]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0ee      	beq.n	80077d8 <HAL_RCC_OscConfig+0x5f0>
 80077fa:	e014      	b.n	8007826 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077fc:	f7f9 fce4 	bl	80011c8 <HAL_GetTick>
 8007800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007802:	e00a      	b.n	800781a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007804:	f7f9 fce0 	bl	80011c8 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007812:	4293      	cmp	r3, r2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e138      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800781a:	4b4e      	ldr	r3, [pc, #312]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1ee      	bne.n	8007804 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 812d 	beq.w	8007a8a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007830:	4b48      	ldr	r3, [pc, #288]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007838:	2b18      	cmp	r3, #24
 800783a:	f000 80bd 	beq.w	80079b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	2b02      	cmp	r3, #2
 8007844:	f040 809e 	bne.w	8007984 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007848:	4b42      	ldr	r3, [pc, #264]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a41      	ldr	r2, [pc, #260]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800784e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007854:	f7f9 fcb8 	bl	80011c8 <HAL_GetTick>
 8007858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800785c:	f7f9 fcb4 	bl	80011c8 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e10e      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800786e:	4b39      	ldr	r3, [pc, #228]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1f0      	bne.n	800785c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800787a:	4b36      	ldr	r3, [pc, #216]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800787c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800787e:	4b37      	ldr	r3, [pc, #220]	; (800795c <HAL_RCC_OscConfig+0x774>)
 8007880:	4013      	ands	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800788a:	0112      	lsls	r2, r2, #4
 800788c:	430a      	orrs	r2, r1
 800788e:	4931      	ldr	r1, [pc, #196]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007890:	4313      	orrs	r3, r2
 8007892:	628b      	str	r3, [r1, #40]	; 0x28
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	3b01      	subs	r3, #1
 800789a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	3b01      	subs	r3, #1
 80078a4:	025b      	lsls	r3, r3, #9
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	3b01      	subs	r3, #1
 80078b0:	041b      	lsls	r3, r3, #16
 80078b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078bc:	3b01      	subs	r3, #1
 80078be:	061b      	lsls	r3, r3, #24
 80078c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078c4:	4923      	ldr	r1, [pc, #140]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80078ca:	4b22      	ldr	r3, [pc, #136]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	4a21      	ldr	r2, [pc, #132]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80078d6:	4b1f      	ldr	r3, [pc, #124]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80078d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078da:	4b21      	ldr	r3, [pc, #132]	; (8007960 <HAL_RCC_OscConfig+0x778>)
 80078dc:	4013      	ands	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078e2:	00d2      	lsls	r2, r2, #3
 80078e4:	491b      	ldr	r1, [pc, #108]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80078ea:	4b1a      	ldr	r3, [pc, #104]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	f023 020c 	bic.w	r2, r3, #12
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	4917      	ldr	r1, [pc, #92]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078fc:	4b15      	ldr	r3, [pc, #84]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	f023 0202 	bic.w	r2, r3, #2
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007908:	4912      	ldr	r1, [pc, #72]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800790a:	4313      	orrs	r3, r2
 800790c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800790e:	4b11      	ldr	r3, [pc, #68]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	4a10      	ldr	r2, [pc, #64]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791a:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	4a0d      	ldr	r2, [pc, #52]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 800792c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007930:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007932:	4b08      	ldr	r3, [pc, #32]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	4a07      	ldr	r2, [pc, #28]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007938:	f043 0301 	orr.w	r3, r3, #1
 800793c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a04      	ldr	r2, [pc, #16]	; (8007954 <HAL_RCC_OscConfig+0x76c>)
 8007944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794a:	f7f9 fc3d 	bl	80011c8 <HAL_GetTick>
 800794e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007950:	e011      	b.n	8007976 <HAL_RCC_OscConfig+0x78e>
 8007952:	bf00      	nop
 8007954:	58024400 	.word	0x58024400
 8007958:	58024800 	.word	0x58024800
 800795c:	fffffc0c 	.word	0xfffffc0c
 8007960:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007964:	f7f9 fc30 	bl	80011c8 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e08a      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007976:	4b47      	ldr	r3, [pc, #284]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCC_OscConfig+0x77c>
 8007982:	e082      	b.n	8007a8a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007984:	4b43      	ldr	r3, [pc, #268]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a42      	ldr	r2, [pc, #264]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 800798a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800798e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7f9 fc1a 	bl	80011c8 <HAL_GetTick>
 8007994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007998:	f7f9 fc16 	bl	80011c8 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e070      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079aa:	4b3a      	ldr	r3, [pc, #232]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f0      	bne.n	8007998 <HAL_RCC_OscConfig+0x7b0>
 80079b6:	e068      	b.n	8007a8a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80079b8:	4b36      	ldr	r3, [pc, #216]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80079be:	4b35      	ldr	r3, [pc, #212]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d031      	beq.n	8007a30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f003 0203 	and.w	r2, r3, #3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d12a      	bne.n	8007a30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	091b      	lsrs	r3, r3, #4
 80079de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d122      	bne.n	8007a30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d11a      	bne.n	8007a30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	0a5b      	lsrs	r3, r3, #9
 80079fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d111      	bne.n	8007a30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	0c1b      	lsrs	r3, r3, #16
 8007a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d108      	bne.n	8007a30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d001      	beq.n	8007a34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e02b      	b.n	8007a8c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007a34:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d01f      	beq.n	8007a8a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007a4a:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	4a11      	ldr	r2, [pc, #68]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007a50:	f023 0301 	bic.w	r3, r3, #1
 8007a54:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a56:	f7f9 fbb7 	bl	80011c8 <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007a5c:	bf00      	nop
 8007a5e:	f7f9 fbb3 	bl	80011c8 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d0f9      	beq.n	8007a5e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a6a:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <HAL_RCC_OscConfig+0x8b0>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a76:	00d2      	lsls	r2, r2, #3
 8007a78:	4906      	ldr	r1, [pc, #24]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <HAL_RCC_OscConfig+0x8ac>)
 8007a84:	f043 0301 	orr.w	r3, r3, #1
 8007a88:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3730      	adds	r7, #48	; 0x30
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	58024400 	.word	0x58024400
 8007a98:	ffff0007 	.word	0xffff0007

08007a9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e19c      	b.n	8007dea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ab0:	4b8a      	ldr	r3, [pc, #552]	; (8007cdc <HAL_RCC_ClockConfig+0x240>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d910      	bls.n	8007ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007abe:	4b87      	ldr	r3, [pc, #540]	; (8007cdc <HAL_RCC_ClockConfig+0x240>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f023 020f 	bic.w	r2, r3, #15
 8007ac6:	4985      	ldr	r1, [pc, #532]	; (8007cdc <HAL_RCC_ClockConfig+0x240>)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ace:	4b83      	ldr	r3, [pc, #524]	; (8007cdc <HAL_RCC_ClockConfig+0x240>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 030f 	and.w	r3, r3, #15
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d001      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e184      	b.n	8007dea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d010      	beq.n	8007b0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691a      	ldr	r2, [r3, #16]
 8007af0:	4b7b      	ldr	r3, [pc, #492]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d908      	bls.n	8007b0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007afc:	4b78      	ldr	r3, [pc, #480]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	4975      	ldr	r1, [pc, #468]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d010      	beq.n	8007b3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695a      	ldr	r2, [r3, #20]
 8007b1e:	4b70      	ldr	r3, [pc, #448]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d908      	bls.n	8007b3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b2a:	4b6d      	ldr	r3, [pc, #436]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	496a      	ldr	r1, [pc, #424]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d010      	beq.n	8007b6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699a      	ldr	r2, [r3, #24]
 8007b4c:	4b64      	ldr	r3, [pc, #400]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d908      	bls.n	8007b6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b58:	4b61      	ldr	r3, [pc, #388]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	495e      	ldr	r1, [pc, #376]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d010      	beq.n	8007b98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69da      	ldr	r2, [r3, #28]
 8007b7a:	4b59      	ldr	r3, [pc, #356]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d908      	bls.n	8007b98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b86:	4b56      	ldr	r3, [pc, #344]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	4953      	ldr	r1, [pc, #332]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d010      	beq.n	8007bc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	4b4d      	ldr	r3, [pc, #308]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d908      	bls.n	8007bc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bb4:	4b4a      	ldr	r3, [pc, #296]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f023 020f 	bic.w	r2, r3, #15
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	4947      	ldr	r1, [pc, #284]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d055      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007bd2:	4b43      	ldr	r3, [pc, #268]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	4940      	ldr	r1, [pc, #256]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d107      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bec:	4b3c      	ldr	r3, [pc, #240]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d121      	bne.n	8007c3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0f6      	b.n	8007dea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d107      	bne.n	8007c14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c04:	4b36      	ldr	r3, [pc, #216]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d115      	bne.n	8007c3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0ea      	b.n	8007dea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d107      	bne.n	8007c2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c1c:	4b30      	ldr	r3, [pc, #192]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d109      	bne.n	8007c3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0de      	b.n	8007dea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e0d6      	b.n	8007dea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c3c:	4b28      	ldr	r3, [pc, #160]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f023 0207 	bic.w	r2, r3, #7
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	4925      	ldr	r1, [pc, #148]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c4e:	f7f9 fabb 	bl	80011c8 <HAL_GetTick>
 8007c52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c54:	e00a      	b.n	8007c6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c56:	f7f9 fab7 	bl	80011c8 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d901      	bls.n	8007c6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e0be      	b.n	8007dea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d1eb      	bne.n	8007c56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d010      	beq.n	8007cac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	4b14      	ldr	r3, [pc, #80]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d208      	bcs.n	8007cac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c9a:	4b11      	ldr	r3, [pc, #68]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	f023 020f 	bic.w	r2, r3, #15
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	490e      	ldr	r1, [pc, #56]	; (8007ce0 <HAL_RCC_ClockConfig+0x244>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cac:	4b0b      	ldr	r3, [pc, #44]	; (8007cdc <HAL_RCC_ClockConfig+0x240>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d214      	bcs.n	8007ce4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cba:	4b08      	ldr	r3, [pc, #32]	; (8007cdc <HAL_RCC_ClockConfig+0x240>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f023 020f 	bic.w	r2, r3, #15
 8007cc2:	4906      	ldr	r1, [pc, #24]	; (8007cdc <HAL_RCC_ClockConfig+0x240>)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cca:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <HAL_RCC_ClockConfig+0x240>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d005      	beq.n	8007ce4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e086      	b.n	8007dea <HAL_RCC_ClockConfig+0x34e>
 8007cdc:	52002000 	.word	0x52002000
 8007ce0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d010      	beq.n	8007d12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691a      	ldr	r2, [r3, #16]
 8007cf4:	4b3f      	ldr	r3, [pc, #252]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d208      	bcs.n	8007d12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d00:	4b3c      	ldr	r3, [pc, #240]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	4939      	ldr	r1, [pc, #228]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d010      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	695a      	ldr	r2, [r3, #20]
 8007d22:	4b34      	ldr	r3, [pc, #208]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d208      	bcs.n	8007d40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d2e:	4b31      	ldr	r3, [pc, #196]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	492e      	ldr	r1, [pc, #184]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d010      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699a      	ldr	r2, [r3, #24]
 8007d50:	4b28      	ldr	r3, [pc, #160]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d208      	bcs.n	8007d6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d5c:	4b25      	ldr	r3, [pc, #148]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	4922      	ldr	r1, [pc, #136]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69da      	ldr	r2, [r3, #28]
 8007d7e:	4b1d      	ldr	r3, [pc, #116]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d208      	bcs.n	8007d9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d8a:	4b1a      	ldr	r3, [pc, #104]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	4917      	ldr	r1, [pc, #92]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d9c:	f000 f834 	bl	8007e08 <HAL_RCC_GetSysClockFreq>
 8007da0:	4602      	mov	r2, r0
 8007da2:	4b14      	ldr	r3, [pc, #80]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	4912      	ldr	r1, [pc, #72]	; (8007df8 <HAL_RCC_ClockConfig+0x35c>)
 8007dae:	5ccb      	ldrb	r3, [r1, r3]
 8007db0:	f003 031f 	and.w	r3, r3, #31
 8007db4:	fa22 f303 	lsr.w	r3, r2, r3
 8007db8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007dba:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <HAL_RCC_ClockConfig+0x358>)
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	4a0d      	ldr	r2, [pc, #52]	; (8007df8 <HAL_RCC_ClockConfig+0x35c>)
 8007dc4:	5cd3      	ldrb	r3, [r2, r3]
 8007dc6:	f003 031f 	and.w	r3, r3, #31
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd0:	4a0a      	ldr	r2, [pc, #40]	; (8007dfc <HAL_RCC_ClockConfig+0x360>)
 8007dd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007dd4:	4a0a      	ldr	r2, [pc, #40]	; (8007e00 <HAL_RCC_ClockConfig+0x364>)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007dda:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <HAL_RCC_ClockConfig+0x368>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7f9 f9a8 	bl	8001134 <HAL_InitTick>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	58024400 	.word	0x58024400
 8007df8:	0800b5f8 	.word	0x0800b5f8
 8007dfc:	24000008 	.word	0x24000008
 8007e00:	24000004 	.word	0x24000004
 8007e04:	2400000c 	.word	0x2400000c

08007e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b089      	sub	sp, #36	; 0x24
 8007e0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e0e:	4bb3      	ldr	r3, [pc, #716]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e16:	2b18      	cmp	r3, #24
 8007e18:	f200 8155 	bhi.w	80080c6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e89 	.word	0x08007e89
 8007e28:	080080c7 	.word	0x080080c7
 8007e2c:	080080c7 	.word	0x080080c7
 8007e30:	080080c7 	.word	0x080080c7
 8007e34:	080080c7 	.word	0x080080c7
 8007e38:	080080c7 	.word	0x080080c7
 8007e3c:	080080c7 	.word	0x080080c7
 8007e40:	080080c7 	.word	0x080080c7
 8007e44:	08007eaf 	.word	0x08007eaf
 8007e48:	080080c7 	.word	0x080080c7
 8007e4c:	080080c7 	.word	0x080080c7
 8007e50:	080080c7 	.word	0x080080c7
 8007e54:	080080c7 	.word	0x080080c7
 8007e58:	080080c7 	.word	0x080080c7
 8007e5c:	080080c7 	.word	0x080080c7
 8007e60:	080080c7 	.word	0x080080c7
 8007e64:	08007eb5 	.word	0x08007eb5
 8007e68:	080080c7 	.word	0x080080c7
 8007e6c:	080080c7 	.word	0x080080c7
 8007e70:	080080c7 	.word	0x080080c7
 8007e74:	080080c7 	.word	0x080080c7
 8007e78:	080080c7 	.word	0x080080c7
 8007e7c:	080080c7 	.word	0x080080c7
 8007e80:	080080c7 	.word	0x080080c7
 8007e84:	08007ebb 	.word	0x08007ebb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e88:	4b94      	ldr	r3, [pc, #592]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d009      	beq.n	8007ea8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e94:	4b91      	ldr	r3, [pc, #580]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	08db      	lsrs	r3, r3, #3
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	4a90      	ldr	r2, [pc, #576]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007ea6:	e111      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ea8:	4b8d      	ldr	r3, [pc, #564]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007eaa:	61bb      	str	r3, [r7, #24]
      break;
 8007eac:	e10e      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007eae:	4b8d      	ldr	r3, [pc, #564]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007eb0:	61bb      	str	r3, [r7, #24]
      break;
 8007eb2:	e10b      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007eb4:	4b8c      	ldr	r3, [pc, #560]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007eb6:	61bb      	str	r3, [r7, #24]
      break;
 8007eb8:	e108      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eba:	4b88      	ldr	r3, [pc, #544]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007ec4:	4b85      	ldr	r3, [pc, #532]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	091b      	lsrs	r3, r3, #4
 8007eca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ece:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ed0:	4b82      	ldr	r3, [pc, #520]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007eda:	4b80      	ldr	r3, [pc, #512]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	08db      	lsrs	r3, r3, #3
 8007ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	fb02 f303 	mul.w	r3, r2, r3
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 80e1 	beq.w	80080c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	f000 8083 	beq.w	800800c <HAL_RCC_GetSysClockFreq+0x204>
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	f200 80a1 	bhi.w	8008050 <HAL_RCC_GetSysClockFreq+0x248>
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_RCC_GetSysClockFreq+0x114>
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d056      	beq.n	8007fc8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f1a:	e099      	b.n	8008050 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f1c:	4b6f      	ldr	r3, [pc, #444]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d02d      	beq.n	8007f84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f28:	4b6c      	ldr	r3, [pc, #432]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	08db      	lsrs	r3, r3, #3
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	4a6b      	ldr	r2, [pc, #428]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
 8007f38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f52:	4b62      	ldr	r3, [pc, #392]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f66:	eddf 5a61 	vldr	s11, [pc, #388]	; 80080ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007f82:	e087      	b.n	8008094 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80080f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f96:	4b51      	ldr	r3, [pc, #324]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007faa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80080ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007fc6:	e065      	b.n	8008094 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80080f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fda:	4b40      	ldr	r3, [pc, #256]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80080ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800800a:	e043      	b.n	8008094 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008016:	eddf 6a38 	vldr	s13, [pc, #224]	; 80080f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801e:	4b2f      	ldr	r3, [pc, #188]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008032:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80080ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800804e:	e021      	b.n	8008094 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80080f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800805e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008062:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008072:	ed97 6a02 	vldr	s12, [r7, #8]
 8008076:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80080ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800807a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008092:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008094:	4b11      	ldr	r3, [pc, #68]	; (80080dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008098:	0a5b      	lsrs	r3, r3, #9
 800809a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809e:	3301      	adds	r3, #1
 80080a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b8:	ee17 3a90 	vmov	r3, s15
 80080bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80080be:	e005      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
      break;
 80080c4:	e002      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080c8:	61bb      	str	r3, [r7, #24]
      break;
 80080ca:	bf00      	nop
  }

  return sysclockfreq;
 80080cc:	69bb      	ldr	r3, [r7, #24]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3724      	adds	r7, #36	; 0x24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	03d09000 	.word	0x03d09000
 80080e4:	003d0900 	.word	0x003d0900
 80080e8:	007a1200 	.word	0x007a1200
 80080ec:	46000000 	.word	0x46000000
 80080f0:	4c742400 	.word	0x4c742400
 80080f4:	4a742400 	.word	0x4a742400
 80080f8:	4af42400 	.word	0x4af42400

080080fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008102:	f7ff fe81 	bl	8007e08 <HAL_RCC_GetSysClockFreq>
 8008106:	4602      	mov	r2, r0
 8008108:	4b10      	ldr	r3, [pc, #64]	; (800814c <HAL_RCC_GetHCLKFreq+0x50>)
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	0a1b      	lsrs	r3, r3, #8
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	490f      	ldr	r1, [pc, #60]	; (8008150 <HAL_RCC_GetHCLKFreq+0x54>)
 8008114:	5ccb      	ldrb	r3, [r1, r3]
 8008116:	f003 031f 	and.w	r3, r3, #31
 800811a:	fa22 f303 	lsr.w	r3, r2, r3
 800811e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008120:	4b0a      	ldr	r3, [pc, #40]	; (800814c <HAL_RCC_GetHCLKFreq+0x50>)
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	4a09      	ldr	r2, [pc, #36]	; (8008150 <HAL_RCC_GetHCLKFreq+0x54>)
 800812a:	5cd3      	ldrb	r3, [r2, r3]
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	fa22 f303 	lsr.w	r3, r2, r3
 8008136:	4a07      	ldr	r2, [pc, #28]	; (8008154 <HAL_RCC_GetHCLKFreq+0x58>)
 8008138:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800813a:	4a07      	ldr	r2, [pc, #28]	; (8008158 <HAL_RCC_GetHCLKFreq+0x5c>)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <HAL_RCC_GetHCLKFreq+0x58>)
 8008142:	681b      	ldr	r3, [r3, #0]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	58024400 	.word	0x58024400
 8008150:	0800b5f8 	.word	0x0800b5f8
 8008154:	24000008 	.word	0x24000008
 8008158:	24000004 	.word	0x24000004

0800815c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008160:	f7ff ffcc 	bl	80080fc <HAL_RCC_GetHCLKFreq>
 8008164:	4602      	mov	r2, r0
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	091b      	lsrs	r3, r3, #4
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	4904      	ldr	r1, [pc, #16]	; (8008184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008172:	5ccb      	ldrb	r3, [r1, r3]
 8008174:	f003 031f 	and.w	r3, r3, #31
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800817c:	4618      	mov	r0, r3
 800817e:	bd80      	pop	{r7, pc}
 8008180:	58024400 	.word	0x58024400
 8008184:	0800b5f8 	.word	0x0800b5f8

08008188 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800818c:	b0ca      	sub	sp, #296	; 0x128
 800818e:	af00      	add	r7, sp, #0
 8008190:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008194:	2300      	movs	r3, #0
 8008196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800819a:	2300      	movs	r3, #0
 800819c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80081ac:	2500      	movs	r5, #0
 80081ae:	ea54 0305 	orrs.w	r3, r4, r5
 80081b2:	d049      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80081b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081be:	d02f      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80081c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081c4:	d828      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80081c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ca:	d01a      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80081cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081d0:	d822      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80081d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081da:	d007      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80081dc:	e01c      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081de:	4bb8      	ldr	r3, [pc, #736]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	4ab7      	ldr	r2, [pc, #732]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081ea:	e01a      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f0:	3308      	adds	r3, #8
 80081f2:	2102      	movs	r1, #2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f002 fb61 	bl	800a8bc <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008200:	e00f      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008206:	3328      	adds	r3, #40	; 0x28
 8008208:	2102      	movs	r1, #2
 800820a:	4618      	mov	r0, r3
 800820c:	f002 fc08 	bl	800aa20 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008216:	e004      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800822a:	4ba5      	ldr	r3, [pc, #660]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008238:	4aa1      	ldr	r2, [pc, #644]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800823a:	430b      	orrs	r3, r1
 800823c:	6513      	str	r3, [r2, #80]	; 0x50
 800823e:	e003      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008254:	f04f 0900 	mov.w	r9, #0
 8008258:	ea58 0309 	orrs.w	r3, r8, r9
 800825c:	d047      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008264:	2b04      	cmp	r3, #4
 8008266:	d82a      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008268:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	08008285 	.word	0x08008285
 8008274:	08008293 	.word	0x08008293
 8008278:	080082a9 	.word	0x080082a9
 800827c:	080082c7 	.word	0x080082c7
 8008280:	080082c7 	.word	0x080082c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008284:	4b8e      	ldr	r3, [pc, #568]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	4a8d      	ldr	r2, [pc, #564]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800828a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800828e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008290:	e01a      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008296:	3308      	adds	r3, #8
 8008298:	2100      	movs	r1, #0
 800829a:	4618      	mov	r0, r3
 800829c:	f002 fb0e 	bl	800a8bc <RCCEx_PLL2_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082a6:	e00f      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ac:	3328      	adds	r3, #40	; 0x28
 80082ae:	2100      	movs	r1, #0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f002 fbb5 	bl	800aa20 <RCCEx_PLL3_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082bc:	e004      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082c4:	e000      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80082c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082d0:	4b7b      	ldr	r3, [pc, #492]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d4:	f023 0107 	bic.w	r1, r3, #7
 80082d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082de:	4a78      	ldr	r2, [pc, #480]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6513      	str	r3, [r2, #80]	; 0x50
 80082e4:	e003      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80082fa:	f04f 0b00 	mov.w	fp, #0
 80082fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8008302:	d04c      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830e:	d030      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008314:	d829      	bhi.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008316:	2bc0      	cmp	r3, #192	; 0xc0
 8008318:	d02d      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800831a:	2bc0      	cmp	r3, #192	; 0xc0
 800831c:	d825      	bhi.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800831e:	2b80      	cmp	r3, #128	; 0x80
 8008320:	d018      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008322:	2b80      	cmp	r3, #128	; 0x80
 8008324:	d821      	bhi.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800832a:	2b40      	cmp	r3, #64	; 0x40
 800832c:	d007      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800832e:	e01c      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008330:	4b63      	ldr	r3, [pc, #396]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008334:	4a62      	ldr	r2, [pc, #392]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800833a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800833c:	e01c      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008342:	3308      	adds	r3, #8
 8008344:	2100      	movs	r1, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f002 fab8 	bl	800a8bc <RCCEx_PLL2_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008352:	e011      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008358:	3328      	adds	r3, #40	; 0x28
 800835a:	2100      	movs	r1, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f002 fb5f 	bl	800aa20 <RCCEx_PLL3_Config>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008368:	e006      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008370:	e002      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008372:	bf00      	nop
 8008374:	e000      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008380:	4b4f      	ldr	r3, [pc, #316]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008384:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800838c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838e:	4a4c      	ldr	r2, [pc, #304]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008390:	430b      	orrs	r3, r1
 8008392:	6513      	str	r3, [r2, #80]	; 0x50
 8008394:	e003      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800839a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80083aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083ae:	2300      	movs	r3, #0
 80083b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80083b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80083b8:	460b      	mov	r3, r1
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d053      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80083c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ca:	d035      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80083cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d0:	d82e      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083d6:	d031      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80083d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083dc:	d828      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083e2:	d01a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80083e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083e8:	d822      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80083ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f2:	d007      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80083f4:	e01c      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f6:	4b32      	ldr	r3, [pc, #200]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	4a31      	ldr	r2, [pc, #196]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008402:	e01c      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008408:	3308      	adds	r3, #8
 800840a:	2100      	movs	r1, #0
 800840c:	4618      	mov	r0, r3
 800840e:	f002 fa55 	bl	800a8bc <RCCEx_PLL2_Config>
 8008412:	4603      	mov	r3, r0
 8008414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008418:	e011      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841e:	3328      	adds	r3, #40	; 0x28
 8008420:	2100      	movs	r1, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f002 fafc 	bl	800aa20 <RCCEx_PLL3_Config>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800842e:	e006      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008436:	e002      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008438:	bf00      	nop
 800843a:	e000      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800843c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800843e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008446:	4b1e      	ldr	r3, [pc, #120]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800844e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008456:	4a1a      	ldr	r2, [pc, #104]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008458:	430b      	orrs	r3, r1
 800845a:	6593      	str	r3, [r2, #88]	; 0x58
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008472:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008476:	2300      	movs	r3, #0
 8008478:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800847c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008480:	460b      	mov	r3, r1
 8008482:	4313      	orrs	r3, r2
 8008484:	d056      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800848e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008492:	d038      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008498:	d831      	bhi.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800849a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800849e:	d034      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80084a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084a4:	d82b      	bhi.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80084a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084aa:	d01d      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80084ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084b0:	d825      	bhi.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d006      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80084b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084ba:	d00a      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80084bc:	e01f      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80084be:	bf00      	nop
 80084c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c4:	4ba2      	ldr	r3, [pc, #648]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4aa1      	ldr	r2, [pc, #644]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084d0:	e01c      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d6:	3308      	adds	r3, #8
 80084d8:	2100      	movs	r1, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 f9ee 	bl	800a8bc <RCCEx_PLL2_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80084e6:	e011      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ec:	3328      	adds	r3, #40	; 0x28
 80084ee:	2100      	movs	r1, #0
 80084f0:	4618      	mov	r0, r3
 80084f2:	f002 fa95 	bl	800aa20 <RCCEx_PLL3_Config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084fc:	e006      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008504:	e002      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008506:	bf00      	nop
 8008508:	e000      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800850a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10b      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008514:	4b8e      	ldr	r3, [pc, #568]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008518:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008520:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008524:	4a8a      	ldr	r2, [pc, #552]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008526:	430b      	orrs	r3, r1
 8008528:	6593      	str	r3, [r2, #88]	; 0x58
 800852a:	e003      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800852c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008530:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008540:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008544:	2300      	movs	r3, #0
 8008546:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800854a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800854e:	460b      	mov	r3, r1
 8008550:	4313      	orrs	r3, r2
 8008552:	d03a      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855a:	2b30      	cmp	r3, #48	; 0x30
 800855c:	d01f      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	d819      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008562:	2b20      	cmp	r3, #32
 8008564:	d00c      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008566:	2b20      	cmp	r3, #32
 8008568:	d815      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d019      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800856e:	2b10      	cmp	r3, #16
 8008570:	d111      	bne.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008572:	4b77      	ldr	r3, [pc, #476]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	4a76      	ldr	r2, [pc, #472]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800857c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800857e:	e011      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008584:	3308      	adds	r3, #8
 8008586:	2102      	movs	r1, #2
 8008588:	4618      	mov	r0, r3
 800858a:	f002 f997 	bl	800a8bc <RCCEx_PLL2_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008594:	e006      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800859c:	e002      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800859e:	bf00      	nop
 80085a0:	e000      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80085a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80085ac:	4b68      	ldr	r3, [pc, #416]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80085b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	4a65      	ldr	r2, [pc, #404]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085bc:	430b      	orrs	r3, r1
 80085be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085c0:	e003      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80085d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085da:	2300      	movs	r3, #0
 80085dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4313      	orrs	r3, r2
 80085e8:	d051      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085f4:	d035      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80085f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085fa:	d82e      	bhi.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008600:	d031      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008606:	d828      	bhi.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860c:	d01a      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800860e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008612:	d822      	bhi.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861c:	d007      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800861e:	e01c      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008620:	4b4b      	ldr	r3, [pc, #300]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	4a4a      	ldr	r2, [pc, #296]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800862a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800862c:	e01c      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800862e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008632:	3308      	adds	r3, #8
 8008634:	2100      	movs	r1, #0
 8008636:	4618      	mov	r0, r3
 8008638:	f002 f940 	bl	800a8bc <RCCEx_PLL2_Config>
 800863c:	4603      	mov	r3, r0
 800863e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008642:	e011      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008648:	3328      	adds	r3, #40	; 0x28
 800864a:	2100      	movs	r1, #0
 800864c:	4618      	mov	r0, r3
 800864e:	f002 f9e7 	bl	800aa20 <RCCEx_PLL3_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008658:	e006      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008660:	e002      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008662:	bf00      	nop
 8008664:	e000      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008670:	4b37      	ldr	r3, [pc, #220]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008674:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800867c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867e:	4a34      	ldr	r2, [pc, #208]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008680:	430b      	orrs	r3, r1
 8008682:	6513      	str	r3, [r2, #80]	; 0x50
 8008684:	e003      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800869a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80086a8:	460b      	mov	r3, r1
 80086aa:	4313      	orrs	r3, r2
 80086ac:	d056      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086b8:	d033      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80086ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086be:	d82c      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086c4:	d02f      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80086c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086ca:	d826      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086d0:	d02b      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80086d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086d6:	d820      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086dc:	d012      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80086de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e2:	d81a      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d022      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80086e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ec:	d115      	bne.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f2:	3308      	adds	r3, #8
 80086f4:	2101      	movs	r1, #1
 80086f6:	4618      	mov	r0, r3
 80086f8:	f002 f8e0 	bl	800a8bc <RCCEx_PLL2_Config>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008702:	e015      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008708:	3328      	adds	r3, #40	; 0x28
 800870a:	2101      	movs	r1, #1
 800870c:	4618      	mov	r0, r3
 800870e:	f002 f987 	bl	800aa20 <RCCEx_PLL3_Config>
 8008712:	4603      	mov	r3, r0
 8008714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008718:	e00a      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008720:	e006      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008722:	bf00      	nop
 8008724:	e004      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008726:	bf00      	nop
 8008728:	e002      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800872a:	bf00      	nop
 800872c:	e000      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800872e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10d      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800873a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008746:	4a02      	ldr	r2, [pc, #8]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008748:	430b      	orrs	r3, r1
 800874a:	6513      	str	r3, [r2, #80]	; 0x50
 800874c:	e006      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800874e:	bf00      	nop
 8008750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800876c:	2300      	movs	r3, #0
 800876e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008772:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008776:	460b      	mov	r3, r1
 8008778:	4313      	orrs	r3, r2
 800877a:	d055      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800877c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008788:	d033      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800878a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800878e:	d82c      	bhi.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008794:	d02f      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879a:	d826      	bhi.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800879c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087a0:	d02b      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 80087a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087a6:	d820      	bhi.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80087a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ac:	d012      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80087ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087b2:	d81a      	bhi.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d022      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 80087b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087bc:	d115      	bne.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c2:	3308      	adds	r3, #8
 80087c4:	2101      	movs	r1, #1
 80087c6:	4618      	mov	r0, r3
 80087c8:	f002 f878 	bl	800a8bc <RCCEx_PLL2_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087d2:	e015      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d8:	3328      	adds	r3, #40	; 0x28
 80087da:	2101      	movs	r1, #1
 80087dc:	4618      	mov	r0, r3
 80087de:	f002 f91f 	bl	800aa20 <RCCEx_PLL3_Config>
 80087e2:	4603      	mov	r3, r0
 80087e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087e8:	e00a      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087f0:	e006      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087f2:	bf00      	nop
 80087f4:	e004      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087f6:	bf00      	nop
 80087f8:	e002      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087fa:	bf00      	nop
 80087fc:	e000      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10b      	bne.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008808:	4ba3      	ldr	r3, [pc, #652]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800880a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800880c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008818:	4a9f      	ldr	r2, [pc, #636]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800881a:	430b      	orrs	r3, r1
 800881c:	6593      	str	r3, [r2, #88]	; 0x58
 800881e:	e003      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008838:	2300      	movs	r3, #0
 800883a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800883e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008842:	460b      	mov	r3, r1
 8008844:	4313      	orrs	r3, r2
 8008846:	d037      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008852:	d00e      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008858:	d816      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d018      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800885e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008862:	d111      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008864:	4b8c      	ldr	r3, [pc, #560]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	4a8b      	ldr	r2, [pc, #556]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800886a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800886e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008870:	e00f      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008876:	3308      	adds	r3, #8
 8008878:	2101      	movs	r1, #1
 800887a:	4618      	mov	r0, r3
 800887c:	f002 f81e 	bl	800a8bc <RCCEx_PLL2_Config>
 8008880:	4603      	mov	r3, r0
 8008882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008886:	e004      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800888e:	e000      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800889a:	4b7f      	ldr	r3, [pc, #508]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800889c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a8:	4a7b      	ldr	r2, [pc, #492]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088aa:	430b      	orrs	r3, r1
 80088ac:	6513      	str	r3, [r2, #80]	; 0x50
 80088ae:	e003      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80088c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088c8:	2300      	movs	r3, #0
 80088ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80088ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4313      	orrs	r3, r2
 80088d6:	d039      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d81c      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80088e2:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80088e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e8:	08008925 	.word	0x08008925
 80088ec:	080088f9 	.word	0x080088f9
 80088f0:	08008907 	.word	0x08008907
 80088f4:	08008925 	.word	0x08008925
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f8:	4b67      	ldr	r3, [pc, #412]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	4a66      	ldr	r2, [pc, #408]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008904:	e00f      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890a:	3308      	adds	r3, #8
 800890c:	2102      	movs	r1, #2
 800890e:	4618      	mov	r0, r3
 8008910:	f001 ffd4 	bl	800a8bc <RCCEx_PLL2_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800891a:	e004      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008922:	e000      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800892e:	4b5a      	ldr	r3, [pc, #360]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008932:	f023 0103 	bic.w	r1, r3, #3
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893c:	4a56      	ldr	r2, [pc, #344]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800893e:	430b      	orrs	r3, r1
 8008940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008942:	e003      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800894c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800895c:	2300      	movs	r3, #0
 800895e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008962:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008966:	460b      	mov	r3, r1
 8008968:	4313      	orrs	r3, r2
 800896a:	f000 809f 	beq.w	8008aac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800896e:	4b4b      	ldr	r3, [pc, #300]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a4a      	ldr	r2, [pc, #296]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800897a:	f7f8 fc25 	bl	80011c8 <HAL_GetTick>
 800897e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008982:	e00b      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008984:	f7f8 fc20 	bl	80011c8 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b64      	cmp	r3, #100	; 0x64
 8008992:	d903      	bls.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800899a:	e005      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800899c:	4b3f      	ldr	r3, [pc, #252]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d0ed      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80089a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d179      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80089b0:	4b39      	ldr	r3, [pc, #228]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089bc:	4053      	eors	r3, r2
 80089be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d015      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089c6:	4b34      	ldr	r3, [pc, #208]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089d2:	4b31      	ldr	r3, [pc, #196]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d6:	4a30      	ldr	r2, [pc, #192]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089dc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089de:	4b2e      	ldr	r3, [pc, #184]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e2:	4a2d      	ldr	r2, [pc, #180]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089e8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089ea:	4a2b      	ldr	r2, [pc, #172]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80089f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fe:	d118      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a00:	f7f8 fbe2 	bl	80011c8 <HAL_GetTick>
 8008a04:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a08:	e00d      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a0a:	f7f8 fbdd 	bl	80011c8 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008a14:	1ad2      	subs	r2, r2, r3
 8008a16:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d903      	bls.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008a24:	e005      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a26:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0eb      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d129      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a4a:	d10e      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008a4c:	4b12      	ldr	r3, [pc, #72]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a5c:	091a      	lsrs	r2, r3, #4
 8008a5e:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	4a0d      	ldr	r2, [pc, #52]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a64:	430b      	orrs	r3, r1
 8008a66:	6113      	str	r3, [r2, #16]
 8008a68:	e005      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008a6a:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	4a0a      	ldr	r2, [pc, #40]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a74:	6113      	str	r3, [r2, #16]
 8008a76:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a86:	4a04      	ldr	r2, [pc, #16]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008a8c:	e00e      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008a96:	e009      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008a98:	58024400 	.word	0x58024400
 8008a9c:	58024800 	.word	0x58024800
 8008aa0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f002 0301 	and.w	r3, r2, #1
 8008ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ac2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	f000 8089 	beq.w	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ad4:	2b28      	cmp	r3, #40	; 0x28
 8008ad6:	d86b      	bhi.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008bb9 	.word	0x08008bb9
 8008ae4:	08008bb1 	.word	0x08008bb1
 8008ae8:	08008bb1 	.word	0x08008bb1
 8008aec:	08008bb1 	.word	0x08008bb1
 8008af0:	08008bb1 	.word	0x08008bb1
 8008af4:	08008bb1 	.word	0x08008bb1
 8008af8:	08008bb1 	.word	0x08008bb1
 8008afc:	08008bb1 	.word	0x08008bb1
 8008b00:	08008b85 	.word	0x08008b85
 8008b04:	08008bb1 	.word	0x08008bb1
 8008b08:	08008bb1 	.word	0x08008bb1
 8008b0c:	08008bb1 	.word	0x08008bb1
 8008b10:	08008bb1 	.word	0x08008bb1
 8008b14:	08008bb1 	.word	0x08008bb1
 8008b18:	08008bb1 	.word	0x08008bb1
 8008b1c:	08008bb1 	.word	0x08008bb1
 8008b20:	08008b9b 	.word	0x08008b9b
 8008b24:	08008bb1 	.word	0x08008bb1
 8008b28:	08008bb1 	.word	0x08008bb1
 8008b2c:	08008bb1 	.word	0x08008bb1
 8008b30:	08008bb1 	.word	0x08008bb1
 8008b34:	08008bb1 	.word	0x08008bb1
 8008b38:	08008bb1 	.word	0x08008bb1
 8008b3c:	08008bb1 	.word	0x08008bb1
 8008b40:	08008bb9 	.word	0x08008bb9
 8008b44:	08008bb1 	.word	0x08008bb1
 8008b48:	08008bb1 	.word	0x08008bb1
 8008b4c:	08008bb1 	.word	0x08008bb1
 8008b50:	08008bb1 	.word	0x08008bb1
 8008b54:	08008bb1 	.word	0x08008bb1
 8008b58:	08008bb1 	.word	0x08008bb1
 8008b5c:	08008bb1 	.word	0x08008bb1
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008bb1 	.word	0x08008bb1
 8008b68:	08008bb1 	.word	0x08008bb1
 8008b6c:	08008bb1 	.word	0x08008bb1
 8008b70:	08008bb1 	.word	0x08008bb1
 8008b74:	08008bb1 	.word	0x08008bb1
 8008b78:	08008bb1 	.word	0x08008bb1
 8008b7c:	08008bb1 	.word	0x08008bb1
 8008b80:	08008bb9 	.word	0x08008bb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b88:	3308      	adds	r3, #8
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fe95 	bl	800a8bc <RCCEx_PLL2_Config>
 8008b92:	4603      	mov	r3, r0
 8008b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b98:	e00f      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9e:	3328      	adds	r3, #40	; 0x28
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f001 ff3c 	bl	800aa20 <RCCEx_PLL3_Config>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008bae:	e004      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bb6:	e000      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10a      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008bc2:	4bbf      	ldr	r3, [pc, #764]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bd0:	4abb      	ldr	r2, [pc, #748]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	6553      	str	r3, [r2, #84]	; 0x54
 8008bd6:	e003      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f002 0302 	and.w	r3, r2, #2
 8008bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008bf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	d041      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c06:	2b05      	cmp	r3, #5
 8008c08:	d824      	bhi.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c5d 	.word	0x08008c5d
 8008c14:	08008c29 	.word	0x08008c29
 8008c18:	08008c3f 	.word	0x08008c3f
 8008c1c:	08008c5d 	.word	0x08008c5d
 8008c20:	08008c5d 	.word	0x08008c5d
 8008c24:	08008c5d 	.word	0x08008c5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	2101      	movs	r1, #1
 8008c30:	4618      	mov	r0, r3
 8008c32:	f001 fe43 	bl	800a8bc <RCCEx_PLL2_Config>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c3c:	e00f      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c42:	3328      	adds	r3, #40	; 0x28
 8008c44:	2101      	movs	r1, #1
 8008c46:	4618      	mov	r0, r3
 8008c48:	f001 feea 	bl	800aa20 <RCCEx_PLL3_Config>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c52:	e004      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c5a:	e000      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10a      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c66:	4b96      	ldr	r3, [pc, #600]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6a:	f023 0107 	bic.w	r1, r3, #7
 8008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c74:	4a92      	ldr	r2, [pc, #584]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c76:	430b      	orrs	r3, r1
 8008c78:	6553      	str	r3, [r2, #84]	; 0x54
 8008c7a:	e003      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f002 0304 	and.w	r3, r2, #4
 8008c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c94:	2300      	movs	r3, #0
 8008c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	d044      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cac:	2b05      	cmp	r3, #5
 8008cae:	d825      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008cb0:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb6:	bf00      	nop
 8008cb8:	08008d05 	.word	0x08008d05
 8008cbc:	08008cd1 	.word	0x08008cd1
 8008cc0:	08008ce7 	.word	0x08008ce7
 8008cc4:	08008d05 	.word	0x08008d05
 8008cc8:	08008d05 	.word	0x08008d05
 8008ccc:	08008d05 	.word	0x08008d05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 fdef 	bl	800a8bc <RCCEx_PLL2_Config>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ce4:	e00f      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cea:	3328      	adds	r3, #40	; 0x28
 8008cec:	2101      	movs	r1, #1
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f001 fe96 	bl	800aa20 <RCCEx_PLL3_Config>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cfa:	e004      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d02:	e000      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10b      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d0e:	4b6c      	ldr	r3, [pc, #432]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d12:	f023 0107 	bic.w	r1, r3, #7
 8008d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d1e:	4a68      	ldr	r2, [pc, #416]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d20:	430b      	orrs	r3, r1
 8008d22:	6593      	str	r3, [r2, #88]	; 0x58
 8008d24:	e003      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f002 0320 	and.w	r3, r2, #32
 8008d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	d055      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d5a:	d033      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d60:	d82c      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d66:	d02f      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6c:	d826      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d72:	d02b      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008d74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d78:	d820      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d7e:	d012      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d84:	d81a      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d022      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d8e:	d115      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d94:	3308      	adds	r3, #8
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 fd8f 	bl	800a8bc <RCCEx_PLL2_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008da4:	e015      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008daa:	3328      	adds	r3, #40	; 0x28
 8008dac:	2102      	movs	r1, #2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fe36 	bl	800aa20 <RCCEx_PLL3_Config>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008dba:	e00a      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008dc2:	e006      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008dc4:	bf00      	nop
 8008dc6:	e004      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008dc8:	bf00      	nop
 8008dca:	e002      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008dcc:	bf00      	nop
 8008dce:	e000      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dda:	4b39      	ldr	r3, [pc, #228]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dde:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dea:	4a35      	ldr	r2, [pc, #212]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008dec:	430b      	orrs	r3, r1
 8008dee:	6553      	str	r3, [r2, #84]	; 0x54
 8008df0:	e003      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4313      	orrs	r3, r2
 8008e18:	d058      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e26:	d033      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008e28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e2c:	d82c      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e32:	d02f      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e38:	d826      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e3e:	d02b      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008e40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e44:	d820      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e4a:	d012      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e50:	d81a      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d022      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5a:	d115      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e60:	3308      	adds	r3, #8
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 fd29 	bl	800a8bc <RCCEx_PLL2_Config>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e70:	e015      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e76:	3328      	adds	r3, #40	; 0x28
 8008e78:	2102      	movs	r1, #2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f001 fdd0 	bl	800aa20 <RCCEx_PLL3_Config>
 8008e80:	4603      	mov	r3, r0
 8008e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e86:	e00a      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e8e:	e006      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e90:	bf00      	nop
 8008e92:	e004      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e94:	bf00      	nop
 8008e96:	e002      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e98:	bf00      	nop
 8008e9a:	e000      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10e      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ea6:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eaa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008eb6:	4a02      	ldr	r2, [pc, #8]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	6593      	str	r3, [r2, #88]	; 0x58
 8008ebc:	e006      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008ebe:	bf00      	nop
 8008ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008edc:	2300      	movs	r3, #0
 8008ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ee2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	d055      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ef4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ef8:	d033      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008efa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008efe:	d82c      	bhi.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f04:	d02f      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f0a:	d826      	bhi.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008f0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f10:	d02b      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008f12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f16:	d820      	bhi.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f1c:	d012      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f22:	d81a      	bhi.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d022      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f2c:	d115      	bne.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f32:	3308      	adds	r3, #8
 8008f34:	2100      	movs	r1, #0
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 fcc0 	bl	800a8bc <RCCEx_PLL2_Config>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f42:	e015      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f48:	3328      	adds	r3, #40	; 0x28
 8008f4a:	2102      	movs	r1, #2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 fd67 	bl	800aa20 <RCCEx_PLL3_Config>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f58:	e00a      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f60:	e006      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f62:	bf00      	nop
 8008f64:	e004      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f66:	bf00      	nop
 8008f68:	e002      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10b      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f78:	4ba1      	ldr	r3, [pc, #644]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f88:	4a9d      	ldr	r2, [pc, #628]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f8e:	e003      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	f002 0308 	and.w	r3, r2, #8
 8008fa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	d01e      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc4:	d10c      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fca:	3328      	adds	r3, #40	; 0x28
 8008fcc:	2102      	movs	r1, #2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 fd26 	bl	800aa20 <RCCEx_PLL3_Config>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008fe0:	4b87      	ldr	r3, [pc, #540]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ff0:	4a83      	ldr	r2, [pc, #524]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f002 0310 	and.w	r3, r2, #16
 8009002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009006:	2300      	movs	r3, #0
 8009008:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800900c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009010:	460b      	mov	r3, r1
 8009012:	4313      	orrs	r3, r2
 8009014:	d01e      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800901e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009022:	d10c      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009028:	3328      	adds	r3, #40	; 0x28
 800902a:	2102      	movs	r1, #2
 800902c:	4618      	mov	r0, r3
 800902e:	f001 fcf7 	bl	800aa20 <RCCEx_PLL3_Config>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800903e:	4b70      	ldr	r3, [pc, #448]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800904e:	4a6c      	ldr	r2, [pc, #432]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009050:	430b      	orrs	r3, r1
 8009052:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009064:	2300      	movs	r3, #0
 8009066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800906a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800906e:	460b      	mov	r3, r1
 8009070:	4313      	orrs	r3, r2
 8009072:	d03e      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009078:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800907c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009080:	d022      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009086:	d81b      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800908c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009090:	d00b      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009092:	e015      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009098:	3308      	adds	r3, #8
 800909a:	2100      	movs	r1, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f001 fc0d 	bl	800a8bc <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80090a8:	e00f      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ae:	3328      	adds	r3, #40	; 0x28
 80090b0:	2102      	movs	r1, #2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 fcb4 	bl	800aa20 <RCCEx_PLL3_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80090be:	e004      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090c6:	e000      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80090c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10b      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090d2:	4b4b      	ldr	r3, [pc, #300]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090e2:	4a47      	ldr	r2, [pc, #284]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6593      	str	r3, [r2, #88]	; 0x58
 80090e8:	e003      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80090fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8009100:	2300      	movs	r3, #0
 8009102:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009104:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009108:	460b      	mov	r3, r1
 800910a:	4313      	orrs	r3, r2
 800910c:	d03b      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800910e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009116:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800911a:	d01f      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800911c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009120:	d818      	bhi.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009126:	d003      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800912c:	d007      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800912e:	e011      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009130:	4b33      	ldr	r3, [pc, #204]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	4a32      	ldr	r2, [pc, #200]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800913a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800913c:	e00f      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009142:	3328      	adds	r3, #40	; 0x28
 8009144:	2101      	movs	r1, #1
 8009146:	4618      	mov	r0, r3
 8009148:	f001 fc6a 	bl	800aa20 <RCCEx_PLL3_Config>
 800914c:	4603      	mov	r3, r0
 800914e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009152:	e004      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800915a:	e000      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800915c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800915e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10b      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009166:	4b26      	ldr	r3, [pc, #152]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800916e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	4a22      	ldr	r2, [pc, #136]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009178:	430b      	orrs	r3, r1
 800917a:	6553      	str	r3, [r2, #84]	; 0x54
 800917c:	e003      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009182:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009192:	673b      	str	r3, [r7, #112]	; 0x70
 8009194:	2300      	movs	r3, #0
 8009196:	677b      	str	r3, [r7, #116]	; 0x74
 8009198:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800919c:	460b      	mov	r3, r1
 800919e:	4313      	orrs	r3, r2
 80091a0:	d034      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80091ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b0:	d007      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80091b2:	e011      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b4:	4b12      	ldr	r3, [pc, #72]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	4a11      	ldr	r2, [pc, #68]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091c0:	e00e      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c6:	3308      	adds	r3, #8
 80091c8:	2102      	movs	r1, #2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 fb76 	bl	800a8bc <RCCEx_PLL2_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091d6:	e003      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10d      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091e8:	4b05      	ldr	r3, [pc, #20]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f6:	4a02      	ldr	r2, [pc, #8]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091f8:	430b      	orrs	r3, r1
 80091fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091fc:	e006      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80091fe:	bf00      	nop
 8009200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009204:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009208:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800920c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009218:	66bb      	str	r3, [r7, #104]	; 0x68
 800921a:	2300      	movs	r3, #0
 800921c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800921e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009222:	460b      	mov	r3, r1
 8009224:	4313      	orrs	r3, r2
 8009226:	d00c      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800922c:	3328      	adds	r3, #40	; 0x28
 800922e:	2102      	movs	r1, #2
 8009230:	4618      	mov	r0, r3
 8009232:	f001 fbf5 	bl	800aa20 <RCCEx_PLL3_Config>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800924e:	663b      	str	r3, [r7, #96]	; 0x60
 8009250:	2300      	movs	r3, #0
 8009252:	667b      	str	r3, [r7, #100]	; 0x64
 8009254:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009258:	460b      	mov	r3, r1
 800925a:	4313      	orrs	r3, r2
 800925c:	d038      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800926a:	d018      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800926c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009270:	d811      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009276:	d014      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927c:	d80b      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d011      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009286:	d106      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009288:	4bc3      	ldr	r3, [pc, #780]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	4ac2      	ldr	r2, [pc, #776]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800928e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009294:	e008      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800929c:	e004      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800929e:	bf00      	nop
 80092a0:	e002      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80092a2:	bf00      	nop
 80092a4:	e000      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80092a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10b      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80092b0:	4bb9      	ldr	r3, [pc, #740]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80092b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c0:	4ab5      	ldr	r2, [pc, #724]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092c2:	430b      	orrs	r3, r1
 80092c4:	6553      	str	r3, [r2, #84]	; 0x54
 80092c6:	e003      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80092dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80092de:	2300      	movs	r3, #0
 80092e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80092e6:	460b      	mov	r3, r1
 80092e8:	4313      	orrs	r3, r2
 80092ea:	d009      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092ec:	4baa      	ldr	r3, [pc, #680]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80092f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092fa:	4aa7      	ldr	r2, [pc, #668]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092fc:	430b      	orrs	r3, r1
 80092fe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800930c:	653b      	str	r3, [r7, #80]	; 0x50
 800930e:	2300      	movs	r3, #0
 8009310:	657b      	str	r3, [r7, #84]	; 0x54
 8009312:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009316:	460b      	mov	r3, r1
 8009318:	4313      	orrs	r3, r2
 800931a:	d00a      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800931c:	4b9e      	ldr	r3, [pc, #632]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009328:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800932c:	4a9a      	ldr	r2, [pc, #616]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800932e:	430b      	orrs	r3, r1
 8009330:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800933e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009340:	2300      	movs	r3, #0
 8009342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009344:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009348:	460b      	mov	r3, r1
 800934a:	4313      	orrs	r3, r2
 800934c:	d009      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800934e:	4b92      	ldr	r3, [pc, #584]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009352:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800935a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935c:	4a8e      	ldr	r2, [pc, #568]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800935e:	430b      	orrs	r3, r1
 8009360:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800936e:	643b      	str	r3, [r7, #64]	; 0x40
 8009370:	2300      	movs	r3, #0
 8009372:	647b      	str	r3, [r7, #68]	; 0x44
 8009374:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009378:	460b      	mov	r3, r1
 800937a:	4313      	orrs	r3, r2
 800937c:	d00e      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800937e:	4b86      	ldr	r3, [pc, #536]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	4a85      	ldr	r2, [pc, #532]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009388:	6113      	str	r3, [r2, #16]
 800938a:	4b83      	ldr	r3, [pc, #524]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800938c:	6919      	ldr	r1, [r3, #16]
 800938e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009392:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009396:	4a80      	ldr	r2, [pc, #512]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009398:	430b      	orrs	r3, r1
 800939a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800939c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80093a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80093aa:	2300      	movs	r3, #0
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80093b2:	460b      	mov	r3, r1
 80093b4:	4313      	orrs	r3, r2
 80093b6:	d009      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80093b8:	4b77      	ldr	r3, [pc, #476]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093bc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80093c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	4a74      	ldr	r2, [pc, #464]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093c8:	430b      	orrs	r3, r1
 80093ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80093cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80093d8:	633b      	str	r3, [r7, #48]	; 0x30
 80093da:	2300      	movs	r3, #0
 80093dc:	637b      	str	r3, [r7, #52]	; 0x34
 80093de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80093e2:	460b      	mov	r3, r1
 80093e4:	4313      	orrs	r3, r2
 80093e6:	d00a      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093e8:	4b6b      	ldr	r3, [pc, #428]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f8:	4a67      	ldr	r2, [pc, #412]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093fa:	430b      	orrs	r3, r1
 80093fc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	2100      	movs	r1, #0
 8009408:	62b9      	str	r1, [r7, #40]	; 0x28
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009410:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009414:	460b      	mov	r3, r1
 8009416:	4313      	orrs	r3, r2
 8009418:	d011      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800941a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941e:	3308      	adds	r3, #8
 8009420:	2100      	movs	r1, #0
 8009422:	4618      	mov	r0, r3
 8009424:	f001 fa4a 	bl	800a8bc <RCCEx_PLL2_Config>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800942e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800943a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800943e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	2100      	movs	r1, #0
 8009448:	6239      	str	r1, [r7, #32]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
 8009450:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009454:	460b      	mov	r3, r1
 8009456:	4313      	orrs	r3, r2
 8009458:	d011      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800945a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800945e:	3308      	adds	r3, #8
 8009460:	2101      	movs	r1, #1
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fa2a 	bl	800a8bc <RCCEx_PLL2_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800946e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800947a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800947e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	2100      	movs	r1, #0
 8009488:	61b9      	str	r1, [r7, #24]
 800948a:	f003 0304 	and.w	r3, r3, #4
 800948e:	61fb      	str	r3, [r7, #28]
 8009490:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009494:	460b      	mov	r3, r1
 8009496:	4313      	orrs	r3, r2
 8009498:	d011      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800949a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800949e:	3308      	adds	r3, #8
 80094a0:	2102      	movs	r1, #2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 fa0a 	bl	800a8bc <RCCEx_PLL2_Config>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80094ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80094be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	2100      	movs	r1, #0
 80094c8:	6139      	str	r1, [r7, #16]
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80094d4:	460b      	mov	r3, r1
 80094d6:	4313      	orrs	r3, r2
 80094d8:	d011      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094de:	3328      	adds	r3, #40	; 0x28
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 fa9c 	bl	800aa20 <RCCEx_PLL3_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80094ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80094fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	2100      	movs	r1, #0
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009514:	460b      	mov	r3, r1
 8009516:	4313      	orrs	r3, r2
 8009518:	d011      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951e:	3328      	adds	r3, #40	; 0x28
 8009520:	2101      	movs	r1, #1
 8009522:	4618      	mov	r0, r3
 8009524:	f001 fa7c 	bl	800aa20 <RCCEx_PLL3_Config>
 8009528:	4603      	mov	r3, r0
 800952a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800952e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800953a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800953e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	2100      	movs	r1, #0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	607b      	str	r3, [r7, #4]
 8009550:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009554:	460b      	mov	r3, r1
 8009556:	4313      	orrs	r3, r2
 8009558:	d011      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955e:	3328      	adds	r3, #40	; 0x28
 8009560:	2102      	movs	r1, #2
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fa5c 	bl	800aa20 <RCCEx_PLL3_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800956e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800957a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800957e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	e000      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
}
 800958c:	4618      	mov	r0, r3
 800958e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009592:	46bd      	mov	sp, r7
 8009594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009598:	58024400 	.word	0x58024400

0800959c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b090      	sub	sp, #64	; 0x40
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80095a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095aa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80095ae:	430b      	orrs	r3, r1
 80095b0:	f040 8094 	bne.w	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80095b4:	4b9e      	ldr	r3, [pc, #632]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	f200 8087 	bhi.w	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80095c6:	a201      	add	r2, pc, #4	; (adr r2, 80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095e1 	.word	0x080095e1
 80095d0:	08009609 	.word	0x08009609
 80095d4:	08009631 	.word	0x08009631
 80095d8:	080096cd 	.word	0x080096cd
 80095dc:	08009659 	.word	0x08009659
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095e0:	4b93      	ldr	r3, [pc, #588]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ec:	d108      	bne.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f001 f810 	bl	800a618 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095fc:	f000 bd45 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009604:	f000 bd41 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009608:	4b89      	ldr	r3, [pc, #548]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009614:	d108      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009616:	f107 0318 	add.w	r3, r7, #24
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fd54 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009624:	f000 bd31 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800962c:	f000 bd2d 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009630:	4b7f      	ldr	r3, [pc, #508]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800963c:	d108      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800963e:	f107 030c 	add.w	r3, r7, #12
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fe94 	bl	800a370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964c:	f000 bd1d 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009654:	f000 bd19 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009658:	4b75      	ldr	r3, [pc, #468]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800965a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009660:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009662:	4b73      	ldr	r3, [pc, #460]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b04      	cmp	r3, #4
 800966c:	d10c      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800966e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009670:	2b00      	cmp	r3, #0
 8009672:	d109      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009674:	4b6e      	ldr	r3, [pc, #440]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	08db      	lsrs	r3, r3, #3
 800967a:	f003 0303 	and.w	r3, r3, #3
 800967e:	4a6d      	ldr	r2, [pc, #436]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009680:	fa22 f303 	lsr.w	r3, r2, r3
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009686:	e01f      	b.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009688:	4b69      	ldr	r3, [pc, #420]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009694:	d106      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800969c:	d102      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800969e:	4b66      	ldr	r3, [pc, #408]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80096a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096a2:	e011      	b.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096a4:	4b62      	ldr	r3, [pc, #392]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096b0:	d106      	bne.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b8:	d102      	bne.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096ba:	4b60      	ldr	r3, [pc, #384]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80096bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096be:	e003      	b.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80096c4:	f000 bce1 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096c8:	f000 bcdf 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096cc:	4b5c      	ldr	r3, [pc, #368]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096d0:	f000 bcdb 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096d8:	f000 bcd7 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80096dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80096e4:	430b      	orrs	r3, r1
 80096e6:	f040 80ad 	bne.w	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80096ea:	4b51      	ldr	r3, [pc, #324]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80096f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096fa:	d056      	beq.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009702:	f200 8090 	bhi.w	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	2bc0      	cmp	r3, #192	; 0xc0
 800970a:	f000 8088 	beq.w	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	2bc0      	cmp	r3, #192	; 0xc0
 8009712:	f200 8088 	bhi.w	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	2b80      	cmp	r3, #128	; 0x80
 800971a:	d032      	beq.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	2b80      	cmp	r3, #128	; 0x80
 8009720:	f200 8081 	bhi.w	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	2b40      	cmp	r3, #64	; 0x40
 800972e:	d014      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009730:	e079      	b.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009732:	4b3f      	ldr	r3, [pc, #252]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800973e:	d108      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009744:	4618      	mov	r0, r3
 8009746:	f000 ff67 	bl	800a618 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974e:	f000 bc9c 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009756:	f000 bc98 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800975a:	4b35      	ldr	r3, [pc, #212]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009766:	d108      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009768:	f107 0318 	add.w	r3, r7, #24
 800976c:	4618      	mov	r0, r3
 800976e:	f000 fcab 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009776:	f000 bc88 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800977e:	f000 bc84 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009782:	4b2b      	ldr	r3, [pc, #172]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800978a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800978e:	d108      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009790:	f107 030c 	add.w	r3, r7, #12
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fdeb 	bl	800a370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800979e:	f000 bc74 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a6:	f000 bc70 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097aa:	4b21      	ldr	r3, [pc, #132]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097b4:	4b1e      	ldr	r3, [pc, #120]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b04      	cmp	r3, #4
 80097be:	d10c      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80097c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d109      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097c6:	4b1a      	ldr	r3, [pc, #104]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	08db      	lsrs	r3, r3, #3
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	4a18      	ldr	r2, [pc, #96]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80097d2:	fa22 f303 	lsr.w	r3, r2, r3
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d8:	e01f      	b.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097da:	4b15      	ldr	r3, [pc, #84]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e6:	d106      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80097e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ee:	d102      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097f0:	4b11      	ldr	r3, [pc, #68]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80097f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097f4:	e011      	b.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097f6:	4b0e      	ldr	r3, [pc, #56]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009802:	d106      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800980a:	d102      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800980c:	4b0b      	ldr	r3, [pc, #44]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009810:	e003      	b.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009816:	f000 bc38 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800981a:	f000 bc36 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800981e:	4b08      	ldr	r3, [pc, #32]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009822:	f000 bc32 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800982a:	f000 bc2e 	b.w	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800982e:	bf00      	nop
 8009830:	58024400 	.word	0x58024400
 8009834:	03d09000 	.word	0x03d09000
 8009838:	003d0900 	.word	0x003d0900
 800983c:	007a1200 	.word	0x007a1200
 8009840:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009848:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800984c:	430b      	orrs	r3, r1
 800984e:	f040 809c 	bne.w	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009852:	4b9e      	ldr	r3, [pc, #632]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009856:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800985a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800985c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009862:	d054      	beq.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800986a:	f200 808b 	bhi.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009874:	f000 8083 	beq.w	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800987e:	f200 8081 	bhi.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009888:	d02f      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009890:	d878      	bhi.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800989e:	d012      	beq.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80098a0:	e070      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098a2:	4b8a      	ldr	r3, [pc, #552]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ae:	d107      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 feaf 	bl	800a618 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098be:	e3e4      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c4:	e3e1      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098c6:	4b81      	ldr	r3, [pc, #516]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098d2:	d107      	bne.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098d4:	f107 0318 	add.w	r3, r7, #24
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fbf5 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098e2:	e3d2      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098e8:	e3cf      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098ea:	4b78      	ldr	r3, [pc, #480]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f6:	d107      	bne.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f8:	f107 030c 	add.w	r3, r7, #12
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 fd37 	bl	800a370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009906:	e3c0      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009908:	2300      	movs	r3, #0
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800990c:	e3bd      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800990e:	4b6f      	ldr	r3, [pc, #444]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009912:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009916:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009918:	4b6c      	ldr	r3, [pc, #432]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0304 	and.w	r3, r3, #4
 8009920:	2b04      	cmp	r3, #4
 8009922:	d10c      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009926:	2b00      	cmp	r3, #0
 8009928:	d109      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800992a:	4b68      	ldr	r3, [pc, #416]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	08db      	lsrs	r3, r3, #3
 8009930:	f003 0303 	and.w	r3, r3, #3
 8009934:	4a66      	ldr	r2, [pc, #408]	; (8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009936:	fa22 f303 	lsr.w	r3, r2, r3
 800993a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800993c:	e01e      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800993e:	4b63      	ldr	r3, [pc, #396]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994a:	d106      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800994c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009952:	d102      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009954:	4b5f      	ldr	r3, [pc, #380]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009958:	e010      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800995a:	4b5c      	ldr	r3, [pc, #368]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009966:	d106      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800996a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800996e:	d102      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009970:	4b59      	ldr	r3, [pc, #356]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009974:	e002      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800997a:	e386      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800997c:	e385      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800997e:	4b57      	ldr	r3, [pc, #348]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009982:	e382      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009988:	e37f      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800998a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800998e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009992:	430b      	orrs	r3, r1
 8009994:	f040 80a7 	bne.w	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009998:	4b4c      	ldr	r3, [pc, #304]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800999a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800999c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80099a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099a8:	d055      	beq.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099b0:	f200 8096 	bhi.w	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099ba:	f000 8084 	beq.w	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099c4:	f200 808c 	bhi.w	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099ce:	d030      	beq.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099d6:	f200 8083 	bhi.w	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099e6:	d012      	beq.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80099e8:	e07a      	b.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099ea:	4b38      	ldr	r3, [pc, #224]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099f6:	d107      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fe0b 	bl	800a618 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a06:	e340      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a0c:	e33d      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a0e:	4b2f      	ldr	r3, [pc, #188]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a1a:	d107      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a1c:	f107 0318 	add.w	r3, r7, #24
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fb51 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a2a:	e32e      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a30:	e32b      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a32:	4b26      	ldr	r3, [pc, #152]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a3e:	d107      	bne.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a40:	f107 030c 	add.w	r3, r7, #12
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 fc93 	bl	800a370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a4e:	e31c      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a54:	e319      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a56:	4b1d      	ldr	r3, [pc, #116]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a60:	4b1a      	ldr	r3, [pc, #104]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d10c      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d109      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a72:	4b16      	ldr	r3, [pc, #88]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	08db      	lsrs	r3, r3, #3
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	4a14      	ldr	r2, [pc, #80]	; (8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a84:	e01e      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a86:	4b11      	ldr	r3, [pc, #68]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a92:	d106      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a9a:	d102      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa0:	e010      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009aa2:	4b0a      	ldr	r3, [pc, #40]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aae:	d106      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ab6:	d102      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ab8:	4b07      	ldr	r3, [pc, #28]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009abc:	e002      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009ac2:	e2e2      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ac4:	e2e1      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ac6:	4b05      	ldr	r3, [pc, #20]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aca:	e2de      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	03d09000 	.word	0x03d09000
 8009ad4:	003d0900 	.word	0x003d0900
 8009ad8:	007a1200 	.word	0x007a1200
 8009adc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ae4:	e2d1      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aea:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009aee:	430b      	orrs	r3, r1
 8009af0:	f040 809c 	bne.w	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009af4:	4b93      	ldr	r3, [pc, #588]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009afc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b04:	d054      	beq.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b0c:	f200 808b 	bhi.w	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b16:	f000 8083 	beq.w	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b20:	f200 8081 	bhi.w	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b2a:	d02f      	beq.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b32:	d878      	bhi.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b40:	d012      	beq.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009b42:	e070      	b.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b44:	4b7f      	ldr	r3, [pc, #508]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b50:	d107      	bne.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 fd5e 	bl	800a618 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b60:	e293      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b66:	e290      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b68:	4b76      	ldr	r3, [pc, #472]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b74:	d107      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b76:	f107 0318 	add.w	r3, r7, #24
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 faa4 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b84:	e281      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b8a:	e27e      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b8c:	4b6d      	ldr	r3, [pc, #436]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b98:	d107      	bne.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b9a:	f107 030c 	add.w	r3, r7, #12
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fbe6 	bl	800a370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ba8:	e26f      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bae:	e26c      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009bb0:	4b64      	ldr	r3, [pc, #400]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bb8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bba:	4b62      	ldr	r3, [pc, #392]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	d10c      	bne.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d109      	bne.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bcc:	4b5d      	ldr	r3, [pc, #372]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	08db      	lsrs	r3, r3, #3
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	4a5c      	ldr	r2, [pc, #368]	; (8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bde:	e01e      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009be0:	4b58      	ldr	r3, [pc, #352]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bec:	d106      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bf4:	d102      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bf6:	4b55      	ldr	r3, [pc, #340]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bfa:	e010      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bfc:	4b51      	ldr	r3, [pc, #324]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c08:	d106      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c10:	d102      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c12:	4b4f      	ldr	r3, [pc, #316]	; (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c16:	e002      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009c1c:	e235      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c1e:	e234      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c20:	4b4c      	ldr	r3, [pc, #304]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c24:	e231      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c2a:	e22e      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c30:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009c34:	430b      	orrs	r3, r1
 8009c36:	f040 808f 	bne.w	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009c3a:	4b42      	ldr	r3, [pc, #264]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009c42:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c4a:	d06b      	beq.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c52:	d874      	bhi.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c5a:	d056      	beq.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c62:	d86c      	bhi.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c6a:	d03b      	beq.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c72:	d864      	bhi.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c7a:	d021      	beq.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c82:	d85c      	bhi.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d004      	beq.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c90:	d004      	beq.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009c92:	e054      	b.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009c94:	f7fe fa62 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8009c98:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c9a:	e1f6      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c9c:	4b29      	ldr	r3, [pc, #164]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ca8:	d107      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009caa:	f107 0318 	add.w	r3, r7, #24
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fa0a 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cb8:	e1e7      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cbe:	e1e4      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cc0:	4b20      	ldr	r3, [pc, #128]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ccc:	d107      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cce:	f107 030c 	add.w	r3, r7, #12
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 fb4c 	bl	800a370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cdc:	e1d5      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ce2:	e1d2      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ce4:	4b17      	ldr	r3, [pc, #92]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d109      	bne.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cf0:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	08db      	lsrs	r3, r3, #3
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	4a13      	ldr	r2, [pc, #76]	; (8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8009d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d02:	e1c2      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d08:	e1bf      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009d0a:	4b0e      	ldr	r3, [pc, #56]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d16:	d102      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009d18:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d1c:	e1b5      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d22:	e1b2      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009d24:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d30:	d102      	bne.n	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d36:	e1a8      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d3c:	e1a5      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d42:	e1a2      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d44:	58024400 	.word	0x58024400
 8009d48:	03d09000 	.word	0x03d09000
 8009d4c:	003d0900 	.word	0x003d0900
 8009d50:	007a1200 	.word	0x007a1200
 8009d54:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d5c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009d60:	430b      	orrs	r3, r1
 8009d62:	d173      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009d64:	4b9c      	ldr	r3, [pc, #624]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d6c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d74:	d02f      	beq.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d7c:	d863      	bhi.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d004      	beq.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d8a:	d012      	beq.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009d8c:	e05b      	b.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d8e:	4b92      	ldr	r3, [pc, #584]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d9a:	d107      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9c:	f107 0318 	add.w	r3, r7, #24
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f991 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009daa:	e16e      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db0:	e16b      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009db2:	4b89      	ldr	r3, [pc, #548]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dbe:	d107      	bne.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc0:	f107 030c 	add.w	r3, r7, #12
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fad3 	bl	800a370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dce:	e15c      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd4:	e159      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dd6:	4b80      	ldr	r3, [pc, #512]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dde:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009de0:	4b7d      	ldr	r3, [pc, #500]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d10c      	bne.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d109      	bne.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009df2:	4b79      	ldr	r3, [pc, #484]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	08db      	lsrs	r3, r3, #3
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	4a77      	ldr	r2, [pc, #476]	; (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e04:	e01e      	b.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e06:	4b74      	ldr	r3, [pc, #464]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e12:	d106      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e1a:	d102      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e1c:	4b70      	ldr	r3, [pc, #448]	; (8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e20:	e010      	b.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e22:	4b6d      	ldr	r3, [pc, #436]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e2e:	d106      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e36:	d102      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e38:	4b6a      	ldr	r3, [pc, #424]	; (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e3c:	e002      	b.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e42:	e122      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e44:	e121      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e4a:	e11e      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e50:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009e54:	430b      	orrs	r3, r1
 8009e56:	d133      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009e58:	4b5f      	ldr	r3, [pc, #380]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e6e:	d012      	beq.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009e70:	e023      	b.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e72:	4b59      	ldr	r3, [pc, #356]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e7e:	d107      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fbc7 	bl	800a618 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e8e:	e0fc      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e94:	e0f9      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e96:	4b50      	ldr	r3, [pc, #320]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ea2:	d107      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ea4:	f107 0318 	add.w	r3, r7, #24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 f90d 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eb2:	e0ea      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009eb8:	e0e7      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ebe:	e0e4      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009ec8:	430b      	orrs	r3, r1
 8009eca:	f040 808d 	bne.w	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009ece:	4b42      	ldr	r3, [pc, #264]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009ed6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ede:	d06b      	beq.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ee6:	d874      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eee:	d056      	beq.n	8009f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef6:	d86c      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009efe:	d03b      	beq.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f06:	d864      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f0e:	d021      	beq.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f16:	d85c      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f24:	d004      	beq.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009f26:	e054      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009f28:	f000 f8b8 	bl	800a09c <HAL_RCCEx_GetD3PCLK1Freq>
 8009f2c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f2e:	e0ac      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f30:	4b29      	ldr	r3, [pc, #164]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f3c:	d107      	bne.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f3e:	f107 0318 	add.w	r3, r7, #24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 f8c0 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f4c:	e09d      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f52:	e09a      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f54:	4b20      	ldr	r3, [pc, #128]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f60:	d107      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f62:	f107 030c 	add.w	r3, r7, #12
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fa02 	bl	800a370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f70:	e08b      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f76:	e088      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f78:	4b17      	ldr	r3, [pc, #92]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d109      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f84:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	08db      	lsrs	r3, r3, #3
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	4a13      	ldr	r2, [pc, #76]	; (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009f90:	fa22 f303 	lsr.w	r3, r2, r3
 8009f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f96:	e078      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f9c:	e075      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f9e:	4b0e      	ldr	r3, [pc, #56]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009faa:	d102      	bne.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009fac:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fb0:	e06b      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fb6:	e068      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fb8:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fc4:	d102      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009fc6:	4b07      	ldr	r3, [pc, #28]	; (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fca:	e05e      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd0:	e05b      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd6:	e058      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fd8:	58024400 	.word	0x58024400
 8009fdc:	03d09000 	.word	0x03d09000
 8009fe0:	003d0900 	.word	0x003d0900
 8009fe4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	d148      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009ff4:	4b27      	ldr	r3, [pc, #156]	; (800a094 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ffc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a004:	d02a      	beq.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a00c:	d838      	bhi.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a01a:	d00d      	beq.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a01c:	e030      	b.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a01e:	4b1d      	ldr	r3, [pc, #116]	; (800a094 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a02a:	d102      	bne.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a02c:	4b1a      	ldr	r3, [pc, #104]	; (800a098 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a030:	e02b      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a036:	e028      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a038:	4b16      	ldr	r3, [pc, #88]	; (800a094 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a044:	d107      	bne.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fae4 	bl	800a618 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a052:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a054:	e019      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a05a:	e016      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a05c:	4b0d      	ldr	r3, [pc, #52]	; (800a094 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a068:	d107      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a06a:	f107 0318 	add.w	r3, r7, #24
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 f82a 	bl	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a078:	e007      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a07e:	e004      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a084:	e001      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3740      	adds	r7, #64	; 0x40
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	58024400 	.word	0x58024400
 800a098:	007a1200 	.word	0x007a1200

0800a09c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a0a0:	f7fe f82c 	bl	80080fc <HAL_RCC_GetHCLKFreq>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	4b06      	ldr	r3, [pc, #24]	; (800a0c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	091b      	lsrs	r3, r3, #4
 800a0ac:	f003 0307 	and.w	r3, r3, #7
 800a0b0:	4904      	ldr	r1, [pc, #16]	; (800a0c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a0b2:	5ccb      	ldrb	r3, [r1, r3]
 800a0b4:	f003 031f 	and.w	r3, r3, #31
 800a0b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	58024400 	.word	0x58024400
 800a0c4:	0800b5f8 	.word	0x0800b5f8

0800a0c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b089      	sub	sp, #36	; 0x24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0d0:	4ba1      	ldr	r3, [pc, #644]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d4:	f003 0303 	and.w	r3, r3, #3
 800a0d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a0da:	4b9f      	ldr	r3, [pc, #636]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	0b1b      	lsrs	r3, r3, #12
 800a0e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a0e6:	4b9c      	ldr	r3, [pc, #624]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	091b      	lsrs	r3, r3, #4
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a0f2:	4b99      	ldr	r3, [pc, #612]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f6:	08db      	lsrs	r3, r3, #3
 800a0f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	fb02 f303 	mul.w	r3, r2, r3
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 8111 	beq.w	800a338 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	f000 8083 	beq.w	800a224 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b02      	cmp	r3, #2
 800a122:	f200 80a1 	bhi.w	800a268 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d056      	beq.n	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a132:	e099      	b.n	800a268 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a134:	4b88      	ldr	r3, [pc, #544]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0320 	and.w	r3, r3, #32
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d02d      	beq.n	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a140:	4b85      	ldr	r3, [pc, #532]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	08db      	lsrs	r3, r3, #3
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	4a84      	ldr	r2, [pc, #528]	; (800a35c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a14c:	fa22 f303 	lsr.w	r3, r2, r3
 800a150:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	ee07 3a90 	vmov	s15, r3
 800a158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16a:	4b7b      	ldr	r3, [pc, #492]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a17e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a196:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a19a:	e087      	b.n	800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	ee07 3a90 	vmov	s15, r3
 800a1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a364 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ae:	4b6a      	ldr	r3, [pc, #424]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1de:	e065      	b.n	800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	ee07 3a90 	vmov	s15, r3
 800a1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1f2:	4b59      	ldr	r3, [pc, #356]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a202:	ed97 6a03 	vldr	s12, [r7, #12]
 800a206:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a20a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a20e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a21e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a222:	e043      	b.n	800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	ee07 3a90 	vmov	s15, r3
 800a22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a22e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a36c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a236:	4b48      	ldr	r3, [pc, #288]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a23e:	ee07 3a90 	vmov	s15, r3
 800a242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a246:	ed97 6a03 	vldr	s12, [r7, #12]
 800a24a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a266:	e021      	b.n	800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a272:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a27a:	4b37      	ldr	r3, [pc, #220]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a282:	ee07 3a90 	vmov	s15, r3
 800a286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a28e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a2ac:	4b2a      	ldr	r3, [pc, #168]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	0a5b      	lsrs	r3, r3, #9
 800a2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2d2:	ee17 2a90 	vmov	r2, s15
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a2da:	4b1f      	ldr	r3, [pc, #124]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2de:	0c1b      	lsrs	r3, r3, #16
 800a2e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a300:	ee17 2a90 	vmov	r2, s15
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a308:	4b13      	ldr	r3, [pc, #76]	; (800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	0e1b      	lsrs	r3, r3, #24
 800a30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a31e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a322:	edd7 6a07 	vldr	s13, [r7, #28]
 800a326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a32a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a32e:	ee17 2a90 	vmov	r2, s15
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a336:	e008      	b.n	800a34a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	609a      	str	r2, [r3, #8]
}
 800a34a:	bf00      	nop
 800a34c:	3724      	adds	r7, #36	; 0x24
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	58024400 	.word	0x58024400
 800a35c:	03d09000 	.word	0x03d09000
 800a360:	46000000 	.word	0x46000000
 800a364:	4c742400 	.word	0x4c742400
 800a368:	4a742400 	.word	0x4a742400
 800a36c:	4af42400 	.word	0x4af42400

0800a370 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a370:	b480      	push	{r7}
 800a372:	b089      	sub	sp, #36	; 0x24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a378:	4ba1      	ldr	r3, [pc, #644]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37c:	f003 0303 	and.w	r3, r3, #3
 800a380:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a382:	4b9f      	ldr	r3, [pc, #636]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a386:	0d1b      	lsrs	r3, r3, #20
 800a388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a38c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a38e:	4b9c      	ldr	r3, [pc, #624]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	0a1b      	lsrs	r3, r3, #8
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a39a:	4b99      	ldr	r3, [pc, #612]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39e:	08db      	lsrs	r3, r3, #3
 800a3a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	fb02 f303 	mul.w	r3, r2, r3
 800a3aa:	ee07 3a90 	vmov	s15, r3
 800a3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 8111 	beq.w	800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	f000 8083 	beq.w	800a4cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	f200 80a1 	bhi.w	800a510 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d056      	beq.n	800a488 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a3da:	e099      	b.n	800a510 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3dc:	4b88      	ldr	r3, [pc, #544]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0320 	and.w	r3, r3, #32
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d02d      	beq.n	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3e8:	4b85      	ldr	r3, [pc, #532]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	08db      	lsrs	r3, r3, #3
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	4a84      	ldr	r2, [pc, #528]	; (800a604 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	ee07 3a90 	vmov	s15, r3
 800a400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a412:	4b7b      	ldr	r3, [pc, #492]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a422:	ed97 6a03 	vldr	s12, [r7, #12]
 800a426:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a43e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a442:	e087      	b.n	800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a44e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a60c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a456:	4b6a      	ldr	r3, [pc, #424]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45e:	ee07 3a90 	vmov	s15, r3
 800a462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a466:	ed97 6a03 	vldr	s12, [r7, #12]
 800a46a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a486:	e065      	b.n	800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	ee07 3a90 	vmov	s15, r3
 800a48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a492:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a49a:	4b59      	ldr	r3, [pc, #356]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a2:	ee07 3a90 	vmov	s15, r3
 800a4a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4ca:	e043      	b.n	800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a4da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4de:	4b48      	ldr	r3, [pc, #288]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e6:	ee07 3a90 	vmov	s15, r3
 800a4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a50a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a50e:	e021      	b.n	800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a522:	4b37      	ldr	r3, [pc, #220]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a532:	ed97 6a03 	vldr	s12, [r7, #12]
 800a536:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a552:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a554:	4b2a      	ldr	r3, [pc, #168]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	0a5b      	lsrs	r3, r3, #9
 800a55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a56a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a56e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a57a:	ee17 2a90 	vmov	r2, s15
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a582:	4b1f      	ldr	r3, [pc, #124]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	0c1b      	lsrs	r3, r3, #16
 800a588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a58c:	ee07 3a90 	vmov	s15, r3
 800a590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a59c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5a8:	ee17 2a90 	vmov	r2, s15
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a5b0:	4b13      	ldr	r3, [pc, #76]	; (800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	0e1b      	lsrs	r3, r3, #24
 800a5b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5d6:	ee17 2a90 	vmov	r2, s15
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a5de:	e008      	b.n	800a5f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	609a      	str	r2, [r3, #8]
}
 800a5f2:	bf00      	nop
 800a5f4:	3724      	adds	r7, #36	; 0x24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	58024400 	.word	0x58024400
 800a604:	03d09000 	.word	0x03d09000
 800a608:	46000000 	.word	0x46000000
 800a60c:	4c742400 	.word	0x4c742400
 800a610:	4a742400 	.word	0x4a742400
 800a614:	4af42400 	.word	0x4af42400

0800a618 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a618:	b480      	push	{r7}
 800a61a:	b089      	sub	sp, #36	; 0x24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a620:	4ba0      	ldr	r3, [pc, #640]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	f003 0303 	and.w	r3, r3, #3
 800a628:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a62a:	4b9e      	ldr	r3, [pc, #632]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62e:	091b      	lsrs	r3, r3, #4
 800a630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a634:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a636:	4b9b      	ldr	r3, [pc, #620]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a640:	4b98      	ldr	r3, [pc, #608]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a644:	08db      	lsrs	r3, r3, #3
 800a646:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	fb02 f303 	mul.w	r3, r2, r3
 800a650:	ee07 3a90 	vmov	s15, r3
 800a654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a658:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8111 	beq.w	800a886 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b02      	cmp	r3, #2
 800a668:	f000 8083 	beq.w	800a772 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b02      	cmp	r3, #2
 800a670:	f200 80a1 	bhi.w	800a7b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d056      	beq.n	800a72e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a680:	e099      	b.n	800a7b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a682:	4b88      	ldr	r3, [pc, #544]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0320 	and.w	r3, r3, #32
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d02d      	beq.n	800a6ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a68e:	4b85      	ldr	r3, [pc, #532]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	08db      	lsrs	r3, r3, #3
 800a694:	f003 0303 	and.w	r3, r3, #3
 800a698:	4a83      	ldr	r2, [pc, #524]	; (800a8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a69a:	fa22 f303 	lsr.w	r3, r2, r3
 800a69e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	ee07 3a90 	vmov	s15, r3
 800a6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6b8:	4b7a      	ldr	r3, [pc, #488]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c0:	ee07 3a90 	vmov	s15, r3
 800a6c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a6e8:	e087      	b.n	800a7fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	ee07 3a90 	vmov	s15, r3
 800a6f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a6f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6fc:	4b69      	ldr	r3, [pc, #420]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a704:	ee07 3a90 	vmov	s15, r3
 800a708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a70c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a710:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a71c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a724:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a728:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a72c:	e065      	b.n	800a7fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	ee07 3a90 	vmov	s15, r3
 800a734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a738:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a73c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a740:	4b58      	ldr	r3, [pc, #352]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a750:	ed97 6a03 	vldr	s12, [r7, #12]
 800a754:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a75c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a76c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a770:	e043      	b.n	800a7fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	ee07 3a90 	vmov	s15, r3
 800a778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a8b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a784:	4b47      	ldr	r3, [pc, #284]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78c:	ee07 3a90 	vmov	s15, r3
 800a790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a794:	ed97 6a03 	vldr	s12, [r7, #12]
 800a798:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a79c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7b4:	e021      	b.n	800a7fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	ee07 3a90 	vmov	s15, r3
 800a7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a7c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c8:	4b36      	ldr	r3, [pc, #216]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7f8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a7fa:	4b2a      	ldr	r3, [pc, #168]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fe:	0a5b      	lsrs	r3, r3, #9
 800a800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a804:	ee07 3a90 	vmov	s15, r3
 800a808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a810:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a814:	edd7 6a07 	vldr	s13, [r7, #28]
 800a818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a81c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a820:	ee17 2a90 	vmov	r2, s15
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a828:	4b1e      	ldr	r3, [pc, #120]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82c:	0c1b      	lsrs	r3, r3, #16
 800a82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a83e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a842:	edd7 6a07 	vldr	s13, [r7, #28]
 800a846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a84a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a84e:	ee17 2a90 	vmov	r2, s15
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a856:	4b13      	ldr	r3, [pc, #76]	; (800a8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	0e1b      	lsrs	r3, r3, #24
 800a85c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a860:	ee07 3a90 	vmov	s15, r3
 800a864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a86c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a870:	edd7 6a07 	vldr	s13, [r7, #28]
 800a874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a87c:	ee17 2a90 	vmov	r2, s15
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a884:	e008      	b.n	800a898 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	609a      	str	r2, [r3, #8]
}
 800a898:	bf00      	nop
 800a89a:	3724      	adds	r7, #36	; 0x24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	58024400 	.word	0x58024400
 800a8a8:	03d09000 	.word	0x03d09000
 800a8ac:	46000000 	.word	0x46000000
 800a8b0:	4c742400 	.word	0x4c742400
 800a8b4:	4a742400 	.word	0x4a742400
 800a8b8:	4af42400 	.word	0x4af42400

0800a8bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8ca:	4b53      	ldr	r3, [pc, #332]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d101      	bne.n	800a8da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e099      	b.n	800aa0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a8da:	4b4f      	ldr	r3, [pc, #316]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a4e      	ldr	r2, [pc, #312]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a8e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a8e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8e6:	f7f6 fc6f 	bl	80011c8 <HAL_GetTick>
 800a8ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8ec:	e008      	b.n	800a900 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a8ee:	f7f6 fc6b 	bl	80011c8 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d901      	bls.n	800a900 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e086      	b.n	800aa0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a900:	4b45      	ldr	r3, [pc, #276]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1f0      	bne.n	800a8ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a90c:	4b42      	ldr	r3, [pc, #264]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a910:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	031b      	lsls	r3, r3, #12
 800a91a:	493f      	ldr	r1, [pc, #252]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	628b      	str	r3, [r1, #40]	; 0x28
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	3b01      	subs	r3, #1
 800a926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	3b01      	subs	r3, #1
 800a930:	025b      	lsls	r3, r3, #9
 800a932:	b29b      	uxth	r3, r3
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	041b      	lsls	r3, r3, #16
 800a93e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a942:	431a      	orrs	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	3b01      	subs	r3, #1
 800a94a:	061b      	lsls	r3, r3, #24
 800a94c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a950:	4931      	ldr	r1, [pc, #196]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a952:	4313      	orrs	r3, r2
 800a954:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a956:	4b30      	ldr	r3, [pc, #192]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	492d      	ldr	r1, [pc, #180]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a964:	4313      	orrs	r3, r2
 800a966:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a968:	4b2b      	ldr	r3, [pc, #172]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	f023 0220 	bic.w	r2, r3, #32
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	4928      	ldr	r1, [pc, #160]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a976:	4313      	orrs	r3, r2
 800a978:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a97a:	4b27      	ldr	r3, [pc, #156]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97e:	4a26      	ldr	r2, [pc, #152]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a980:	f023 0310 	bic.w	r3, r3, #16
 800a984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a986:	4b24      	ldr	r3, [pc, #144]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a98a:	4b24      	ldr	r3, [pc, #144]	; (800aa1c <RCCEx_PLL2_Config+0x160>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	69d2      	ldr	r2, [r2, #28]
 800a992:	00d2      	lsls	r2, r2, #3
 800a994:	4920      	ldr	r1, [pc, #128]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a996:	4313      	orrs	r3, r2
 800a998:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a99a:	4b1f      	ldr	r3, [pc, #124]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99e:	4a1e      	ldr	r2, [pc, #120]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9a0:	f043 0310 	orr.w	r3, r3, #16
 800a9a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a9ac:	4b1a      	ldr	r3, [pc, #104]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b0:	4a19      	ldr	r2, [pc, #100]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9b8:	e00f      	b.n	800a9da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d106      	bne.n	800a9ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a9c0:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	4a14      	ldr	r2, [pc, #80]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9cc:	e005      	b.n	800a9da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a9ce:	4b12      	ldr	r3, [pc, #72]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	4a11      	ldr	r2, [pc, #68]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a0e      	ldr	r2, [pc, #56]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a9e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9e6:	f7f6 fbef 	bl	80011c8 <HAL_GetTick>
 800a9ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9ec:	e008      	b.n	800aa00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a9ee:	f7f6 fbeb 	bl	80011c8 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d901      	bls.n	800aa00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e006      	b.n	800aa0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa00:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0f0      	beq.n	800a9ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	ffff0007 	.word	0xffff0007

0800aa20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa2e:	4b53      	ldr	r3, [pc, #332]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d101      	bne.n	800aa3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e099      	b.n	800ab72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa3e:	4b4f      	ldr	r3, [pc, #316]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a4e      	ldr	r2, [pc, #312]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa4a:	f7f6 fbbd 	bl	80011c8 <HAL_GetTick>
 800aa4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa50:	e008      	b.n	800aa64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa52:	f7f6 fbb9 	bl	80011c8 <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d901      	bls.n	800aa64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e086      	b.n	800ab72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa64:	4b45      	ldr	r3, [pc, #276]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1f0      	bne.n	800aa52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa70:	4b42      	ldr	r3, [pc, #264]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	051b      	lsls	r3, r3, #20
 800aa7e:	493f      	ldr	r1, [pc, #252]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	628b      	str	r3, [r1, #40]	; 0x28
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	025b      	lsls	r3, r3, #9
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	041b      	lsls	r3, r3, #16
 800aaa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aaa6:	431a      	orrs	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	061b      	lsls	r3, r3, #24
 800aab0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aab4:	4931      	ldr	r1, [pc, #196]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aaba:	4b30      	ldr	r3, [pc, #192]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	695b      	ldr	r3, [r3, #20]
 800aac6:	492d      	ldr	r1, [pc, #180]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aacc:	4b2b      	ldr	r3, [pc, #172]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	4928      	ldr	r1, [pc, #160]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aada:	4313      	orrs	r3, r2
 800aadc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aade:	4b27      	ldr	r3, [pc, #156]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae2:	4a26      	ldr	r2, [pc, #152]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aae8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aaea:	4b24      	ldr	r3, [pc, #144]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aaec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <RCCEx_PLL3_Config+0x160>)
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	69d2      	ldr	r2, [r2, #28]
 800aaf6:	00d2      	lsls	r2, r2, #3
 800aaf8:	4920      	ldr	r1, [pc, #128]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aafe:	4b1f      	ldr	r3, [pc, #124]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	4a1e      	ldr	r2, [pc, #120]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ab10:	4b1a      	ldr	r3, [pc, #104]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	4a19      	ldr	r2, [pc, #100]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab1c:	e00f      	b.n	800ab3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d106      	bne.n	800ab32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab24:	4b15      	ldr	r3, [pc, #84]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	4a14      	ldr	r2, [pc, #80]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab30:	e005      	b.n	800ab3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab32:	4b12      	ldr	r3, [pc, #72]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab36:	4a11      	ldr	r2, [pc, #68]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab3e:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a0e      	ldr	r2, [pc, #56]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab4a:	f7f6 fb3d 	bl	80011c8 <HAL_GetTick>
 800ab4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab50:	e008      	b.n	800ab64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ab52:	f7f6 fb39 	bl	80011c8 <HAL_GetTick>
 800ab56:	4602      	mov	r2, r0
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d901      	bls.n	800ab64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e006      	b.n	800ab72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0f0      	beq.n	800ab52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	58024400 	.word	0x58024400
 800ab80:	ffff0007 	.word	0xffff0007

0800ab84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e049      	b.n	800ac2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d106      	bne.n	800abb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7f6 f950 	bl	8000e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f000 faee 	bl	800b1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
	...

0800ac34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d001      	beq.n	800ac4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e054      	b.n	800acf6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68da      	ldr	r2, [r3, #12]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f042 0201 	orr.w	r2, r2, #1
 800ac62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a26      	ldr	r2, [pc, #152]	; (800ad04 <HAL_TIM_Base_Start_IT+0xd0>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d022      	beq.n	800acb4 <HAL_TIM_Base_Start_IT+0x80>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac76:	d01d      	beq.n	800acb4 <HAL_TIM_Base_Start_IT+0x80>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a22      	ldr	r2, [pc, #136]	; (800ad08 <HAL_TIM_Base_Start_IT+0xd4>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d018      	beq.n	800acb4 <HAL_TIM_Base_Start_IT+0x80>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a21      	ldr	r2, [pc, #132]	; (800ad0c <HAL_TIM_Base_Start_IT+0xd8>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d013      	beq.n	800acb4 <HAL_TIM_Base_Start_IT+0x80>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a1f      	ldr	r2, [pc, #124]	; (800ad10 <HAL_TIM_Base_Start_IT+0xdc>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d00e      	beq.n	800acb4 <HAL_TIM_Base_Start_IT+0x80>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a1e      	ldr	r2, [pc, #120]	; (800ad14 <HAL_TIM_Base_Start_IT+0xe0>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d009      	beq.n	800acb4 <HAL_TIM_Base_Start_IT+0x80>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a1c      	ldr	r2, [pc, #112]	; (800ad18 <HAL_TIM_Base_Start_IT+0xe4>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d004      	beq.n	800acb4 <HAL_TIM_Base_Start_IT+0x80>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a1b      	ldr	r2, [pc, #108]	; (800ad1c <HAL_TIM_Base_Start_IT+0xe8>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d115      	bne.n	800ace0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689a      	ldr	r2, [r3, #8]
 800acba:	4b19      	ldr	r3, [pc, #100]	; (800ad20 <HAL_TIM_Base_Start_IT+0xec>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b06      	cmp	r3, #6
 800acc4:	d015      	beq.n	800acf2 <HAL_TIM_Base_Start_IT+0xbe>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800accc:	d011      	beq.n	800acf2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f042 0201 	orr.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acde:	e008      	b.n	800acf2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f042 0201 	orr.w	r2, r2, #1
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e000      	b.n	800acf4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	40010000 	.word	0x40010000
 800ad08:	40000400 	.word	0x40000400
 800ad0c:	40000800 	.word	0x40000800
 800ad10:	40000c00 	.word	0x40000c00
 800ad14:	40010400 	.word	0x40010400
 800ad18:	40001800 	.word	0x40001800
 800ad1c:	40014000 	.word	0x40014000
 800ad20:	00010007 	.word	0x00010007

0800ad24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d122      	bne.n	800ad80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	f003 0302 	and.w	r3, r3, #2
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d11b      	bne.n	800ad80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f06f 0202 	mvn.w	r2, #2
 800ad50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	f003 0303 	and.w	r3, r3, #3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f9fe 	bl	800b168 <HAL_TIM_IC_CaptureCallback>
 800ad6c:	e005      	b.n	800ad7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f9f0 	bl	800b154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fa01 	bl	800b17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	d122      	bne.n	800add4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b04      	cmp	r3, #4
 800ad9a:	d11b      	bne.n	800add4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f06f 0204 	mvn.w	r2, #4
 800ada4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2202      	movs	r2, #2
 800adaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f9d4 	bl	800b168 <HAL_TIM_IC_CaptureCallback>
 800adc0:	e005      	b.n	800adce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f9c6 	bl	800b154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f9d7 	bl	800b17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	f003 0308 	and.w	r3, r3, #8
 800adde:	2b08      	cmp	r3, #8
 800ade0:	d122      	bne.n	800ae28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	f003 0308 	and.w	r3, r3, #8
 800adec:	2b08      	cmp	r3, #8
 800adee:	d11b      	bne.n	800ae28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f06f 0208 	mvn.w	r2, #8
 800adf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2204      	movs	r2, #4
 800adfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	69db      	ldr	r3, [r3, #28]
 800ae06:	f003 0303 	and.w	r3, r3, #3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f9aa 	bl	800b168 <HAL_TIM_IC_CaptureCallback>
 800ae14:	e005      	b.n	800ae22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f99c 	bl	800b154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f9ad 	bl	800b17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	f003 0310 	and.w	r3, r3, #16
 800ae32:	2b10      	cmp	r3, #16
 800ae34:	d122      	bne.n	800ae7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	f003 0310 	and.w	r3, r3, #16
 800ae40:	2b10      	cmp	r3, #16
 800ae42:	d11b      	bne.n	800ae7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f06f 0210 	mvn.w	r2, #16
 800ae4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2208      	movs	r2, #8
 800ae52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	69db      	ldr	r3, [r3, #28]
 800ae5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d003      	beq.n	800ae6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f980 	bl	800b168 <HAL_TIM_IC_CaptureCallback>
 800ae68:	e005      	b.n	800ae76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f972 	bl	800b154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f983 	bl	800b17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d10e      	bne.n	800aea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d107      	bne.n	800aea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f06f 0201 	mvn.w	r2, #1
 800aea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7f5 fe2a 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb2:	2b80      	cmp	r3, #128	; 0x80
 800aeb4:	d10e      	bne.n	800aed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec0:	2b80      	cmp	r3, #128	; 0x80
 800aec2:	d107      	bne.n	800aed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fb38 	bl	800b544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aee2:	d10e      	bne.n	800af02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeee:	2b80      	cmp	r3, #128	; 0x80
 800aef0:	d107      	bne.n	800af02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aefa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fb2b 	bl	800b558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0c:	2b40      	cmp	r3, #64	; 0x40
 800af0e:	d10e      	bne.n	800af2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1a:	2b40      	cmp	r3, #64	; 0x40
 800af1c:	d107      	bne.n	800af2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f931 	bl	800b190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	f003 0320 	and.w	r3, r3, #32
 800af38:	2b20      	cmp	r3, #32
 800af3a:	d10e      	bne.n	800af5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	f003 0320 	and.w	r3, r3, #32
 800af46:	2b20      	cmp	r3, #32
 800af48:	d107      	bne.n	800af5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f06f 0220 	mvn.w	r2, #32
 800af52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 faeb 	bl	800b530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af5a:	bf00      	nop
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
	...

0800af64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d101      	bne.n	800af80 <HAL_TIM_ConfigClockSource+0x1c>
 800af7c:	2302      	movs	r3, #2
 800af7e:	e0dc      	b.n	800b13a <HAL_TIM_ConfigClockSource+0x1d6>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2202      	movs	r2, #2
 800af8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	4b6a      	ldr	r3, [pc, #424]	; (800b144 <HAL_TIM_ConfigClockSource+0x1e0>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a64      	ldr	r2, [pc, #400]	; (800b148 <HAL_TIM_ConfigClockSource+0x1e4>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	f000 80a9 	beq.w	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800afbc:	4a62      	ldr	r2, [pc, #392]	; (800b148 <HAL_TIM_ConfigClockSource+0x1e4>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	f200 80ae 	bhi.w	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800afc4:	4a61      	ldr	r2, [pc, #388]	; (800b14c <HAL_TIM_ConfigClockSource+0x1e8>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	f000 80a1 	beq.w	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800afcc:	4a5f      	ldr	r2, [pc, #380]	; (800b14c <HAL_TIM_ConfigClockSource+0x1e8>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	f200 80a6 	bhi.w	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800afd4:	4a5e      	ldr	r2, [pc, #376]	; (800b150 <HAL_TIM_ConfigClockSource+0x1ec>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	f000 8099 	beq.w	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800afdc:	4a5c      	ldr	r2, [pc, #368]	; (800b150 <HAL_TIM_ConfigClockSource+0x1ec>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	f200 809e 	bhi.w	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800afe4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800afe8:	f000 8091 	beq.w	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800afec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aff0:	f200 8096 	bhi.w	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800aff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aff8:	f000 8089 	beq.w	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800affc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b000:	f200 808e 	bhi.w	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b008:	d03e      	beq.n	800b088 <HAL_TIM_ConfigClockSource+0x124>
 800b00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00e:	f200 8087 	bhi.w	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b016:	f000 8086 	beq.w	800b126 <HAL_TIM_ConfigClockSource+0x1c2>
 800b01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01e:	d87f      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b020:	2b70      	cmp	r3, #112	; 0x70
 800b022:	d01a      	beq.n	800b05a <HAL_TIM_ConfigClockSource+0xf6>
 800b024:	2b70      	cmp	r3, #112	; 0x70
 800b026:	d87b      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b028:	2b60      	cmp	r3, #96	; 0x60
 800b02a:	d050      	beq.n	800b0ce <HAL_TIM_ConfigClockSource+0x16a>
 800b02c:	2b60      	cmp	r3, #96	; 0x60
 800b02e:	d877      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b030:	2b50      	cmp	r3, #80	; 0x50
 800b032:	d03c      	beq.n	800b0ae <HAL_TIM_ConfigClockSource+0x14a>
 800b034:	2b50      	cmp	r3, #80	; 0x50
 800b036:	d873      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b038:	2b40      	cmp	r3, #64	; 0x40
 800b03a:	d058      	beq.n	800b0ee <HAL_TIM_ConfigClockSource+0x18a>
 800b03c:	2b40      	cmp	r3, #64	; 0x40
 800b03e:	d86f      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b040:	2b30      	cmp	r3, #48	; 0x30
 800b042:	d064      	beq.n	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800b044:	2b30      	cmp	r3, #48	; 0x30
 800b046:	d86b      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b048:	2b20      	cmp	r3, #32
 800b04a:	d060      	beq.n	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	d867      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
 800b050:	2b00      	cmp	r3, #0
 800b052:	d05c      	beq.n	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800b054:	2b10      	cmp	r3, #16
 800b056:	d05a      	beq.n	800b10e <HAL_TIM_ConfigClockSource+0x1aa>
 800b058:	e062      	b.n	800b120 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b06a:	f000 f9b3 	bl	800b3d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b07c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	609a      	str	r2, [r3, #8]
      break;
 800b086:	e04f      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b098:	f000 f99c 	bl	800b3d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	689a      	ldr	r2, [r3, #8]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0aa:	609a      	str	r2, [r3, #8]
      break;
 800b0ac:	e03c      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f000 f90c 	bl	800b2d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2150      	movs	r1, #80	; 0x50
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 f966 	bl	800b398 <TIM_ITRx_SetConfig>
      break;
 800b0cc:	e02c      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0da:	461a      	mov	r2, r3
 800b0dc:	f000 f92b 	bl	800b336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2160      	movs	r1, #96	; 0x60
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 f956 	bl	800b398 <TIM_ITRx_SetConfig>
      break;
 800b0ec:	e01c      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	f000 f8ec 	bl	800b2d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2140      	movs	r1, #64	; 0x40
 800b106:	4618      	mov	r0, r3
 800b108:	f000 f946 	bl	800b398 <TIM_ITRx_SetConfig>
      break;
 800b10c:	e00c      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f000 f93d 	bl	800b398 <TIM_ITRx_SetConfig>
      break;
 800b11e:	e003      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
      break;
 800b124:	e000      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b138:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	ffceff88 	.word	0xffceff88
 800b148:	00100040 	.word	0x00100040
 800b14c:	00100030 	.word	0x00100030
 800b150:	00100020 	.word	0x00100020

0800b154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a40      	ldr	r2, [pc, #256]	; (800b2b8 <TIM_Base_SetConfig+0x114>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d013      	beq.n	800b1e4 <TIM_Base_SetConfig+0x40>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1c2:	d00f      	beq.n	800b1e4 <TIM_Base_SetConfig+0x40>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a3d      	ldr	r2, [pc, #244]	; (800b2bc <TIM_Base_SetConfig+0x118>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d00b      	beq.n	800b1e4 <TIM_Base_SetConfig+0x40>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a3c      	ldr	r2, [pc, #240]	; (800b2c0 <TIM_Base_SetConfig+0x11c>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d007      	beq.n	800b1e4 <TIM_Base_SetConfig+0x40>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a3b      	ldr	r2, [pc, #236]	; (800b2c4 <TIM_Base_SetConfig+0x120>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d003      	beq.n	800b1e4 <TIM_Base_SetConfig+0x40>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a3a      	ldr	r2, [pc, #232]	; (800b2c8 <TIM_Base_SetConfig+0x124>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d108      	bne.n	800b1f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a2f      	ldr	r2, [pc, #188]	; (800b2b8 <TIM_Base_SetConfig+0x114>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d01f      	beq.n	800b23e <TIM_Base_SetConfig+0x9a>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b204:	d01b      	beq.n	800b23e <TIM_Base_SetConfig+0x9a>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a2c      	ldr	r2, [pc, #176]	; (800b2bc <TIM_Base_SetConfig+0x118>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d017      	beq.n	800b23e <TIM_Base_SetConfig+0x9a>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a2b      	ldr	r2, [pc, #172]	; (800b2c0 <TIM_Base_SetConfig+0x11c>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d013      	beq.n	800b23e <TIM_Base_SetConfig+0x9a>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a2a      	ldr	r2, [pc, #168]	; (800b2c4 <TIM_Base_SetConfig+0x120>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d00f      	beq.n	800b23e <TIM_Base_SetConfig+0x9a>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a29      	ldr	r2, [pc, #164]	; (800b2c8 <TIM_Base_SetConfig+0x124>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d00b      	beq.n	800b23e <TIM_Base_SetConfig+0x9a>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a28      	ldr	r2, [pc, #160]	; (800b2cc <TIM_Base_SetConfig+0x128>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d007      	beq.n	800b23e <TIM_Base_SetConfig+0x9a>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a27      	ldr	r2, [pc, #156]	; (800b2d0 <TIM_Base_SetConfig+0x12c>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d003      	beq.n	800b23e <TIM_Base_SetConfig+0x9a>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a26      	ldr	r2, [pc, #152]	; (800b2d4 <TIM_Base_SetConfig+0x130>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d108      	bne.n	800b250 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	689a      	ldr	r2, [r3, #8]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a10      	ldr	r2, [pc, #64]	; (800b2b8 <TIM_Base_SetConfig+0x114>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d00f      	beq.n	800b29c <TIM_Base_SetConfig+0xf8>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a12      	ldr	r2, [pc, #72]	; (800b2c8 <TIM_Base_SetConfig+0x124>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00b      	beq.n	800b29c <TIM_Base_SetConfig+0xf8>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <TIM_Base_SetConfig+0x128>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d007      	beq.n	800b29c <TIM_Base_SetConfig+0xf8>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a10      	ldr	r2, [pc, #64]	; (800b2d0 <TIM_Base_SetConfig+0x12c>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d003      	beq.n	800b29c <TIM_Base_SetConfig+0xf8>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a0f      	ldr	r2, [pc, #60]	; (800b2d4 <TIM_Base_SetConfig+0x130>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d103      	bne.n	800b2a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	691a      	ldr	r2, [r3, #16]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	615a      	str	r2, [r3, #20]
}
 800b2aa:	bf00      	nop
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	40010000 	.word	0x40010000
 800b2bc:	40000400 	.word	0x40000400
 800b2c0:	40000800 	.word	0x40000800
 800b2c4:	40000c00 	.word	0x40000c00
 800b2c8:	40010400 	.word	0x40010400
 800b2cc:	40014000 	.word	0x40014000
 800b2d0:	40014400 	.word	0x40014400
 800b2d4:	40014800 	.word	0x40014800

0800b2d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b087      	sub	sp, #28
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	f023 0201 	bic.w	r2, r3, #1
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f023 030a 	bic.w	r3, r3, #10
 800b314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	621a      	str	r2, [r3, #32]
}
 800b32a:	bf00      	nop
 800b32c:	371c      	adds	r7, #28
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b336:	b480      	push	{r7}
 800b338:	b087      	sub	sp, #28
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	f023 0210 	bic.w	r2, r3, #16
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a1b      	ldr	r3, [r3, #32]
 800b358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	031b      	lsls	r3, r3, #12
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	4313      	orrs	r3, r2
 800b36a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	011b      	lsls	r3, r3, #4
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	621a      	str	r2, [r3, #32]
}
 800b38a:	bf00      	nop
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
	...

0800b398 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <TIM_ITRx_SetConfig+0x38>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	f043 0307 	orr.w	r3, r3, #7
 800b3ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	609a      	str	r2, [r3, #8]
}
 800b3c2:	bf00      	nop
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	ffcfff8f 	.word	0xffcfff8f

0800b3d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	021a      	lsls	r2, r3, #8
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	609a      	str	r2, [r3, #8]
}
 800b408:	bf00      	nop
 800b40a:	371c      	adds	r7, #28
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b424:	2b01      	cmp	r3, #1
 800b426:	d101      	bne.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b428:	2302      	movs	r3, #2
 800b42a:	e06d      	b.n	800b508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2202      	movs	r2, #2
 800b438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a30      	ldr	r2, [pc, #192]	; (800b514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d004      	beq.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a2f      	ldr	r2, [pc, #188]	; (800b518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d108      	bne.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	4313      	orrs	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a20      	ldr	r2, [pc, #128]	; (800b514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d022      	beq.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49e:	d01d      	beq.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a1d      	ldr	r2, [pc, #116]	; (800b51c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d018      	beq.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a1c      	ldr	r2, [pc, #112]	; (800b520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d013      	beq.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a1a      	ldr	r2, [pc, #104]	; (800b524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d00e      	beq.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a15      	ldr	r2, [pc, #84]	; (800b518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d009      	beq.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a16      	ldr	r2, [pc, #88]	; (800b528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d004      	beq.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a15      	ldr	r2, [pc, #84]	; (800b52c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d10c      	bne.n	800b4f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	40010000 	.word	0x40010000
 800b518:	40010400 	.word	0x40010400
 800b51c:	40000400 	.word	0x40000400
 800b520:	40000800 	.word	0x40000800
 800b524:	40000c00 	.word	0x40000c00
 800b528:	40001800 	.word	0x40001800
 800b52c:	40014000 	.word	0x40014000

0800b530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <memset>:
 800b56c:	4402      	add	r2, r0
 800b56e:	4603      	mov	r3, r0
 800b570:	4293      	cmp	r3, r2
 800b572:	d100      	bne.n	800b576 <memset+0xa>
 800b574:	4770      	bx	lr
 800b576:	f803 1b01 	strb.w	r1, [r3], #1
 800b57a:	e7f9      	b.n	800b570 <memset+0x4>

0800b57c <__libc_init_array>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	4d0d      	ldr	r5, [pc, #52]	; (800b5b4 <__libc_init_array+0x38>)
 800b580:	4c0d      	ldr	r4, [pc, #52]	; (800b5b8 <__libc_init_array+0x3c>)
 800b582:	1b64      	subs	r4, r4, r5
 800b584:	10a4      	asrs	r4, r4, #2
 800b586:	2600      	movs	r6, #0
 800b588:	42a6      	cmp	r6, r4
 800b58a:	d109      	bne.n	800b5a0 <__libc_init_array+0x24>
 800b58c:	4d0b      	ldr	r5, [pc, #44]	; (800b5bc <__libc_init_array+0x40>)
 800b58e:	4c0c      	ldr	r4, [pc, #48]	; (800b5c0 <__libc_init_array+0x44>)
 800b590:	f000 f826 	bl	800b5e0 <_init>
 800b594:	1b64      	subs	r4, r4, r5
 800b596:	10a4      	asrs	r4, r4, #2
 800b598:	2600      	movs	r6, #0
 800b59a:	42a6      	cmp	r6, r4
 800b59c:	d105      	bne.n	800b5aa <__libc_init_array+0x2e>
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a4:	4798      	blx	r3
 800b5a6:	3601      	adds	r6, #1
 800b5a8:	e7ee      	b.n	800b588 <__libc_init_array+0xc>
 800b5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ae:	4798      	blx	r3
 800b5b0:	3601      	adds	r6, #1
 800b5b2:	e7f2      	b.n	800b59a <__libc_init_array+0x1e>
 800b5b4:	0800b610 	.word	0x0800b610
 800b5b8:	0800b610 	.word	0x0800b610
 800b5bc:	0800b610 	.word	0x0800b610
 800b5c0:	0800b614 	.word	0x0800b614

0800b5c4 <memcpy>:
 800b5c4:	440a      	add	r2, r1
 800b5c6:	4291      	cmp	r1, r2
 800b5c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5cc:	d100      	bne.n	800b5d0 <memcpy+0xc>
 800b5ce:	4770      	bx	lr
 800b5d0:	b510      	push	{r4, lr}
 800b5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5da:	4291      	cmp	r1, r2
 800b5dc:	d1f9      	bne.n	800b5d2 <memcpy+0xe>
 800b5de:	bd10      	pop	{r4, pc}

0800b5e0 <_init>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr

0800b5ec <_fini>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	bf00      	nop
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr
